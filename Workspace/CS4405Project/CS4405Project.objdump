
CS4405Project.elf:     file format elf32-littlenios2
CS4405Project.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00007638 memsz 0x00007638 flags r-x
    LOAD off    0x00008658 vaddr 0x00007658 paddr 0x00009454 align 2**12
         filesz 0x00001dfc memsz 0x00001dfc flags rw-
    LOAD off    0x0000b250 vaddr 0x0000b250 paddr 0x0000b250 align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000072e0  000001b8  000001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001c0  00007498  00007498  00008498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001dfc  00007658  00009454  00008658  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  0000b250  0000b250  0000b250  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000a454  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000a38  00000000  00000000  0000a480  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001569  00000000  00000000  0000aeb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001d68e  00000000  00000000  0000c421  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005872  00000000  00000000  00029aaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000f42c  00000000  00000000  0002f321  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000017a4  00000000  00000000  0003e750  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001913  00000000  00000000  0003fef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004903  00000000  00000000  00041807  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0004610c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  00046160  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000497c4  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000497c7  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000497ca  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000497cb  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000497cc  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000497d0  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000497d4  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000497d8  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000497e1  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000497ea  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  000497f3  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000069  00000000  00000000  000497fe  2**0
                  CONTENTS, READONLY
 29 .jdi          00004aa3  00000000  00000000  00049867  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00108489  00000000  00000000  0004e30a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b8 l    d  .text	00000000 .text
00007498 l    d  .rodata	00000000 .rodata
00007658 l    d  .rwdata	00000000 .rwdata
0000b250 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 os.c
00000000 l    df *ABS*	00000000 os_fifo.c
00000000 l    df *ABS*	00000000 os_init.c
00000000 l    df *ABS*	00000000 os_memory.c
00000000 l    df *ABS*	00000000 os_processmanage.c
00000000 l    df *ABS*	00000000 os_semaphore.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00007658 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00001bc8 l     F .text	00000058 std
00001cd4 l     F .text	00000008 __fp_lock
00001cdc l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
00002c9c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00002cfc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00002dfc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00002f1c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00002ffc l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00003158 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00003384 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00009444 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00003620 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00008008 l     O .rwdata	00001060 JTAG_UART
00009068 l     O .rwdata	00000030 AV_Config
00009098 l     O .rwdata	00000030 Audio
000090c8 l     O .rwdata	0000002c Char_LCD_16x2
000090f4 l     O .rwdata	0000003c Ethernet
00009130 l     O .rwdata	0000002c IrDA_UART
0000915c l     O .rwdata	0000002c Expansion_JP1
00009188 l     O .rwdata	0000002c Expansion_JP2
000091b4 l     O .rwdata	0000002c Green_LEDs
000091e0 l     O .rwdata	0000002c HEX3_HEX0
0000920c l     O .rwdata	0000002c HEX7_HEX4
00009238 l     O .rwdata	0000002c Pushbuttons
00009264 l     O .rwdata	0000002c Red_LEDs
00009290 l     O .rwdata	0000002c Slider_Switches
000092bc l     O .rwdata	00000038 PS2_Port
000092f4 l     O .rwdata	0000002c Serial_Port
00009320 l     O .rwdata	00000034 USB
00009354 l     O .rwdata	00000048 VGA_Char_Buffer
0000939c l     O .rwdata	00000054 VGA_Pixel_Buffer
000093f0 l     O .rwdata	0000002c SD_Card
00003ab4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00003cec l     F .text	0000022c altera_avalon_jtag_uart_irq
00003f18 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00004594 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ethernet.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ethernet_low_level_driver.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000629c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00006488 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00006784 l     F .text	000000dc alt_file_locked
000069e8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00007280 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00007434 l     F .text	00000040 alt_sim_halt
00002a40 g     F .text	00000070 _isatty_r
000031b8 g     F .text	0000006c alt_main
00000290 g     F .text	000000a0 _puts_r
0000b2a0 g     O .bss	00000100 alt_irq
00005528 g     F .text	00000058 alt_up_ps2_disable_read_interrupt
00002ab0 g     F .text	00000078 _lseek_r
00009454 g       *ABS*	00000000 __flash_rwdata_start
0000470c g     F .text	00000034 alt_up_character_lcd_send_cmd
0000b530 g       *ABS*	00000000 __alt_heap_start
0000267c g     F .text	00000068 __sseek
00001c30 g     F .text	000000a4 __sinit
00005f08 g     F .text	00000114 alt_up_char_buffer_string
00005340 g     F .text	00000034 read_CE_bit
00001d30 g     F .text	00000068 __sfmoreglue
00003244 g     F .text	00000020 __malloc_unlock
000056d4 g     F .text	000000b0 alt_up_ps2_read_data_byte_timeout
00005c10 g     F .text	00000090 alt_up_rs232_read_fd
00005e38 g     F .text	000000d0 alt_up_char_buffer_draw
00001118 g     F .text	000000e0 memmove
00001d20 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
00004690 g     F .text	0000007c get_DDRAM_addr
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000029cc g     F .text	00000074 _fstat_r
0000b25c g     O .bss	00000004 errno
0000b264 g     O .bss	00000004 alt_argv
0001141c g       *ABS*	00000000 _gp
00006bec g     F .text	00000030 usleep
00007e88 g     O .rwdata	00000180 alt_fd_list
000063c4 g     F .text	00000094 alt_find_dev
00001078 g     F .text	000000a0 memcpy
000048a4 g     F .text	0000004c alt_up_character_lcd_write_fd
0000601c g     F .text	0000005c alt_up_char_buffer_clear
00001d14 g     F .text	0000000c _cleanup_r
0000654c g     F .text	00000078 alt_io_redirect
00007498 g       *ABS*	00000000 __DTOR_END__
0000520c g     F .text	00000090 alt_up_irda_write_fd
00005b9c g     F .text	00000074 alt_up_rs232_read_data
00000330 g     F .text	00000014 puts
00004ff4 g     F .text	0000003c alt_up_irda_get_used_space_in_read_FIFO
00004130 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00002e5c g     F .text	000000c0 isatty
00004d4c g     F .text	00000044 alt_up_ethernet_reg_write
00004f9c g     F .text	00000058 alt_up_irda_disable_read_interrupt
00006f40 g     F .text	00000090 alt_icache_flush
0000b250 g     O .bss	00000004 __malloc_top_pad
000003b8 g     F .text	0000049c __sfvwrite_r
000017ec g     F .text	00000070 _sbrk_r
00002b28 g     F .text	00000078 _read_r
0000943c g     O .rwdata	00000004 alt_max_fd
00005b04 g     F .text	00000050 alt_up_rs232_check_parity
00004bc0 g     F .text	00000110 alt_up_ethernet_init
000028a8 g     F .text	00000110 _fclose_r
00005374 g     F .text	00000034 read_num_bytes_available
00001b94 g     F .text	00000034 fflush
0000b254 g     O .bss	00000004 __malloc_max_sbrked_mem
000065c4 g     F .text	000001c0 alt_irq_register
000052dc g     F .text	00000034 read_RI_bit
00003068 g     F .text	000000f0 lseek
00009420 g     O .rwdata	00000004 _global_impure_ptr
000011f8 g     F .text	000005f4 _realloc_r
0000b530 g       *ABS*	00000000 __bss_end
00006ae0 g     F .text	0000010c alt_tick
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
000053dc g     F .text	0000002c read_data_byte
00001cfc g     F .text	00000018 __fp_lock_all
00006a48 g     F .text	00000098 alt_alarm_stop
00005310 g     F .text	00000030 read_RE_bit
0000b26c g     O .bss	00000004 alt_irq_active
00005030 g     F .text	00000040 alt_up_irda_get_available_space_in_write_FIFO
000000ec g     F .exceptions	000000cc alt_irq_handler
00007e60 g     O .rwdata	00000028 alt_dev_null
00004b8c g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00005580 g     F .text	00000078 alt_up_ps2_write_data_byte
000061cc g     F .text	0000001c alt_dcache_flush_all
00009454 g       *ABS*	00000000 __ram_rwdata_end
00009434 g     O .rwdata	00000008 alt_dev_list
00003500 g     F .text	00000120 write
00007658 g       *ABS*	00000000 __ram_rodata_end
00002d28 g     F .text	000000d4 fstat
00005ca0 g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000b530 g       *ABS*	00000000 end
000058f4 g     F .text	000000a8 alt_up_ps2_write_fd
00005070 g     F .text	00000050 alt_up_irda_check_parity
00005d74 g     F .text	00000084 alt_up_char_buffer_init
00003c34 g     F .text	000000b8 altera_avalon_jtag_uart_init
00007494 g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
00004608 g     F .text	00000088 alt_avalon_timer_sc_init
00004354 g     F .text	00000240 altera_avalon_jtag_uart_write
00001c20 g     F .text	00000004 __sfp_lock_acquire
00000f94 g     F .text	000000e4 memchr
000047b4 g     F .text	00000078 alt_up_character_lcd_write
00001fb4 g     F .text	00000314 _free_r
00007284 g     F .text	000001b0 __call_exitprocs
00009428 g     O .rwdata	00000004 __malloc_sbrk_base
000001b8 g     F .text	0000003c _start
0000b270 g     O .bss	00000004 _alt_tick_rate
0000b274 g     O .bss	00000004 _alt_nticks
00003264 g     F .text	00000120 read
000036b4 g     F .text	00000400 alt_sys_init
00004a18 g     F .text	000000b0 alt_up_character_lcd_shift_display
0000714c g     F .text	00000134 __register_exitproc
00005800 g     F .text	00000058 alt_up_ps2_clear_fifo
00005ac4 g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
00004ac8 g     F .text	00000090 alt_up_character_lcd_erase_pos
00003fc8 g     F .text	00000074 altera_avalon_jtag_uart_close
00007658 g       *ABS*	00000000 __ram_rwdata_start
00007498 g       *ABS*	00000000 __ram_rodata_start
0000b278 g     O .bss	00000028 __malloc_current_mallinfo
00003aec g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00006e88 g     F .text	000000b8 alt_get_fd
00000228 g     F .text	0000001c OS_Init
00006c3c g     F .text	0000012c alt_busy_sleep
00002838 g     F .text	00000070 _close_r
0000701c g     F .text	00000074 memcmp
00003b9c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0000b530 g       *ABS*	00000000 __alt_stack_base
00003be4 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00004f48 g     F .text	00000054 alt_up_irda_enable_read_interrupt
0000185c g     F .text	0000013c __swsetup_r
00001d98 g     F .text	000000f0 __sfp
00007a58 g     O .rwdata	00000408 __malloc_av_
00001c2c g     F .text	00000004 __sinit_lock_release
00002760 g     F .text	00000060 __sread
00005a30 g     F .text	00000058 alt_up_rs232_disable_read_interrupt
00006d68 g     F .text	00000120 alt_find_file
000061e8 g     F .text	000000b4 alt_dev_llist_insert
00003224 g     F .text	00000020 __malloc_lock
00003444 g     F .text	000000bc sbrk
00001998 g     F .text	000001fc _fflush_r
0000b250 g       *ABS*	00000000 __bss_start
000025dc g     F .text	00000098 memset
000001f4 g     F .text	00000034 main
0000b268 g     O .bss	00000004 alt_envp
0000b258 g     O .bss	00000004 __malloc_max_total_mem
00005df8 g     F .text	00000040 alt_up_char_buffer_open_dev
00003b44 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00004968 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
00002674 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
000029b8 g     F .text	00000014 fclose
00005784 g     F .text	0000007c alt_up_ps2_read_data_byte
0000b3a0 g     O .bss	00000190 _atexit0
00000854 g     F .text	00000740 _malloc_r
00009440 g     O .rwdata	00000004 alt_errno
00002390 g     F .text	000000b8 _fwalk
000050c0 g     F .text	00000048 alt_up_irda_write_data
0000599c g     F .text	00000040 alt_up_ps2_open_dev
00004774 g     F .text	00000040 alt_up_character_lcd_open_dev
00001e88 g     F .text	0000012c _malloc_trim_r
000054d4 g     F .text	00000054 alt_up_ps2_enable_read_interrupt
00007498 g       *ABS*	00000000 __CTOR_END__
00004740 g     F .text	00000034 alt_up_character_lcd_init
00007090 g     F .text	000000bc strcmp
00007498 g       *ABS*	00000000 __flash_rodata_start
00007498 g       *ABS*	00000000 __DTOR_LIST__
00005d34 g     F .text	00000040 alt_up_rs232_open_dev
00003680 g     F .text	00000034 alt_irq_init
000033e4 g     F .text	00000060 alt_release_fd
000053a8 g     F .text	00000034 read_data_valid
00004b58 g     F .text	00000034 alt_up_character_lcd_cursor_off
00005668 g     F .text	0000006c alt_up_ps2_write_data_byte_with_ack
00006fd0 g     F .text	00000014 atexit
000027c0 g     F .text	00000078 _write_r
0000941c g     O .rwdata	00000004 _impure_ptr
0000b260 g     O .bss	00000004 alt_argc
00006360 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00001ce4 g     F .text	00000018 __fp_unlock_all
0000942c g     O .rwdata	00000008 alt_fs_list
000059dc g     F .text	00000054 alt_up_rs232_enable_read_interrupt
00005b54 g     F .text	00000048 alt_up_rs232_write_data
00004d90 g     F .text	000000e0 alt_up_ethernet_phy_reg_read
00000020 g       *ABS*	00000000 __ram_exceptions_start
00009454 g       *ABS*	00000000 _edata
0000b530 g       *ABS*	00000000 _end
000001b8 g       *ABS*	00000000 __ram_exceptions_end
0000403c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00000274 g     F .text	0000001c OS_Abort
000026e4 g     F .text	0000007c __swrite
00009424 g     O .rwdata	00000004 __malloc_trim_threshold
00006c1c g     F .text	00000020 altera_nios2_qsys_irq_init
00006fe4 g     F .text	00000038 exit
00005108 g     F .text	00000074 alt_up_irda_read_data
000022c8 g     F .text	000000c8 _fwalk_reent
00005408 g     F .text	000000cc alt_up_ps2_init
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00001c24 g     F .text	00000004 __sfp_lock_release
0000482c g     F .text	00000078 alt_up_character_lcd_string
0000529c g     F .text	00000040 alt_up_irda_open_dev
00007474 g     F .text	00000020 _exit
00006078 g     F .text	00000154 alt_alarm_start
00002448 g     F .text	00000194 __smakebuf_r
000055f8 g     F .text	00000070 alt_up_ps2_wait_for_ack
00000344 g     F .text	00000074 strlen
00004cd0 g     F .text	00000040 alt_up_ethernet_open_dev
00006860 g     F .text	00000188 open
00006458 g     F .text	00000030 alt_icache_flush_all
00004e70 g     F .text	000000d8 alt_up_ethernet_phy_reg_write
000048f0 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
00009448 g     O .rwdata	00000004 alt_priority_mask
00005858 g     F .text	0000009c alt_up_ps2_read_fd
0000517c g     F .text	00000090 alt_up_irda_read_fd
0000944c g     O .rwdata	00000008 alt_alarm_list
000062fc g     F .text	00000064 _do_ctors
00005a88 g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
00002ba0 g     F .text	000000fc close
00002f7c g     F .text	00000080 alt_load
00004d10 g     F .text	0000003c alt_up_ethernet_reg_read
00000244 g     F .text	00000030 OS_Start
00000000  w      *UND*	00000000 free
00001c28 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406e14 	ori	at,at,440
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000171e 	bne	r2,zero,188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00074 	movhi	r3,1
 134:	18eca804 	addi	r3,r3,-19808
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11800017 	ldw	r6,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00074 	movhi	r3,1
 14c:	18eca804 	addi	r3,r3,-19808
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	e17ffd17 	ldw	r5,-12(fp)
 164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 168:	0005313a 	rdctl	r2,ipending
 16c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 178:	e0bfff17 	ldw	r2,-4(fp)
 17c:	1004c03a 	cmpne	r2,r2,zero
 180:	103fe21e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 184:	00000706 	br	1a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 188:	e0bffe17 	ldw	r2,-8(fp)
 18c:	1085883a 	add	r2,r2,r2
 190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 194:	e0bffd17 	ldw	r2,-12(fp)
 198:	10800044 	addi	r2,r2,1
 19c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a0:	003fdd06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a4:	e037883a 	mov	sp,fp
 1a8:	dfc00117 	ldw	ra,4(sp)
 1ac:	df000017 	ldw	fp,0(sp)
 1b0:	dec00204 	addi	sp,sp,8
 1b4:	f800283a 	ret

Disassembly of section .text:

000001b8 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b8:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1bc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1c0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c4:	d6850714 	ori	gp,gp,5148
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c8:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1cc:	10ac9414 	ori	r2,r2,45648

    movhi r3, %hi(__bss_end)
     1d0:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1d4:	18ed4c14 	ori	r3,r3,46384

    beq r2, r3, 1f
     1d8:	10c00326 	beq	r2,r3,1e8 <_start+0x30>

0:
    stw zero, (r2)
     1dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e4:	10fffd36 	bltu	r2,r3,1dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e8:	0002f7c0 	call	2f7c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1ec:	00031b80 	call	31b8 <alt_main>

000001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f0:	003fff06 	br	1f0 <alt_after_alt_main>

000001f4 <main>:

#include <stdio.h>
#include "os.h"

int main()
{
     1f4:	defffe04 	addi	sp,sp,-8
     1f8:	dfc00115 	stw	ra,4(sp)
     1fc:	df000015 	stw	fp,0(sp)
     200:	d839883a 	mov	fp,sp
  printf("aa\n");
     204:	01000034 	movhi	r4,0
     208:	211d2604 	addi	r4,r4,29848
     20c:	00003300 	call	330 <puts>

  return 0;
     210:	0005883a 	mov	r2,zero
}
     214:	e037883a 	mov	sp,fp
     218:	dfc00117 	ldw	ra,4(sp)
     21c:	df000017 	ldw	fp,0(sp)
     220:	dec00204 	addi	sp,sp,8
     224:	f800283a 	ret

00000228 <OS_Init>:
 */

#include "os.h"


void OS_Init(){
     228:	deffff04 	addi	sp,sp,-4
     22c:	df000015 	stw	fp,0(sp)
     230:	d839883a 	mov	fp,sp

}
     234:	e037883a 	mov	sp,fp
     238:	df000017 	ldw	fp,0(sp)
     23c:	dec00104 	addi	sp,sp,4
     240:	f800283a 	ret

00000244 <OS_Start>:

void OS_Start(){
     244:	defffe04 	addi	sp,sp,-8
     248:	df000115 	stw	fp,4(sp)
     24c:	df000104 	addi	fp,sp,4

	int running = 1;
     250:	00800044 	movi	r2,1
     254:	e0bfff15 	stw	r2,-4(fp)
	while (running){
     258:	e0bfff17 	ldw	r2,-4(fp)
     25c:	1004c03a 	cmpne	r2,r2,zero
     260:	103ffd1e 	bne	r2,zero,258 <OS_Start+0x14>

	}
}
     264:	e037883a 	mov	sp,fp
     268:	df000017 	ldw	fp,0(sp)
     26c:	dec00104 	addi	sp,sp,4
     270:	f800283a 	ret

00000274 <OS_Abort>:

void OS_Abort(){
     274:	deffff04 	addi	sp,sp,-4
     278:	df000015 	stw	fp,0(sp)
     27c:	d839883a 	mov	fp,sp

}
     280:	e037883a 	mov	sp,fp
     284:	df000017 	ldw	fp,0(sp)
     288:	dec00104 	addi	sp,sp,4
     28c:	f800283a 	ret

00000290 <_puts_r>:
     290:	defff604 	addi	sp,sp,-40
     294:	dc400715 	stw	r17,28(sp)
     298:	2023883a 	mov	r17,r4
     29c:	2809883a 	mov	r4,r5
     2a0:	dfc00915 	stw	ra,36(sp)
     2a4:	dcc00815 	stw	r19,32(sp)
     2a8:	2827883a 	mov	r19,r5
     2ac:	00003440 	call	344 <strlen>
     2b0:	89400217 	ldw	r5,8(r17)
     2b4:	00c00034 	movhi	r3,0
     2b8:	18dd2704 	addi	r3,r3,29852
     2bc:	01c00044 	movi	r7,1
     2c0:	12000044 	addi	r8,r2,1
     2c4:	d8c00515 	stw	r3,20(sp)
     2c8:	d9c00615 	stw	r7,24(sp)
     2cc:	d8c00304 	addi	r3,sp,12
     2d0:	01c00084 	movi	r7,2
     2d4:	8809883a 	mov	r4,r17
     2d8:	d80d883a 	mov	r6,sp
     2dc:	d8c00015 	stw	r3,0(sp)
     2e0:	dcc00315 	stw	r19,12(sp)
     2e4:	da000215 	stw	r8,8(sp)
     2e8:	d9c00115 	stw	r7,4(sp)
     2ec:	d8800415 	stw	r2,16(sp)
     2f0:	00003b80 	call	3b8 <__sfvwrite_r>
     2f4:	00ffffc4 	movi	r3,-1
     2f8:	10000626 	beq	r2,zero,314 <_puts_r+0x84>
     2fc:	1805883a 	mov	r2,r3
     300:	dfc00917 	ldw	ra,36(sp)
     304:	dcc00817 	ldw	r19,32(sp)
     308:	dc400717 	ldw	r17,28(sp)
     30c:	dec00a04 	addi	sp,sp,40
     310:	f800283a 	ret
     314:	00c00284 	movi	r3,10
     318:	1805883a 	mov	r2,r3
     31c:	dfc00917 	ldw	ra,36(sp)
     320:	dcc00817 	ldw	r19,32(sp)
     324:	dc400717 	ldw	r17,28(sp)
     328:	dec00a04 	addi	sp,sp,40
     32c:	f800283a 	ret

00000330 <puts>:
     330:	00800074 	movhi	r2,1
     334:	10a50704 	addi	r2,r2,-27620
     338:	200b883a 	mov	r5,r4
     33c:	11000017 	ldw	r4,0(r2)
     340:	00002901 	jmpi	290 <_puts_r>

00000344 <strlen>:
     344:	208000cc 	andi	r2,r4,3
     348:	2011883a 	mov	r8,r4
     34c:	1000161e 	bne	r2,zero,3a8 <strlen+0x64>
     350:	20c00017 	ldw	r3,0(r4)
     354:	017fbff4 	movhi	r5,65279
     358:	297fbfc4 	addi	r5,r5,-257
     35c:	01e02074 	movhi	r7,32897
     360:	39e02004 	addi	r7,r7,-32640
     364:	1945883a 	add	r2,r3,r5
     368:	11c4703a 	and	r2,r2,r7
     36c:	00c6303a 	nor	r3,zero,r3
     370:	1886703a 	and	r3,r3,r2
     374:	18000c1e 	bne	r3,zero,3a8 <strlen+0x64>
     378:	280d883a 	mov	r6,r5
     37c:	380b883a 	mov	r5,r7
     380:	21000104 	addi	r4,r4,4
     384:	20800017 	ldw	r2,0(r4)
     388:	1187883a 	add	r3,r2,r6
     38c:	1946703a 	and	r3,r3,r5
     390:	0084303a 	nor	r2,zero,r2
     394:	10c4703a 	and	r2,r2,r3
     398:	103ff926 	beq	r2,zero,380 <strlen+0x3c>
     39c:	20800007 	ldb	r2,0(r4)
     3a0:	10000326 	beq	r2,zero,3b0 <strlen+0x6c>
     3a4:	21000044 	addi	r4,r4,1
     3a8:	20800007 	ldb	r2,0(r4)
     3ac:	103ffd1e 	bne	r2,zero,3a4 <strlen+0x60>
     3b0:	2205c83a 	sub	r2,r4,r8
     3b4:	f800283a 	ret

000003b8 <__sfvwrite_r>:
     3b8:	30800217 	ldw	r2,8(r6)
     3bc:	defff504 	addi	sp,sp,-44
     3c0:	df000915 	stw	fp,36(sp)
     3c4:	dd800715 	stw	r22,28(sp)
     3c8:	dc800315 	stw	r18,12(sp)
     3cc:	dfc00a15 	stw	ra,40(sp)
     3d0:	ddc00815 	stw	r23,32(sp)
     3d4:	dd400615 	stw	r21,24(sp)
     3d8:	dd000515 	stw	r20,20(sp)
     3dc:	dcc00415 	stw	r19,16(sp)
     3e0:	dc400215 	stw	r17,8(sp)
     3e4:	dc000115 	stw	r16,4(sp)
     3e8:	302d883a 	mov	r22,r6
     3ec:	2039883a 	mov	fp,r4
     3f0:	2825883a 	mov	r18,r5
     3f4:	10001c26 	beq	r2,zero,468 <__sfvwrite_r+0xb0>
     3f8:	29c0030b 	ldhu	r7,12(r5)
     3fc:	3880020c 	andi	r2,r7,8
     400:	10002726 	beq	r2,zero,4a0 <__sfvwrite_r+0xe8>
     404:	28800417 	ldw	r2,16(r5)
     408:	10002526 	beq	r2,zero,4a0 <__sfvwrite_r+0xe8>
     40c:	3880008c 	andi	r2,r7,2
     410:	b5400017 	ldw	r21,0(r22)
     414:	10002826 	beq	r2,zero,4b8 <__sfvwrite_r+0x100>
     418:	0021883a 	mov	r16,zero
     41c:	0023883a 	mov	r17,zero
     420:	880d883a 	mov	r6,r17
     424:	e009883a 	mov	r4,fp
     428:	00810004 	movi	r2,1024
     42c:	80006e26 	beq	r16,zero,5e8 <__sfvwrite_r+0x230>
     430:	800f883a 	mov	r7,r16
     434:	91400717 	ldw	r5,28(r18)
     438:	1400012e 	bgeu	r2,r16,440 <__sfvwrite_r+0x88>
     43c:	100f883a 	mov	r7,r2
     440:	90c00917 	ldw	r3,36(r18)
     444:	183ee83a 	callr	r3
     448:	1007883a 	mov	r3,r2
     44c:	80a1c83a 	sub	r16,r16,r2
     450:	88a3883a 	add	r17,r17,r2
     454:	00806d0e 	bge	zero,r2,60c <__sfvwrite_r+0x254>
     458:	b0800217 	ldw	r2,8(r22)
     45c:	10c5c83a 	sub	r2,r2,r3
     460:	b0800215 	stw	r2,8(r22)
     464:	103fee1e 	bne	r2,zero,420 <__sfvwrite_r+0x68>
     468:	0009883a 	mov	r4,zero
     46c:	2005883a 	mov	r2,r4
     470:	dfc00a17 	ldw	ra,40(sp)
     474:	df000917 	ldw	fp,36(sp)
     478:	ddc00817 	ldw	r23,32(sp)
     47c:	dd800717 	ldw	r22,28(sp)
     480:	dd400617 	ldw	r21,24(sp)
     484:	dd000517 	ldw	r20,20(sp)
     488:	dcc00417 	ldw	r19,16(sp)
     48c:	dc800317 	ldw	r18,12(sp)
     490:	dc400217 	ldw	r17,8(sp)
     494:	dc000117 	ldw	r16,4(sp)
     498:	dec00b04 	addi	sp,sp,44
     49c:	f800283a 	ret
     4a0:	000185c0 	call	185c <__swsetup_r>
     4a4:	1000e41e 	bne	r2,zero,838 <__sfvwrite_r+0x480>
     4a8:	91c0030b 	ldhu	r7,12(r18)
     4ac:	b5400017 	ldw	r21,0(r22)
     4b0:	3880008c 	andi	r2,r7,2
     4b4:	103fd81e 	bne	r2,zero,418 <__sfvwrite_r+0x60>
     4b8:	3880004c 	andi	r2,r7,1
     4bc:	1005003a 	cmpeq	r2,r2,zero
     4c0:	10005726 	beq	r2,zero,620 <__sfvwrite_r+0x268>
     4c4:	0029883a 	mov	r20,zero
     4c8:	002f883a 	mov	r23,zero
     4cc:	a0004226 	beq	r20,zero,5d8 <__sfvwrite_r+0x220>
     4d0:	3880800c 	andi	r2,r7,512
     4d4:	94000217 	ldw	r16,8(r18)
     4d8:	10008b26 	beq	r2,zero,708 <__sfvwrite_r+0x350>
     4dc:	800d883a 	mov	r6,r16
     4e0:	a400a536 	bltu	r20,r16,778 <__sfvwrite_r+0x3c0>
     4e4:	3881200c 	andi	r2,r7,1152
     4e8:	10002726 	beq	r2,zero,588 <__sfvwrite_r+0x1d0>
     4ec:	90800517 	ldw	r2,20(r18)
     4f0:	92000417 	ldw	r8,16(r18)
     4f4:	91400017 	ldw	r5,0(r18)
     4f8:	1087883a 	add	r3,r2,r2
     4fc:	1887883a 	add	r3,r3,r2
     500:	1808d7fa 	srli	r4,r3,31
     504:	2a21c83a 	sub	r16,r5,r8
     508:	80800044 	addi	r2,r16,1
     50c:	20c9883a 	add	r4,r4,r3
     510:	2027d07a 	srai	r19,r4,1
     514:	a085883a 	add	r2,r20,r2
     518:	980d883a 	mov	r6,r19
     51c:	9880022e 	bgeu	r19,r2,528 <__sfvwrite_r+0x170>
     520:	1027883a 	mov	r19,r2
     524:	100d883a 	mov	r6,r2
     528:	3881000c 	andi	r2,r7,1024
     52c:	1000b826 	beq	r2,zero,810 <__sfvwrite_r+0x458>
     530:	300b883a 	mov	r5,r6
     534:	e009883a 	mov	r4,fp
     538:	00008540 	call	854 <_malloc_r>
     53c:	10003126 	beq	r2,zero,604 <__sfvwrite_r+0x24c>
     540:	91400417 	ldw	r5,16(r18)
     544:	1009883a 	mov	r4,r2
     548:	800d883a 	mov	r6,r16
     54c:	1023883a 	mov	r17,r2
     550:	00010780 	call	1078 <memcpy>
     554:	90c0030b 	ldhu	r3,12(r18)
     558:	00beffc4 	movi	r2,-1025
     55c:	1886703a 	and	r3,r3,r2
     560:	18c02014 	ori	r3,r3,128
     564:	90c0030d 	sth	r3,12(r18)
     568:	9c07c83a 	sub	r3,r19,r16
     56c:	8c05883a 	add	r2,r17,r16
     570:	a00d883a 	mov	r6,r20
     574:	a021883a 	mov	r16,r20
     578:	90800015 	stw	r2,0(r18)
     57c:	90c00215 	stw	r3,8(r18)
     580:	94400415 	stw	r17,16(r18)
     584:	94c00515 	stw	r19,20(r18)
     588:	91000017 	ldw	r4,0(r18)
     58c:	b80b883a 	mov	r5,r23
     590:	a023883a 	mov	r17,r20
     594:	00011180 	call	1118 <memmove>
     598:	90c00217 	ldw	r3,8(r18)
     59c:	90800017 	ldw	r2,0(r18)
     5a0:	a027883a 	mov	r19,r20
     5a4:	1c07c83a 	sub	r3,r3,r16
     5a8:	1405883a 	add	r2,r2,r16
     5ac:	90c00215 	stw	r3,8(r18)
     5b0:	a021883a 	mov	r16,r20
     5b4:	90800015 	stw	r2,0(r18)
     5b8:	b0800217 	ldw	r2,8(r22)
     5bc:	1405c83a 	sub	r2,r2,r16
     5c0:	b0800215 	stw	r2,8(r22)
     5c4:	103fa826 	beq	r2,zero,468 <__sfvwrite_r+0xb0>
     5c8:	a469c83a 	sub	r20,r20,r17
     5cc:	91c0030b 	ldhu	r7,12(r18)
     5d0:	bcef883a 	add	r23,r23,r19
     5d4:	a03fbe1e 	bne	r20,zero,4d0 <__sfvwrite_r+0x118>
     5d8:	adc00017 	ldw	r23,0(r21)
     5dc:	ad000117 	ldw	r20,4(r21)
     5e0:	ad400204 	addi	r21,r21,8
     5e4:	003fb906 	br	4cc <__sfvwrite_r+0x114>
     5e8:	ac400017 	ldw	r17,0(r21)
     5ec:	ac000117 	ldw	r16,4(r21)
     5f0:	ad400204 	addi	r21,r21,8
     5f4:	003f8a06 	br	420 <__sfvwrite_r+0x68>
     5f8:	91400417 	ldw	r5,16(r18)
     5fc:	e009883a 	mov	r4,fp
     600:	0001fb40 	call	1fb4 <_free_r>
     604:	00800304 	movi	r2,12
     608:	e0800015 	stw	r2,0(fp)
     60c:	9080030b 	ldhu	r2,12(r18)
     610:	013fffc4 	movi	r4,-1
     614:	10801014 	ori	r2,r2,64
     618:	9080030d 	sth	r2,12(r18)
     61c:	003f9306 	br	46c <__sfvwrite_r+0xb4>
     620:	0027883a 	mov	r19,zero
     624:	002f883a 	mov	r23,zero
     628:	d8000015 	stw	zero,0(sp)
     62c:	0029883a 	mov	r20,zero
     630:	98001e26 	beq	r19,zero,6ac <__sfvwrite_r+0x2f4>
     634:	d8c00017 	ldw	r3,0(sp)
     638:	1804c03a 	cmpne	r2,r3,zero
     63c:	10005e26 	beq	r2,zero,7b8 <__sfvwrite_r+0x400>
     640:	9821883a 	mov	r16,r19
     644:	a4c0012e 	bgeu	r20,r19,64c <__sfvwrite_r+0x294>
     648:	a021883a 	mov	r16,r20
     64c:	91000017 	ldw	r4,0(r18)
     650:	90800417 	ldw	r2,16(r18)
     654:	91800217 	ldw	r6,8(r18)
     658:	91c00517 	ldw	r7,20(r18)
     65c:	1100022e 	bgeu	r2,r4,668 <__sfvwrite_r+0x2b0>
     660:	31e3883a 	add	r17,r6,r7
     664:	8c001616 	blt	r17,r16,6c0 <__sfvwrite_r+0x308>
     668:	81c03816 	blt	r16,r7,74c <__sfvwrite_r+0x394>
     66c:	90c00917 	ldw	r3,36(r18)
     670:	91400717 	ldw	r5,28(r18)
     674:	e009883a 	mov	r4,fp
     678:	b80d883a 	mov	r6,r23
     67c:	183ee83a 	callr	r3
     680:	1023883a 	mov	r17,r2
     684:	00bfe10e 	bge	zero,r2,60c <__sfvwrite_r+0x254>
     688:	a469c83a 	sub	r20,r20,r17
     68c:	a0001826 	beq	r20,zero,6f0 <__sfvwrite_r+0x338>
     690:	b0800217 	ldw	r2,8(r22)
     694:	1445c83a 	sub	r2,r2,r17
     698:	b0800215 	stw	r2,8(r22)
     69c:	103f7226 	beq	r2,zero,468 <__sfvwrite_r+0xb0>
     6a0:	9c67c83a 	sub	r19,r19,r17
     6a4:	bc6f883a 	add	r23,r23,r17
     6a8:	983fe21e 	bne	r19,zero,634 <__sfvwrite_r+0x27c>
     6ac:	adc00017 	ldw	r23,0(r21)
     6b0:	acc00117 	ldw	r19,4(r21)
     6b4:	ad400204 	addi	r21,r21,8
     6b8:	d8000015 	stw	zero,0(sp)
     6bc:	003fdc06 	br	630 <__sfvwrite_r+0x278>
     6c0:	b80b883a 	mov	r5,r23
     6c4:	880d883a 	mov	r6,r17
     6c8:	00011180 	call	1118 <memmove>
     6cc:	90c00017 	ldw	r3,0(r18)
     6d0:	e009883a 	mov	r4,fp
     6d4:	900b883a 	mov	r5,r18
     6d8:	1c47883a 	add	r3,r3,r17
     6dc:	90c00015 	stw	r3,0(r18)
     6e0:	00019980 	call	1998 <_fflush_r>
     6e4:	103fc91e 	bne	r2,zero,60c <__sfvwrite_r+0x254>
     6e8:	a469c83a 	sub	r20,r20,r17
     6ec:	a03fe81e 	bne	r20,zero,690 <__sfvwrite_r+0x2d8>
     6f0:	e009883a 	mov	r4,fp
     6f4:	900b883a 	mov	r5,r18
     6f8:	00019980 	call	1998 <_fflush_r>
     6fc:	103fc31e 	bne	r2,zero,60c <__sfvwrite_r+0x254>
     700:	d8000015 	stw	zero,0(sp)
     704:	003fe206 	br	690 <__sfvwrite_r+0x2d8>
     708:	91000017 	ldw	r4,0(r18)
     70c:	90800417 	ldw	r2,16(r18)
     710:	1100022e 	bgeu	r2,r4,71c <__sfvwrite_r+0x364>
     714:	8023883a 	mov	r17,r16
     718:	85003136 	bltu	r16,r20,7e0 <__sfvwrite_r+0x428>
     71c:	91c00517 	ldw	r7,20(r18)
     720:	a1c01836 	bltu	r20,r7,784 <__sfvwrite_r+0x3cc>
     724:	90c00917 	ldw	r3,36(r18)
     728:	91400717 	ldw	r5,28(r18)
     72c:	e009883a 	mov	r4,fp
     730:	b80d883a 	mov	r6,r23
     734:	183ee83a 	callr	r3
     738:	1021883a 	mov	r16,r2
     73c:	00bfb30e 	bge	zero,r2,60c <__sfvwrite_r+0x254>
     740:	1023883a 	mov	r17,r2
     744:	1027883a 	mov	r19,r2
     748:	003f9b06 	br	5b8 <__sfvwrite_r+0x200>
     74c:	b80b883a 	mov	r5,r23
     750:	800d883a 	mov	r6,r16
     754:	00011180 	call	1118 <memmove>
     758:	90c00217 	ldw	r3,8(r18)
     75c:	90800017 	ldw	r2,0(r18)
     760:	8023883a 	mov	r17,r16
     764:	1c07c83a 	sub	r3,r3,r16
     768:	1405883a 	add	r2,r2,r16
     76c:	90c00215 	stw	r3,8(r18)
     770:	90800015 	stw	r2,0(r18)
     774:	003fc406 	br	688 <__sfvwrite_r+0x2d0>
     778:	a00d883a 	mov	r6,r20
     77c:	a021883a 	mov	r16,r20
     780:	003f8106 	br	588 <__sfvwrite_r+0x1d0>
     784:	b80b883a 	mov	r5,r23
     788:	a00d883a 	mov	r6,r20
     78c:	00011180 	call	1118 <memmove>
     790:	90c00217 	ldw	r3,8(r18)
     794:	90800017 	ldw	r2,0(r18)
     798:	a021883a 	mov	r16,r20
     79c:	1d07c83a 	sub	r3,r3,r20
     7a0:	1505883a 	add	r2,r2,r20
     7a4:	a023883a 	mov	r17,r20
     7a8:	a027883a 	mov	r19,r20
     7ac:	90c00215 	stw	r3,8(r18)
     7b0:	90800015 	stw	r2,0(r18)
     7b4:	003f8006 	br	5b8 <__sfvwrite_r+0x200>
     7b8:	b809883a 	mov	r4,r23
     7bc:	01400284 	movi	r5,10
     7c0:	980d883a 	mov	r6,r19
     7c4:	0000f940 	call	f94 <memchr>
     7c8:	10001726 	beq	r2,zero,828 <__sfvwrite_r+0x470>
     7cc:	15c5c83a 	sub	r2,r2,r23
     7d0:	15000044 	addi	r20,r2,1
     7d4:	00800044 	movi	r2,1
     7d8:	d8800015 	stw	r2,0(sp)
     7dc:	003f9806 	br	640 <__sfvwrite_r+0x288>
     7e0:	b80b883a 	mov	r5,r23
     7e4:	800d883a 	mov	r6,r16
     7e8:	00011180 	call	1118 <memmove>
     7ec:	90c00017 	ldw	r3,0(r18)
     7f0:	e009883a 	mov	r4,fp
     7f4:	900b883a 	mov	r5,r18
     7f8:	1c07883a 	add	r3,r3,r16
     7fc:	90c00015 	stw	r3,0(r18)
     800:	8027883a 	mov	r19,r16
     804:	00019980 	call	1998 <_fflush_r>
     808:	103f6b26 	beq	r2,zero,5b8 <__sfvwrite_r+0x200>
     80c:	003f7f06 	br	60c <__sfvwrite_r+0x254>
     810:	400b883a 	mov	r5,r8
     814:	e009883a 	mov	r4,fp
     818:	00011f80 	call	11f8 <_realloc_r>
     81c:	103f7626 	beq	r2,zero,5f8 <__sfvwrite_r+0x240>
     820:	1023883a 	mov	r17,r2
     824:	003f5006 	br	568 <__sfvwrite_r+0x1b0>
     828:	00c00044 	movi	r3,1
     82c:	9d000044 	addi	r20,r19,1
     830:	d8c00015 	stw	r3,0(sp)
     834:	003f8206 	br	640 <__sfvwrite_r+0x288>
     838:	9080030b 	ldhu	r2,12(r18)
     83c:	00c00244 	movi	r3,9
     840:	013fffc4 	movi	r4,-1
     844:	10801014 	ori	r2,r2,64
     848:	9080030d 	sth	r2,12(r18)
     84c:	e0c00015 	stw	r3,0(fp)
     850:	003f0606 	br	46c <__sfvwrite_r+0xb4>

00000854 <_malloc_r>:
     854:	defff604 	addi	sp,sp,-40
     858:	28c002c4 	addi	r3,r5,11
     85c:	00800584 	movi	r2,22
     860:	dc800215 	stw	r18,8(sp)
     864:	dfc00915 	stw	ra,36(sp)
     868:	df000815 	stw	fp,32(sp)
     86c:	ddc00715 	stw	r23,28(sp)
     870:	dd800615 	stw	r22,24(sp)
     874:	dd400515 	stw	r21,20(sp)
     878:	dd000415 	stw	r20,16(sp)
     87c:	dcc00315 	stw	r19,12(sp)
     880:	dc400115 	stw	r17,4(sp)
     884:	dc000015 	stw	r16,0(sp)
     888:	2025883a 	mov	r18,r4
     88c:	10c01236 	bltu	r2,r3,8d8 <_malloc_r+0x84>
     890:	04400404 	movi	r17,16
     894:	8940142e 	bgeu	r17,r5,8e8 <_malloc_r+0x94>
     898:	00800304 	movi	r2,12
     89c:	0007883a 	mov	r3,zero
     8a0:	90800015 	stw	r2,0(r18)
     8a4:	1805883a 	mov	r2,r3
     8a8:	dfc00917 	ldw	ra,36(sp)
     8ac:	df000817 	ldw	fp,32(sp)
     8b0:	ddc00717 	ldw	r23,28(sp)
     8b4:	dd800617 	ldw	r22,24(sp)
     8b8:	dd400517 	ldw	r21,20(sp)
     8bc:	dd000417 	ldw	r20,16(sp)
     8c0:	dcc00317 	ldw	r19,12(sp)
     8c4:	dc800217 	ldw	r18,8(sp)
     8c8:	dc400117 	ldw	r17,4(sp)
     8cc:	dc000017 	ldw	r16,0(sp)
     8d0:	dec00a04 	addi	sp,sp,40
     8d4:	f800283a 	ret
     8d8:	00bffe04 	movi	r2,-8
     8dc:	18a2703a 	and	r17,r3,r2
     8e0:	883fed16 	blt	r17,zero,898 <_malloc_r+0x44>
     8e4:	897fec36 	bltu	r17,r5,898 <_malloc_r+0x44>
     8e8:	9009883a 	mov	r4,r18
     8ec:	00032240 	call	3224 <__malloc_lock>
     8f0:	00807dc4 	movi	r2,503
     8f4:	14402b2e 	bgeu	r2,r17,9a4 <_malloc_r+0x150>
     8f8:	8806d27a 	srli	r3,r17,9
     8fc:	18003f1e 	bne	r3,zero,9fc <_malloc_r+0x1a8>
     900:	880cd0fa 	srli	r6,r17,3
     904:	300490fa 	slli	r2,r6,3
     908:	02c00034 	movhi	r11,0
     90c:	5ade9604 	addi	r11,r11,31320
     910:	12cb883a 	add	r5,r2,r11
     914:	2c000317 	ldw	r16,12(r5)
     918:	580f883a 	mov	r7,r11
     91c:	2c00041e 	bne	r5,r16,930 <_malloc_r+0xdc>
     920:	00000a06 	br	94c <_malloc_r+0xf8>
     924:	1800860e 	bge	r3,zero,b40 <_malloc_r+0x2ec>
     928:	84000317 	ldw	r16,12(r16)
     92c:	2c000726 	beq	r5,r16,94c <_malloc_r+0xf8>
     930:	80800117 	ldw	r2,4(r16)
     934:	00ffff04 	movi	r3,-4
     938:	10c8703a 	and	r4,r2,r3
     93c:	2447c83a 	sub	r3,r4,r17
     940:	008003c4 	movi	r2,15
     944:	10fff70e 	bge	r2,r3,924 <_malloc_r+0xd0>
     948:	31bfffc4 	addi	r6,r6,-1
     94c:	32400044 	addi	r9,r6,1
     950:	02800034 	movhi	r10,0
     954:	529e9804 	addi	r10,r10,31328
     958:	54000217 	ldw	r16,8(r10)
     95c:	8280a026 	beq	r16,r10,be0 <_malloc_r+0x38c>
     960:	80800117 	ldw	r2,4(r16)
     964:	00ffff04 	movi	r3,-4
     968:	10ca703a 	and	r5,r2,r3
     96c:	2c4dc83a 	sub	r6,r5,r17
     970:	008003c4 	movi	r2,15
     974:	11808316 	blt	r2,r6,b84 <_malloc_r+0x330>
     978:	52800315 	stw	r10,12(r10)
     97c:	52800215 	stw	r10,8(r10)
     980:	30002916 	blt	r6,zero,a28 <_malloc_r+0x1d4>
     984:	8147883a 	add	r3,r16,r5
     988:	18800117 	ldw	r2,4(r3)
     98c:	9009883a 	mov	r4,r18
     990:	10800054 	ori	r2,r2,1
     994:	18800115 	stw	r2,4(r3)
     998:	00032440 	call	3244 <__malloc_unlock>
     99c:	80c00204 	addi	r3,r16,8
     9a0:	003fc006 	br	8a4 <_malloc_r+0x50>
     9a4:	02c00034 	movhi	r11,0
     9a8:	5ade9604 	addi	r11,r11,31320
     9ac:	8ac5883a 	add	r2,r17,r11
     9b0:	14000317 	ldw	r16,12(r2)
     9b4:	580f883a 	mov	r7,r11
     9b8:	8806d0fa 	srli	r3,r17,3
     9bc:	14006c26 	beq	r2,r16,b70 <_malloc_r+0x31c>
     9c0:	80c00117 	ldw	r3,4(r16)
     9c4:	00bfff04 	movi	r2,-4
     9c8:	81800317 	ldw	r6,12(r16)
     9cc:	1886703a 	and	r3,r3,r2
     9d0:	80c7883a 	add	r3,r16,r3
     9d4:	18800117 	ldw	r2,4(r3)
     9d8:	81400217 	ldw	r5,8(r16)
     9dc:	9009883a 	mov	r4,r18
     9e0:	10800054 	ori	r2,r2,1
     9e4:	18800115 	stw	r2,4(r3)
     9e8:	31400215 	stw	r5,8(r6)
     9ec:	29800315 	stw	r6,12(r5)
     9f0:	00032440 	call	3244 <__malloc_unlock>
     9f4:	80c00204 	addi	r3,r16,8
     9f8:	003faa06 	br	8a4 <_malloc_r+0x50>
     9fc:	00800104 	movi	r2,4
     a00:	10c0052e 	bgeu	r2,r3,a18 <_malloc_r+0x1c4>
     a04:	00800504 	movi	r2,20
     a08:	10c07836 	bltu	r2,r3,bec <_malloc_r+0x398>
     a0c:	198016c4 	addi	r6,r3,91
     a10:	300490fa 	slli	r2,r6,3
     a14:	003fbc06 	br	908 <_malloc_r+0xb4>
     a18:	8804d1ba 	srli	r2,r17,6
     a1c:	11800e04 	addi	r6,r2,56
     a20:	300490fa 	slli	r2,r6,3
     a24:	003fb806 	br	908 <_malloc_r+0xb4>
     a28:	00807fc4 	movi	r2,511
     a2c:	1140bb36 	bltu	r2,r5,d1c <_malloc_r+0x4c8>
     a30:	2806d0fa 	srli	r3,r5,3
     a34:	573ffe04 	addi	fp,r10,-8
     a38:	00800044 	movi	r2,1
     a3c:	180890fa 	slli	r4,r3,3
     a40:	1807d0ba 	srai	r3,r3,2
     a44:	e1c00117 	ldw	r7,4(fp)
     a48:	5909883a 	add	r4,r11,r4
     a4c:	21400217 	ldw	r5,8(r4)
     a50:	10c4983a 	sll	r2,r2,r3
     a54:	81000315 	stw	r4,12(r16)
     a58:	81400215 	stw	r5,8(r16)
     a5c:	388eb03a 	or	r7,r7,r2
     a60:	2c000315 	stw	r16,12(r5)
     a64:	24000215 	stw	r16,8(r4)
     a68:	e1c00115 	stw	r7,4(fp)
     a6c:	4807883a 	mov	r3,r9
     a70:	4800cd16 	blt	r9,zero,da8 <_malloc_r+0x554>
     a74:	1807d0ba 	srai	r3,r3,2
     a78:	00800044 	movi	r2,1
     a7c:	10c8983a 	sll	r4,r2,r3
     a80:	39004436 	bltu	r7,r4,b94 <_malloc_r+0x340>
     a84:	21c4703a 	and	r2,r4,r7
     a88:	10000a1e 	bne	r2,zero,ab4 <_malloc_r+0x260>
     a8c:	2109883a 	add	r4,r4,r4
     a90:	00bfff04 	movi	r2,-4
     a94:	4884703a 	and	r2,r9,r2
     a98:	3906703a 	and	r3,r7,r4
     a9c:	12400104 	addi	r9,r2,4
     aa0:	1800041e 	bne	r3,zero,ab4 <_malloc_r+0x260>
     aa4:	2109883a 	add	r4,r4,r4
     aa8:	3904703a 	and	r2,r7,r4
     aac:	4a400104 	addi	r9,r9,4
     ab0:	103ffc26 	beq	r2,zero,aa4 <_malloc_r+0x250>
     ab4:	480490fa 	slli	r2,r9,3
     ab8:	4819883a 	mov	r12,r9
     abc:	023fff04 	movi	r8,-4
     ac0:	589b883a 	add	r13,r11,r2
     ac4:	6807883a 	mov	r3,r13
     ac8:	014003c4 	movi	r5,15
     acc:	1c000317 	ldw	r16,12(r3)
     ad0:	1c00041e 	bne	r3,r16,ae4 <_malloc_r+0x290>
     ad4:	0000a706 	br	d74 <_malloc_r+0x520>
     ad8:	3000ab0e 	bge	r6,zero,d88 <_malloc_r+0x534>
     adc:	84000317 	ldw	r16,12(r16)
     ae0:	1c00a426 	beq	r3,r16,d74 <_malloc_r+0x520>
     ae4:	80800117 	ldw	r2,4(r16)
     ae8:	1204703a 	and	r2,r2,r8
     aec:	144dc83a 	sub	r6,r2,r17
     af0:	29bff90e 	bge	r5,r6,ad8 <_malloc_r+0x284>
     af4:	81000317 	ldw	r4,12(r16)
     af8:	80c00217 	ldw	r3,8(r16)
     afc:	89400054 	ori	r5,r17,1
     b00:	8445883a 	add	r2,r16,r17
     b04:	20c00215 	stw	r3,8(r4)
     b08:	19000315 	stw	r4,12(r3)
     b0c:	81400115 	stw	r5,4(r16)
     b10:	1187883a 	add	r3,r2,r6
     b14:	31000054 	ori	r4,r6,1
     b18:	50800315 	stw	r2,12(r10)
     b1c:	50800215 	stw	r2,8(r10)
     b20:	19800015 	stw	r6,0(r3)
     b24:	11000115 	stw	r4,4(r2)
     b28:	12800215 	stw	r10,8(r2)
     b2c:	12800315 	stw	r10,12(r2)
     b30:	9009883a 	mov	r4,r18
     b34:	00032440 	call	3244 <__malloc_unlock>
     b38:	80c00204 	addi	r3,r16,8
     b3c:	003f5906 	br	8a4 <_malloc_r+0x50>
     b40:	8109883a 	add	r4,r16,r4
     b44:	20800117 	ldw	r2,4(r4)
     b48:	80c00217 	ldw	r3,8(r16)
     b4c:	81400317 	ldw	r5,12(r16)
     b50:	10800054 	ori	r2,r2,1
     b54:	20800115 	stw	r2,4(r4)
     b58:	28c00215 	stw	r3,8(r5)
     b5c:	19400315 	stw	r5,12(r3)
     b60:	9009883a 	mov	r4,r18
     b64:	00032440 	call	3244 <__malloc_unlock>
     b68:	80c00204 	addi	r3,r16,8
     b6c:	003f4d06 	br	8a4 <_malloc_r+0x50>
     b70:	80800204 	addi	r2,r16,8
     b74:	14000317 	ldw	r16,12(r2)
     b78:	143f911e 	bne	r2,r16,9c0 <_malloc_r+0x16c>
     b7c:	1a400084 	addi	r9,r3,2
     b80:	003f7306 	br	950 <_malloc_r+0xfc>
     b84:	88c00054 	ori	r3,r17,1
     b88:	8445883a 	add	r2,r16,r17
     b8c:	80c00115 	stw	r3,4(r16)
     b90:	003fdf06 	br	b10 <_malloc_r+0x2bc>
     b94:	e4000217 	ldw	r16,8(fp)
     b98:	00bfff04 	movi	r2,-4
     b9c:	80c00117 	ldw	r3,4(r16)
     ba0:	802d883a 	mov	r22,r16
     ba4:	18aa703a 	and	r21,r3,r2
     ba8:	ac401636 	bltu	r21,r17,c04 <_malloc_r+0x3b0>
     bac:	ac49c83a 	sub	r4,r21,r17
     bb0:	008003c4 	movi	r2,15
     bb4:	1100130e 	bge	r2,r4,c04 <_malloc_r+0x3b0>
     bb8:	88800054 	ori	r2,r17,1
     bbc:	8447883a 	add	r3,r16,r17
     bc0:	80800115 	stw	r2,4(r16)
     bc4:	20800054 	ori	r2,r4,1
     bc8:	18800115 	stw	r2,4(r3)
     bcc:	e0c00215 	stw	r3,8(fp)
     bd0:	9009883a 	mov	r4,r18
     bd4:	00032440 	call	3244 <__malloc_unlock>
     bd8:	80c00204 	addi	r3,r16,8
     bdc:	003f3106 	br	8a4 <_malloc_r+0x50>
     be0:	39c00117 	ldw	r7,4(r7)
     be4:	573ffe04 	addi	fp,r10,-8
     be8:	003fa006 	br	a6c <_malloc_r+0x218>
     bec:	00801504 	movi	r2,84
     bf0:	10c06736 	bltu	r2,r3,d90 <_malloc_r+0x53c>
     bf4:	8804d33a 	srli	r2,r17,12
     bf8:	11801b84 	addi	r6,r2,110
     bfc:	300490fa 	slli	r2,r6,3
     c00:	003f4106 	br	908 <_malloc_r+0xb4>
     c04:	d0a78d17 	ldw	r2,-25036(gp)
     c08:	d0e00317 	ldw	r3,-32756(gp)
     c0c:	053fffc4 	movi	r20,-1
     c10:	10800404 	addi	r2,r2,16
     c14:	88a7883a 	add	r19,r17,r2
     c18:	1d000326 	beq	r3,r20,c28 <_malloc_r+0x3d4>
     c1c:	98c3ffc4 	addi	r3,r19,4095
     c20:	00bc0004 	movi	r2,-4096
     c24:	18a6703a 	and	r19,r3,r2
     c28:	9009883a 	mov	r4,r18
     c2c:	980b883a 	mov	r5,r19
     c30:	00017ec0 	call	17ec <_sbrk_r>
     c34:	1009883a 	mov	r4,r2
     c38:	15000426 	beq	r2,r20,c4c <_malloc_r+0x3f8>
     c3c:	854b883a 	add	r5,r16,r21
     c40:	1029883a 	mov	r20,r2
     c44:	11405a2e 	bgeu	r2,r5,db0 <_malloc_r+0x55c>
     c48:	87000c26 	beq	r16,fp,c7c <_malloc_r+0x428>
     c4c:	e4000217 	ldw	r16,8(fp)
     c50:	80c00117 	ldw	r3,4(r16)
     c54:	00bfff04 	movi	r2,-4
     c58:	1884703a 	and	r2,r3,r2
     c5c:	14400336 	bltu	r2,r17,c6c <_malloc_r+0x418>
     c60:	1449c83a 	sub	r4,r2,r17
     c64:	008003c4 	movi	r2,15
     c68:	113fd316 	blt	r2,r4,bb8 <_malloc_r+0x364>
     c6c:	9009883a 	mov	r4,r18
     c70:	00032440 	call	3244 <__malloc_unlock>
     c74:	0007883a 	mov	r3,zero
     c78:	003f0a06 	br	8a4 <_malloc_r+0x50>
     c7c:	05c00074 	movhi	r23,1
     c80:	bdec9e04 	addi	r23,r23,-19848
     c84:	b8800017 	ldw	r2,0(r23)
     c88:	988d883a 	add	r6,r19,r2
     c8c:	b9800015 	stw	r6,0(r23)
     c90:	d0e00317 	ldw	r3,-32756(gp)
     c94:	00bfffc4 	movi	r2,-1
     c98:	18808e26 	beq	r3,r2,ed4 <_malloc_r+0x680>
     c9c:	2145c83a 	sub	r2,r4,r5
     ca0:	3085883a 	add	r2,r6,r2
     ca4:	b8800015 	stw	r2,0(r23)
     ca8:	20c001cc 	andi	r3,r4,7
     cac:	18005f1e 	bne	r3,zero,e2c <_malloc_r+0x5d8>
     cb0:	000b883a 	mov	r5,zero
     cb4:	a4c5883a 	add	r2,r20,r19
     cb8:	1083ffcc 	andi	r2,r2,4095
     cbc:	00c40004 	movi	r3,4096
     cc0:	1887c83a 	sub	r3,r3,r2
     cc4:	28e7883a 	add	r19,r5,r3
     cc8:	9009883a 	mov	r4,r18
     ccc:	980b883a 	mov	r5,r19
     cd0:	00017ec0 	call	17ec <_sbrk_r>
     cd4:	1007883a 	mov	r3,r2
     cd8:	00bfffc4 	movi	r2,-1
     cdc:	18807a26 	beq	r3,r2,ec8 <_malloc_r+0x674>
     ce0:	1d05c83a 	sub	r2,r3,r20
     ce4:	9885883a 	add	r2,r19,r2
     ce8:	10c00054 	ori	r3,r2,1
     cec:	b8800017 	ldw	r2,0(r23)
     cf0:	a021883a 	mov	r16,r20
     cf4:	a0c00115 	stw	r3,4(r20)
     cf8:	9885883a 	add	r2,r19,r2
     cfc:	b8800015 	stw	r2,0(r23)
     d00:	e5000215 	stw	r20,8(fp)
     d04:	b7003626 	beq	r22,fp,de0 <_malloc_r+0x58c>
     d08:	018003c4 	movi	r6,15
     d0c:	35404b36 	bltu	r6,r21,e3c <_malloc_r+0x5e8>
     d10:	00800044 	movi	r2,1
     d14:	a0800115 	stw	r2,4(r20)
     d18:	003fcd06 	br	c50 <_malloc_r+0x3fc>
     d1c:	2808d27a 	srli	r4,r5,9
     d20:	2000371e 	bne	r4,zero,e00 <_malloc_r+0x5ac>
     d24:	2808d0fa 	srli	r4,r5,3
     d28:	200690fa 	slli	r3,r4,3
     d2c:	1ad1883a 	add	r8,r3,r11
     d30:	41800217 	ldw	r6,8(r8)
     d34:	41805b26 	beq	r8,r6,ea4 <_malloc_r+0x650>
     d38:	30800117 	ldw	r2,4(r6)
     d3c:	00ffff04 	movi	r3,-4
     d40:	10c4703a 	and	r2,r2,r3
     d44:	2880022e 	bgeu	r5,r2,d50 <_malloc_r+0x4fc>
     d48:	31800217 	ldw	r6,8(r6)
     d4c:	41bffa1e 	bne	r8,r6,d38 <_malloc_r+0x4e4>
     d50:	32000317 	ldw	r8,12(r6)
     d54:	39c00117 	ldw	r7,4(r7)
     d58:	82000315 	stw	r8,12(r16)
     d5c:	81800215 	stw	r6,8(r16)
     d60:	07000034 	movhi	fp,0
     d64:	e71e9604 	addi	fp,fp,31320
     d68:	34000315 	stw	r16,12(r6)
     d6c:	44000215 	stw	r16,8(r8)
     d70:	003f3e06 	br	a6c <_malloc_r+0x218>
     d74:	63000044 	addi	r12,r12,1
     d78:	608000cc 	andi	r2,r12,3
     d7c:	10005d26 	beq	r2,zero,ef4 <_malloc_r+0x6a0>
     d80:	18c00204 	addi	r3,r3,8
     d84:	003f5106 	br	acc <_malloc_r+0x278>
     d88:	8089883a 	add	r4,r16,r2
     d8c:	003f6d06 	br	b44 <_malloc_r+0x2f0>
     d90:	00805504 	movi	r2,340
     d94:	10c02036 	bltu	r2,r3,e18 <_malloc_r+0x5c4>
     d98:	8804d3fa 	srli	r2,r17,15
     d9c:	11801dc4 	addi	r6,r2,119
     da0:	300490fa 	slli	r2,r6,3
     da4:	003ed806 	br	908 <_malloc_r+0xb4>
     da8:	48c000c4 	addi	r3,r9,3
     dac:	003f3106 	br	a74 <_malloc_r+0x220>
     db0:	05c00074 	movhi	r23,1
     db4:	bdec9e04 	addi	r23,r23,-19848
     db8:	b8800017 	ldw	r2,0(r23)
     dbc:	988d883a 	add	r6,r19,r2
     dc0:	b9800015 	stw	r6,0(r23)
     dc4:	293fb21e 	bne	r5,r4,c90 <_malloc_r+0x43c>
     dc8:	2083ffcc 	andi	r2,r4,4095
     dcc:	103fb01e 	bne	r2,zero,c90 <_malloc_r+0x43c>
     dd0:	e4000217 	ldw	r16,8(fp)
     dd4:	9d45883a 	add	r2,r19,r21
     dd8:	10800054 	ori	r2,r2,1
     ddc:	80800115 	stw	r2,4(r16)
     de0:	b8c00017 	ldw	r3,0(r23)
     de4:	d0a78e17 	ldw	r2,-25032(gp)
     de8:	10c0012e 	bgeu	r2,r3,df0 <_malloc_r+0x59c>
     dec:	d0e78e15 	stw	r3,-25032(gp)
     df0:	d0a78f17 	ldw	r2,-25028(gp)
     df4:	10ff962e 	bgeu	r2,r3,c50 <_malloc_r+0x3fc>
     df8:	d0e78f15 	stw	r3,-25028(gp)
     dfc:	003f9406 	br	c50 <_malloc_r+0x3fc>
     e00:	00800104 	movi	r2,4
     e04:	11001e36 	bltu	r2,r4,e80 <_malloc_r+0x62c>
     e08:	2804d1ba 	srli	r2,r5,6
     e0c:	11000e04 	addi	r4,r2,56
     e10:	200690fa 	slli	r3,r4,3
     e14:	003fc506 	br	d2c <_malloc_r+0x4d8>
     e18:	00815504 	movi	r2,1364
     e1c:	10c01d2e 	bgeu	r2,r3,e94 <_malloc_r+0x640>
     e20:	01801f84 	movi	r6,126
     e24:	0080fc04 	movi	r2,1008
     e28:	003eb706 	br	908 <_malloc_r+0xb4>
     e2c:	00800204 	movi	r2,8
     e30:	10cbc83a 	sub	r5,r2,r3
     e34:	2169883a 	add	r20,r4,r5
     e38:	003f9e06 	br	cb4 <_malloc_r+0x460>
     e3c:	00bffe04 	movi	r2,-8
     e40:	a93ffd04 	addi	r4,r21,-12
     e44:	2088703a 	and	r4,r4,r2
     e48:	b10b883a 	add	r5,r22,r4
     e4c:	00c00144 	movi	r3,5
     e50:	28c00215 	stw	r3,8(r5)
     e54:	28c00115 	stw	r3,4(r5)
     e58:	b0800117 	ldw	r2,4(r22)
     e5c:	1080004c 	andi	r2,r2,1
     e60:	2084b03a 	or	r2,r4,r2
     e64:	b0800115 	stw	r2,4(r22)
     e68:	313fdd2e 	bgeu	r6,r4,de0 <_malloc_r+0x58c>
     e6c:	b1400204 	addi	r5,r22,8
     e70:	9009883a 	mov	r4,r18
     e74:	0001fb40 	call	1fb4 <_free_r>
     e78:	e4000217 	ldw	r16,8(fp)
     e7c:	003fd806 	br	de0 <_malloc_r+0x58c>
     e80:	00800504 	movi	r2,20
     e84:	11001536 	bltu	r2,r4,edc <_malloc_r+0x688>
     e88:	210016c4 	addi	r4,r4,91
     e8c:	200690fa 	slli	r3,r4,3
     e90:	003fa606 	br	d2c <_malloc_r+0x4d8>
     e94:	8804d4ba 	srli	r2,r17,18
     e98:	11801f04 	addi	r6,r2,124
     e9c:	300490fa 	slli	r2,r6,3
     ea0:	003e9906 	br	908 <_malloc_r+0xb4>
     ea4:	2009d0ba 	srai	r4,r4,2
     ea8:	01400034 	movhi	r5,0
     eac:	295e9604 	addi	r5,r5,31320
     eb0:	00c00044 	movi	r3,1
     eb4:	28800117 	ldw	r2,4(r5)
     eb8:	1906983a 	sll	r3,r3,r4
     ebc:	10c4b03a 	or	r2,r2,r3
     ec0:	28800115 	stw	r2,4(r5)
     ec4:	003fa306 	br	d54 <_malloc_r+0x500>
     ec8:	0027883a 	mov	r19,zero
     ecc:	00c00044 	movi	r3,1
     ed0:	003f8606 	br	cec <_malloc_r+0x498>
     ed4:	d1200315 	stw	r4,-32756(gp)
     ed8:	003f7306 	br	ca8 <_malloc_r+0x454>
     edc:	00801504 	movi	r2,84
     ee0:	11001936 	bltu	r2,r4,f48 <_malloc_r+0x6f4>
     ee4:	2804d33a 	srli	r2,r5,12
     ee8:	11001b84 	addi	r4,r2,110
     eec:	200690fa 	slli	r3,r4,3
     ef0:	003f8e06 	br	d2c <_malloc_r+0x4d8>
     ef4:	480b883a 	mov	r5,r9
     ef8:	6807883a 	mov	r3,r13
     efc:	288000cc 	andi	r2,r5,3
     f00:	18fffe04 	addi	r3,r3,-8
     f04:	297fffc4 	addi	r5,r5,-1
     f08:	10001526 	beq	r2,zero,f60 <_malloc_r+0x70c>
     f0c:	18800217 	ldw	r2,8(r3)
     f10:	10fffa26 	beq	r2,r3,efc <_malloc_r+0x6a8>
     f14:	2109883a 	add	r4,r4,r4
     f18:	393f1e36 	bltu	r7,r4,b94 <_malloc_r+0x340>
     f1c:	203f1d26 	beq	r4,zero,b94 <_malloc_r+0x340>
     f20:	21c4703a 	and	r2,r4,r7
     f24:	10000226 	beq	r2,zero,f30 <_malloc_r+0x6dc>
     f28:	6013883a 	mov	r9,r12
     f2c:	003ee106 	br	ab4 <_malloc_r+0x260>
     f30:	2109883a 	add	r4,r4,r4
     f34:	3904703a 	and	r2,r7,r4
     f38:	63000104 	addi	r12,r12,4
     f3c:	103ffc26 	beq	r2,zero,f30 <_malloc_r+0x6dc>
     f40:	6013883a 	mov	r9,r12
     f44:	003edb06 	br	ab4 <_malloc_r+0x260>
     f48:	00805504 	movi	r2,340
     f4c:	11000836 	bltu	r2,r4,f70 <_malloc_r+0x71c>
     f50:	2804d3fa 	srli	r2,r5,15
     f54:	11001dc4 	addi	r4,r2,119
     f58:	200690fa 	slli	r3,r4,3
     f5c:	003f7306 	br	d2c <_malloc_r+0x4d8>
     f60:	0104303a 	nor	r2,zero,r4
     f64:	388e703a 	and	r7,r7,r2
     f68:	e1c00115 	stw	r7,4(fp)
     f6c:	003fe906 	br	f14 <_malloc_r+0x6c0>
     f70:	00815504 	movi	r2,1364
     f74:	1100032e 	bgeu	r2,r4,f84 <_malloc_r+0x730>
     f78:	01001f84 	movi	r4,126
     f7c:	00c0fc04 	movi	r3,1008
     f80:	003f6a06 	br	d2c <_malloc_r+0x4d8>
     f84:	2804d4ba 	srli	r2,r5,18
     f88:	11001f04 	addi	r4,r2,124
     f8c:	200690fa 	slli	r3,r4,3
     f90:	003f6606 	br	d2c <_malloc_r+0x4d8>

00000f94 <memchr>:
     f94:	008000c4 	movi	r2,3
     f98:	29403fcc 	andi	r5,r5,255
     f9c:	2007883a 	mov	r3,r4
     fa0:	1180022e 	bgeu	r2,r6,fac <memchr+0x18>
     fa4:	2084703a 	and	r2,r4,r2
     fa8:	10000b26 	beq	r2,zero,fd8 <memchr+0x44>
     fac:	313fffc4 	addi	r4,r6,-1
     fb0:	3000051e 	bne	r6,zero,fc8 <memchr+0x34>
     fb4:	00002c06 	br	1068 <memchr+0xd4>
     fb8:	213fffc4 	addi	r4,r4,-1
     fbc:	00bfffc4 	movi	r2,-1
     fc0:	18c00044 	addi	r3,r3,1
     fc4:	20802826 	beq	r4,r2,1068 <memchr+0xd4>
     fc8:	18800003 	ldbu	r2,0(r3)
     fcc:	28bffa1e 	bne	r5,r2,fb8 <memchr+0x24>
     fd0:	1805883a 	mov	r2,r3
     fd4:	f800283a 	ret
     fd8:	0011883a 	mov	r8,zero
     fdc:	0007883a 	mov	r3,zero
     fe0:	01c00104 	movi	r7,4
     fe4:	4004923a 	slli	r2,r8,8
     fe8:	18c00044 	addi	r3,r3,1
     fec:	1151883a 	add	r8,r2,r5
     ff0:	19fffc1e 	bne	r3,r7,fe4 <memchr+0x50>
     ff4:	02bfbff4 	movhi	r10,65279
     ff8:	52bfbfc4 	addi	r10,r10,-257
     ffc:	02602074 	movhi	r9,32897
    1000:	4a602004 	addi	r9,r9,-32640
    1004:	02c000c4 	movi	r11,3
    1008:	20800017 	ldw	r2,0(r4)
    100c:	31bfff04 	addi	r6,r6,-4
    1010:	200f883a 	mov	r7,r4
    1014:	1204f03a 	xor	r2,r2,r8
    1018:	1287883a 	add	r3,r2,r10
    101c:	1a46703a 	and	r3,r3,r9
    1020:	0084303a 	nor	r2,zero,r2
    1024:	10c4703a 	and	r2,r2,r3
    1028:	10000b26 	beq	r2,zero,1058 <memchr+0xc4>
    102c:	20800003 	ldbu	r2,0(r4)
    1030:	28800f26 	beq	r5,r2,1070 <memchr+0xdc>
    1034:	20800043 	ldbu	r2,1(r4)
    1038:	21c00044 	addi	r7,r4,1
    103c:	28800c26 	beq	r5,r2,1070 <memchr+0xdc>
    1040:	20800083 	ldbu	r2,2(r4)
    1044:	21c00084 	addi	r7,r4,2
    1048:	28800926 	beq	r5,r2,1070 <memchr+0xdc>
    104c:	208000c3 	ldbu	r2,3(r4)
    1050:	21c000c4 	addi	r7,r4,3
    1054:	28800626 	beq	r5,r2,1070 <memchr+0xdc>
    1058:	21000104 	addi	r4,r4,4
    105c:	59bfea36 	bltu	r11,r6,1008 <memchr+0x74>
    1060:	2007883a 	mov	r3,r4
    1064:	003fd106 	br	fac <memchr+0x18>
    1068:	0005883a 	mov	r2,zero
    106c:	f800283a 	ret
    1070:	3805883a 	mov	r2,r7
    1074:	f800283a 	ret

00001078 <memcpy>:
    1078:	01c003c4 	movi	r7,15
    107c:	2007883a 	mov	r3,r4
    1080:	3980032e 	bgeu	r7,r6,1090 <memcpy+0x18>
    1084:	2904b03a 	or	r2,r5,r4
    1088:	108000cc 	andi	r2,r2,3
    108c:	10000926 	beq	r2,zero,10b4 <memcpy+0x3c>
    1090:	30000626 	beq	r6,zero,10ac <memcpy+0x34>
    1094:	30cd883a 	add	r6,r6,r3
    1098:	28800003 	ldbu	r2,0(r5)
    109c:	29400044 	addi	r5,r5,1
    10a0:	18800005 	stb	r2,0(r3)
    10a4:	18c00044 	addi	r3,r3,1
    10a8:	30fffb1e 	bne	r6,r3,1098 <memcpy+0x20>
    10ac:	2005883a 	mov	r2,r4
    10b0:	f800283a 	ret
    10b4:	3811883a 	mov	r8,r7
    10b8:	200f883a 	mov	r7,r4
    10bc:	28c00017 	ldw	r3,0(r5)
    10c0:	31bffc04 	addi	r6,r6,-16
    10c4:	38c00015 	stw	r3,0(r7)
    10c8:	28800117 	ldw	r2,4(r5)
    10cc:	38800115 	stw	r2,4(r7)
    10d0:	28c00217 	ldw	r3,8(r5)
    10d4:	38c00215 	stw	r3,8(r7)
    10d8:	28800317 	ldw	r2,12(r5)
    10dc:	29400404 	addi	r5,r5,16
    10e0:	38800315 	stw	r2,12(r7)
    10e4:	39c00404 	addi	r7,r7,16
    10e8:	41bff436 	bltu	r8,r6,10bc <memcpy+0x44>
    10ec:	008000c4 	movi	r2,3
    10f0:	1180072e 	bgeu	r2,r6,1110 <memcpy+0x98>
    10f4:	1007883a 	mov	r3,r2
    10f8:	28800017 	ldw	r2,0(r5)
    10fc:	31bfff04 	addi	r6,r6,-4
    1100:	29400104 	addi	r5,r5,4
    1104:	38800015 	stw	r2,0(r7)
    1108:	39c00104 	addi	r7,r7,4
    110c:	19bffa36 	bltu	r3,r6,10f8 <memcpy+0x80>
    1110:	3807883a 	mov	r3,r7
    1114:	003fde06 	br	1090 <memcpy+0x18>

00001118 <memmove>:
    1118:	2807883a 	mov	r3,r5
    111c:	2011883a 	mov	r8,r4
    1120:	29000c2e 	bgeu	r5,r4,1154 <memmove+0x3c>
    1124:	298f883a 	add	r7,r5,r6
    1128:	21c00a2e 	bgeu	r4,r7,1154 <memmove+0x3c>
    112c:	30000726 	beq	r6,zero,114c <memmove+0x34>
    1130:	2187883a 	add	r3,r4,r6
    1134:	198dc83a 	sub	r6,r3,r6
    1138:	39ffffc4 	addi	r7,r7,-1
    113c:	38800003 	ldbu	r2,0(r7)
    1140:	18ffffc4 	addi	r3,r3,-1
    1144:	18800005 	stb	r2,0(r3)
    1148:	19bffb1e 	bne	r3,r6,1138 <memmove+0x20>
    114c:	2005883a 	mov	r2,r4
    1150:	f800283a 	ret
    1154:	01c003c4 	movi	r7,15
    1158:	39800a36 	bltu	r7,r6,1184 <memmove+0x6c>
    115c:	303ffb26 	beq	r6,zero,114c <memmove+0x34>
    1160:	400f883a 	mov	r7,r8
    1164:	320d883a 	add	r6,r6,r8
    1168:	28800003 	ldbu	r2,0(r5)
    116c:	29400044 	addi	r5,r5,1
    1170:	38800005 	stb	r2,0(r7)
    1174:	39c00044 	addi	r7,r7,1
    1178:	39bffb1e 	bne	r7,r6,1168 <memmove+0x50>
    117c:	2005883a 	mov	r2,r4
    1180:	f800283a 	ret
    1184:	1904b03a 	or	r2,r3,r4
    1188:	108000cc 	andi	r2,r2,3
    118c:	103ff31e 	bne	r2,zero,115c <memmove+0x44>
    1190:	3811883a 	mov	r8,r7
    1194:	180b883a 	mov	r5,r3
    1198:	200f883a 	mov	r7,r4
    119c:	28c00017 	ldw	r3,0(r5)
    11a0:	31bffc04 	addi	r6,r6,-16
    11a4:	38c00015 	stw	r3,0(r7)
    11a8:	28800117 	ldw	r2,4(r5)
    11ac:	38800115 	stw	r2,4(r7)
    11b0:	28c00217 	ldw	r3,8(r5)
    11b4:	38c00215 	stw	r3,8(r7)
    11b8:	28800317 	ldw	r2,12(r5)
    11bc:	29400404 	addi	r5,r5,16
    11c0:	38800315 	stw	r2,12(r7)
    11c4:	39c00404 	addi	r7,r7,16
    11c8:	41bff436 	bltu	r8,r6,119c <memmove+0x84>
    11cc:	008000c4 	movi	r2,3
    11d0:	1180072e 	bgeu	r2,r6,11f0 <memmove+0xd8>
    11d4:	1007883a 	mov	r3,r2
    11d8:	28800017 	ldw	r2,0(r5)
    11dc:	31bfff04 	addi	r6,r6,-4
    11e0:	29400104 	addi	r5,r5,4
    11e4:	38800015 	stw	r2,0(r7)
    11e8:	39c00104 	addi	r7,r7,4
    11ec:	19bffa36 	bltu	r3,r6,11d8 <memmove+0xc0>
    11f0:	3811883a 	mov	r8,r7
    11f4:	003fd906 	br	115c <memmove+0x44>

000011f8 <_realloc_r>:
    11f8:	defff404 	addi	sp,sp,-48
    11fc:	dd800815 	stw	r22,32(sp)
    1200:	dc800415 	stw	r18,16(sp)
    1204:	dc400315 	stw	r17,12(sp)
    1208:	dfc00b15 	stw	ra,44(sp)
    120c:	df000a15 	stw	fp,40(sp)
    1210:	ddc00915 	stw	r23,36(sp)
    1214:	dd400715 	stw	r21,28(sp)
    1218:	dd000615 	stw	r20,24(sp)
    121c:	dcc00515 	stw	r19,20(sp)
    1220:	dc000215 	stw	r16,8(sp)
    1224:	2825883a 	mov	r18,r5
    1228:	3023883a 	mov	r17,r6
    122c:	202d883a 	mov	r22,r4
    1230:	2800c926 	beq	r5,zero,1558 <_realloc_r+0x360>
    1234:	00032240 	call	3224 <__malloc_lock>
    1238:	943ffe04 	addi	r16,r18,-8
    123c:	88c002c4 	addi	r3,r17,11
    1240:	00800584 	movi	r2,22
    1244:	82000117 	ldw	r8,4(r16)
    1248:	10c01b2e 	bgeu	r2,r3,12b8 <_realloc_r+0xc0>
    124c:	00bffe04 	movi	r2,-8
    1250:	188e703a 	and	r7,r3,r2
    1254:	3839883a 	mov	fp,r7
    1258:	38001a16 	blt	r7,zero,12c4 <_realloc_r+0xcc>
    125c:	e4401936 	bltu	fp,r17,12c4 <_realloc_r+0xcc>
    1260:	013fff04 	movi	r4,-4
    1264:	4126703a 	and	r19,r8,r4
    1268:	99c02616 	blt	r19,r7,1304 <_realloc_r+0x10c>
    126c:	802b883a 	mov	r21,r16
    1270:	9829883a 	mov	r20,r19
    1274:	84000204 	addi	r16,r16,8
    1278:	a80f883a 	mov	r7,r21
    127c:	a70dc83a 	sub	r6,r20,fp
    1280:	008003c4 	movi	r2,15
    1284:	1180c136 	bltu	r2,r6,158c <_realloc_r+0x394>
    1288:	38800117 	ldw	r2,4(r7)
    128c:	a549883a 	add	r4,r20,r21
    1290:	1080004c 	andi	r2,r2,1
    1294:	a084b03a 	or	r2,r20,r2
    1298:	38800115 	stw	r2,4(r7)
    129c:	20c00117 	ldw	r3,4(r4)
    12a0:	18c00054 	ori	r3,r3,1
    12a4:	20c00115 	stw	r3,4(r4)
    12a8:	b009883a 	mov	r4,r22
    12ac:	00032440 	call	3244 <__malloc_unlock>
    12b0:	8023883a 	mov	r17,r16
    12b4:	00000606 	br	12d0 <_realloc_r+0xd8>
    12b8:	01c00404 	movi	r7,16
    12bc:	3839883a 	mov	fp,r7
    12c0:	e47fe72e 	bgeu	fp,r17,1260 <_realloc_r+0x68>
    12c4:	00800304 	movi	r2,12
    12c8:	0023883a 	mov	r17,zero
    12cc:	b0800015 	stw	r2,0(r22)
    12d0:	8805883a 	mov	r2,r17
    12d4:	dfc00b17 	ldw	ra,44(sp)
    12d8:	df000a17 	ldw	fp,40(sp)
    12dc:	ddc00917 	ldw	r23,36(sp)
    12e0:	dd800817 	ldw	r22,32(sp)
    12e4:	dd400717 	ldw	r21,28(sp)
    12e8:	dd000617 	ldw	r20,24(sp)
    12ec:	dcc00517 	ldw	r19,20(sp)
    12f0:	dc800417 	ldw	r18,16(sp)
    12f4:	dc400317 	ldw	r17,12(sp)
    12f8:	dc000217 	ldw	r16,8(sp)
    12fc:	dec00c04 	addi	sp,sp,48
    1300:	f800283a 	ret
    1304:	00800034 	movhi	r2,0
    1308:	109e9604 	addi	r2,r2,31320
    130c:	12400217 	ldw	r9,8(r2)
    1310:	84cd883a 	add	r6,r16,r19
    1314:	802b883a 	mov	r21,r16
    1318:	3240b926 	beq	r6,r9,1600 <_realloc_r+0x408>
    131c:	31400117 	ldw	r5,4(r6)
    1320:	00bfff84 	movi	r2,-2
    1324:	2884703a 	and	r2,r5,r2
    1328:	1185883a 	add	r2,r2,r6
    132c:	10c00117 	ldw	r3,4(r2)
    1330:	18c0004c 	andi	r3,r3,1
    1334:	1807003a 	cmpeq	r3,r3,zero
    1338:	1800a326 	beq	r3,zero,15c8 <_realloc_r+0x3d0>
    133c:	2908703a 	and	r4,r5,r4
    1340:	9929883a 	add	r20,r19,r4
    1344:	a1c0a30e 	bge	r20,r7,15d4 <_realloc_r+0x3dc>
    1348:	4080004c 	andi	r2,r8,1
    134c:	1000551e 	bne	r2,zero,14a4 <_realloc_r+0x2ac>
    1350:	80800017 	ldw	r2,0(r16)
    1354:	80afc83a 	sub	r23,r16,r2
    1358:	b8c00117 	ldw	r3,4(r23)
    135c:	00bfff04 	movi	r2,-4
    1360:	1884703a 	and	r2,r3,r2
    1364:	30002e26 	beq	r6,zero,1420 <_realloc_r+0x228>
    1368:	3240b926 	beq	r6,r9,1650 <_realloc_r+0x458>
    136c:	98a9883a 	add	r20,r19,r2
    1370:	2509883a 	add	r4,r4,r20
    1374:	d9000015 	stw	r4,0(sp)
    1378:	21c02a16 	blt	r4,r7,1424 <_realloc_r+0x22c>
    137c:	30800317 	ldw	r2,12(r6)
    1380:	30c00217 	ldw	r3,8(r6)
    1384:	01400904 	movi	r5,36
    1388:	99bfff04 	addi	r6,r19,-4
    138c:	18800315 	stw	r2,12(r3)
    1390:	10c00215 	stw	r3,8(r2)
    1394:	b9000317 	ldw	r4,12(r23)
    1398:	b8800217 	ldw	r2,8(r23)
    139c:	b82b883a 	mov	r21,r23
    13a0:	bc000204 	addi	r16,r23,8
    13a4:	20800215 	stw	r2,8(r4)
    13a8:	11000315 	stw	r4,12(r2)
    13ac:	2980e436 	bltu	r5,r6,1740 <_realloc_r+0x548>
    13b0:	008004c4 	movi	r2,19
    13b4:	9009883a 	mov	r4,r18
    13b8:	8011883a 	mov	r8,r16
    13bc:	11800f2e 	bgeu	r2,r6,13fc <_realloc_r+0x204>
    13c0:	90800017 	ldw	r2,0(r18)
    13c4:	ba000404 	addi	r8,r23,16
    13c8:	91000204 	addi	r4,r18,8
    13cc:	b8800215 	stw	r2,8(r23)
    13d0:	90c00117 	ldw	r3,4(r18)
    13d4:	008006c4 	movi	r2,27
    13d8:	b8c00315 	stw	r3,12(r23)
    13dc:	1180072e 	bgeu	r2,r6,13fc <_realloc_r+0x204>
    13e0:	90c00217 	ldw	r3,8(r18)
    13e4:	ba000604 	addi	r8,r23,24
    13e8:	91000404 	addi	r4,r18,16
    13ec:	b8c00415 	stw	r3,16(r23)
    13f0:	90800317 	ldw	r2,12(r18)
    13f4:	b8800515 	stw	r2,20(r23)
    13f8:	3140e726 	beq	r6,r5,1798 <_realloc_r+0x5a0>
    13fc:	20800017 	ldw	r2,0(r4)
    1400:	dd000017 	ldw	r20,0(sp)
    1404:	b80f883a 	mov	r7,r23
    1408:	40800015 	stw	r2,0(r8)
    140c:	20c00117 	ldw	r3,4(r4)
    1410:	40c00115 	stw	r3,4(r8)
    1414:	20800217 	ldw	r2,8(r4)
    1418:	40800215 	stw	r2,8(r8)
    141c:	003f9706 	br	127c <_realloc_r+0x84>
    1420:	98a9883a 	add	r20,r19,r2
    1424:	a1c01f16 	blt	r20,r7,14a4 <_realloc_r+0x2ac>
    1428:	b8c00317 	ldw	r3,12(r23)
    142c:	b8800217 	ldw	r2,8(r23)
    1430:	99bfff04 	addi	r6,r19,-4
    1434:	01400904 	movi	r5,36
    1438:	b82b883a 	mov	r21,r23
    143c:	18800215 	stw	r2,8(r3)
    1440:	10c00315 	stw	r3,12(r2)
    1444:	bc000204 	addi	r16,r23,8
    1448:	2980c336 	bltu	r5,r6,1758 <_realloc_r+0x560>
    144c:	008004c4 	movi	r2,19
    1450:	9009883a 	mov	r4,r18
    1454:	8011883a 	mov	r8,r16
    1458:	11800f2e 	bgeu	r2,r6,1498 <_realloc_r+0x2a0>
    145c:	90800017 	ldw	r2,0(r18)
    1460:	ba000404 	addi	r8,r23,16
    1464:	91000204 	addi	r4,r18,8
    1468:	b8800215 	stw	r2,8(r23)
    146c:	90c00117 	ldw	r3,4(r18)
    1470:	008006c4 	movi	r2,27
    1474:	b8c00315 	stw	r3,12(r23)
    1478:	1180072e 	bgeu	r2,r6,1498 <_realloc_r+0x2a0>
    147c:	90c00217 	ldw	r3,8(r18)
    1480:	ba000604 	addi	r8,r23,24
    1484:	91000404 	addi	r4,r18,16
    1488:	b8c00415 	stw	r3,16(r23)
    148c:	90800317 	ldw	r2,12(r18)
    1490:	b8800515 	stw	r2,20(r23)
    1494:	3140c726 	beq	r6,r5,17b4 <_realloc_r+0x5bc>
    1498:	20800017 	ldw	r2,0(r4)
    149c:	b80f883a 	mov	r7,r23
    14a0:	003fd906 	br	1408 <_realloc_r+0x210>
    14a4:	880b883a 	mov	r5,r17
    14a8:	b009883a 	mov	r4,r22
    14ac:	00008540 	call	854 <_malloc_r>
    14b0:	1023883a 	mov	r17,r2
    14b4:	10002526 	beq	r2,zero,154c <_realloc_r+0x354>
    14b8:	80800117 	ldw	r2,4(r16)
    14bc:	00ffff84 	movi	r3,-2
    14c0:	893ffe04 	addi	r4,r17,-8
    14c4:	10c4703a 	and	r2,r2,r3
    14c8:	8085883a 	add	r2,r16,r2
    14cc:	20809526 	beq	r4,r2,1724 <_realloc_r+0x52c>
    14d0:	99bfff04 	addi	r6,r19,-4
    14d4:	01c00904 	movi	r7,36
    14d8:	39804536 	bltu	r7,r6,15f0 <_realloc_r+0x3f8>
    14dc:	008004c4 	movi	r2,19
    14e0:	9009883a 	mov	r4,r18
    14e4:	880b883a 	mov	r5,r17
    14e8:	11800f2e 	bgeu	r2,r6,1528 <_realloc_r+0x330>
    14ec:	90800017 	ldw	r2,0(r18)
    14f0:	89400204 	addi	r5,r17,8
    14f4:	91000204 	addi	r4,r18,8
    14f8:	88800015 	stw	r2,0(r17)
    14fc:	90c00117 	ldw	r3,4(r18)
    1500:	008006c4 	movi	r2,27
    1504:	88c00115 	stw	r3,4(r17)
    1508:	1180072e 	bgeu	r2,r6,1528 <_realloc_r+0x330>
    150c:	90c00217 	ldw	r3,8(r18)
    1510:	89400404 	addi	r5,r17,16
    1514:	91000404 	addi	r4,r18,16
    1518:	88c00215 	stw	r3,8(r17)
    151c:	90800317 	ldw	r2,12(r18)
    1520:	88800315 	stw	r2,12(r17)
    1524:	31c09126 	beq	r6,r7,176c <_realloc_r+0x574>
    1528:	20800017 	ldw	r2,0(r4)
    152c:	28800015 	stw	r2,0(r5)
    1530:	20c00117 	ldw	r3,4(r4)
    1534:	28c00115 	stw	r3,4(r5)
    1538:	20800217 	ldw	r2,8(r4)
    153c:	28800215 	stw	r2,8(r5)
    1540:	900b883a 	mov	r5,r18
    1544:	b009883a 	mov	r4,r22
    1548:	0001fb40 	call	1fb4 <_free_r>
    154c:	b009883a 	mov	r4,r22
    1550:	00032440 	call	3244 <__malloc_unlock>
    1554:	003f5e06 	br	12d0 <_realloc_r+0xd8>
    1558:	300b883a 	mov	r5,r6
    155c:	dfc00b17 	ldw	ra,44(sp)
    1560:	df000a17 	ldw	fp,40(sp)
    1564:	ddc00917 	ldw	r23,36(sp)
    1568:	dd800817 	ldw	r22,32(sp)
    156c:	dd400717 	ldw	r21,28(sp)
    1570:	dd000617 	ldw	r20,24(sp)
    1574:	dcc00517 	ldw	r19,20(sp)
    1578:	dc800417 	ldw	r18,16(sp)
    157c:	dc400317 	ldw	r17,12(sp)
    1580:	dc000217 	ldw	r16,8(sp)
    1584:	dec00c04 	addi	sp,sp,48
    1588:	00008541 	jmpi	854 <_malloc_r>
    158c:	38800117 	ldw	r2,4(r7)
    1590:	e54b883a 	add	r5,fp,r21
    1594:	31000054 	ori	r4,r6,1
    1598:	1080004c 	andi	r2,r2,1
    159c:	1704b03a 	or	r2,r2,fp
    15a0:	38800115 	stw	r2,4(r7)
    15a4:	29000115 	stw	r4,4(r5)
    15a8:	2987883a 	add	r3,r5,r6
    15ac:	18800117 	ldw	r2,4(r3)
    15b0:	29400204 	addi	r5,r5,8
    15b4:	b009883a 	mov	r4,r22
    15b8:	10800054 	ori	r2,r2,1
    15bc:	18800115 	stw	r2,4(r3)
    15c0:	0001fb40 	call	1fb4 <_free_r>
    15c4:	003f3806 	br	12a8 <_realloc_r+0xb0>
    15c8:	000d883a 	mov	r6,zero
    15cc:	0009883a 	mov	r4,zero
    15d0:	003f5d06 	br	1348 <_realloc_r+0x150>
    15d4:	30c00217 	ldw	r3,8(r6)
    15d8:	30800317 	ldw	r2,12(r6)
    15dc:	800f883a 	mov	r7,r16
    15e0:	84000204 	addi	r16,r16,8
    15e4:	10c00215 	stw	r3,8(r2)
    15e8:	18800315 	stw	r2,12(r3)
    15ec:	003f2306 	br	127c <_realloc_r+0x84>
    15f0:	8809883a 	mov	r4,r17
    15f4:	900b883a 	mov	r5,r18
    15f8:	00011180 	call	1118 <memmove>
    15fc:	003fd006 	br	1540 <_realloc_r+0x348>
    1600:	30800117 	ldw	r2,4(r6)
    1604:	e0c00404 	addi	r3,fp,16
    1608:	1108703a 	and	r4,r2,r4
    160c:	9905883a 	add	r2,r19,r4
    1610:	10ff4d16 	blt	r2,r3,1348 <_realloc_r+0x150>
    1614:	1705c83a 	sub	r2,r2,fp
    1618:	870b883a 	add	r5,r16,fp
    161c:	10800054 	ori	r2,r2,1
    1620:	28800115 	stw	r2,4(r5)
    1624:	80c00117 	ldw	r3,4(r16)
    1628:	00800034 	movhi	r2,0
    162c:	109e9604 	addi	r2,r2,31320
    1630:	b009883a 	mov	r4,r22
    1634:	18c0004c 	andi	r3,r3,1
    1638:	e0c6b03a 	or	r3,fp,r3
    163c:	11400215 	stw	r5,8(r2)
    1640:	80c00115 	stw	r3,4(r16)
    1644:	00032440 	call	3244 <__malloc_unlock>
    1648:	84400204 	addi	r17,r16,8
    164c:	003f2006 	br	12d0 <_realloc_r+0xd8>
    1650:	98a9883a 	add	r20,r19,r2
    1654:	2509883a 	add	r4,r4,r20
    1658:	e0800404 	addi	r2,fp,16
    165c:	d9000115 	stw	r4,4(sp)
    1660:	20bf7016 	blt	r4,r2,1424 <_realloc_r+0x22c>
    1664:	b8c00317 	ldw	r3,12(r23)
    1668:	b8800217 	ldw	r2,8(r23)
    166c:	99bfff04 	addi	r6,r19,-4
    1670:	01400904 	movi	r5,36
    1674:	18800215 	stw	r2,8(r3)
    1678:	10c00315 	stw	r3,12(r2)
    167c:	bc400204 	addi	r17,r23,8
    1680:	29804136 	bltu	r5,r6,1788 <_realloc_r+0x590>
    1684:	008004c4 	movi	r2,19
    1688:	9009883a 	mov	r4,r18
    168c:	880f883a 	mov	r7,r17
    1690:	11800f2e 	bgeu	r2,r6,16d0 <_realloc_r+0x4d8>
    1694:	90800017 	ldw	r2,0(r18)
    1698:	b9c00404 	addi	r7,r23,16
    169c:	91000204 	addi	r4,r18,8
    16a0:	b8800215 	stw	r2,8(r23)
    16a4:	90c00117 	ldw	r3,4(r18)
    16a8:	008006c4 	movi	r2,27
    16ac:	b8c00315 	stw	r3,12(r23)
    16b0:	1180072e 	bgeu	r2,r6,16d0 <_realloc_r+0x4d8>
    16b4:	90c00217 	ldw	r3,8(r18)
    16b8:	b9c00604 	addi	r7,r23,24
    16bc:	91000404 	addi	r4,r18,16
    16c0:	b8c00415 	stw	r3,16(r23)
    16c4:	90800317 	ldw	r2,12(r18)
    16c8:	b8800515 	stw	r2,20(r23)
    16cc:	31404026 	beq	r6,r5,17d0 <_realloc_r+0x5d8>
    16d0:	20800017 	ldw	r2,0(r4)
    16d4:	38800015 	stw	r2,0(r7)
    16d8:	20c00117 	ldw	r3,4(r4)
    16dc:	38c00115 	stw	r3,4(r7)
    16e0:	20800217 	ldw	r2,8(r4)
    16e4:	38800215 	stw	r2,8(r7)
    16e8:	d8c00117 	ldw	r3,4(sp)
    16ec:	bf0b883a 	add	r5,r23,fp
    16f0:	b009883a 	mov	r4,r22
    16f4:	1f05c83a 	sub	r2,r3,fp
    16f8:	10800054 	ori	r2,r2,1
    16fc:	28800115 	stw	r2,4(r5)
    1700:	b8c00117 	ldw	r3,4(r23)
    1704:	00800034 	movhi	r2,0
    1708:	109e9604 	addi	r2,r2,31320
    170c:	11400215 	stw	r5,8(r2)
    1710:	18c0004c 	andi	r3,r3,1
    1714:	e0c6b03a 	or	r3,fp,r3
    1718:	b8c00115 	stw	r3,4(r23)
    171c:	00032440 	call	3244 <__malloc_unlock>
    1720:	003eeb06 	br	12d0 <_realloc_r+0xd8>
    1724:	20800117 	ldw	r2,4(r4)
    1728:	00ffff04 	movi	r3,-4
    172c:	800f883a 	mov	r7,r16
    1730:	10c4703a 	and	r2,r2,r3
    1734:	98a9883a 	add	r20,r19,r2
    1738:	84000204 	addi	r16,r16,8
    173c:	003ecf06 	br	127c <_realloc_r+0x84>
    1740:	900b883a 	mov	r5,r18
    1744:	8009883a 	mov	r4,r16
    1748:	00011180 	call	1118 <memmove>
    174c:	dd000017 	ldw	r20,0(sp)
    1750:	b80f883a 	mov	r7,r23
    1754:	003ec906 	br	127c <_realloc_r+0x84>
    1758:	900b883a 	mov	r5,r18
    175c:	8009883a 	mov	r4,r16
    1760:	00011180 	call	1118 <memmove>
    1764:	b80f883a 	mov	r7,r23
    1768:	003ec406 	br	127c <_realloc_r+0x84>
    176c:	90c00417 	ldw	r3,16(r18)
    1770:	89400604 	addi	r5,r17,24
    1774:	91000604 	addi	r4,r18,24
    1778:	88c00415 	stw	r3,16(r17)
    177c:	90800517 	ldw	r2,20(r18)
    1780:	88800515 	stw	r2,20(r17)
    1784:	003f6806 	br	1528 <_realloc_r+0x330>
    1788:	900b883a 	mov	r5,r18
    178c:	8809883a 	mov	r4,r17
    1790:	00011180 	call	1118 <memmove>
    1794:	003fd406 	br	16e8 <_realloc_r+0x4f0>
    1798:	90c00417 	ldw	r3,16(r18)
    179c:	91000604 	addi	r4,r18,24
    17a0:	ba000804 	addi	r8,r23,32
    17a4:	b8c00615 	stw	r3,24(r23)
    17a8:	90800517 	ldw	r2,20(r18)
    17ac:	b8800715 	stw	r2,28(r23)
    17b0:	003f1206 	br	13fc <_realloc_r+0x204>
    17b4:	90c00417 	ldw	r3,16(r18)
    17b8:	91000604 	addi	r4,r18,24
    17bc:	ba000804 	addi	r8,r23,32
    17c0:	b8c00615 	stw	r3,24(r23)
    17c4:	90800517 	ldw	r2,20(r18)
    17c8:	b8800715 	stw	r2,28(r23)
    17cc:	003f3206 	br	1498 <_realloc_r+0x2a0>
    17d0:	90c00417 	ldw	r3,16(r18)
    17d4:	91000604 	addi	r4,r18,24
    17d8:	b9c00804 	addi	r7,r23,32
    17dc:	b8c00615 	stw	r3,24(r23)
    17e0:	90800517 	ldw	r2,20(r18)
    17e4:	b8800715 	stw	r2,28(r23)
    17e8:	003fb906 	br	16d0 <_realloc_r+0x4d8>

000017ec <_sbrk_r>:
    17ec:	defffd04 	addi	sp,sp,-12
    17f0:	dc000015 	stw	r16,0(sp)
    17f4:	04000074 	movhi	r16,1
    17f8:	842c9704 	addi	r16,r16,-19876
    17fc:	dc400115 	stw	r17,4(sp)
    1800:	80000015 	stw	zero,0(r16)
    1804:	2023883a 	mov	r17,r4
    1808:	2809883a 	mov	r4,r5
    180c:	dfc00215 	stw	ra,8(sp)
    1810:	00034440 	call	3444 <sbrk>
    1814:	1007883a 	mov	r3,r2
    1818:	00bfffc4 	movi	r2,-1
    181c:	18800626 	beq	r3,r2,1838 <_sbrk_r+0x4c>
    1820:	1805883a 	mov	r2,r3
    1824:	dfc00217 	ldw	ra,8(sp)
    1828:	dc400117 	ldw	r17,4(sp)
    182c:	dc000017 	ldw	r16,0(sp)
    1830:	dec00304 	addi	sp,sp,12
    1834:	f800283a 	ret
    1838:	80800017 	ldw	r2,0(r16)
    183c:	103ff826 	beq	r2,zero,1820 <_sbrk_r+0x34>
    1840:	88800015 	stw	r2,0(r17)
    1844:	1805883a 	mov	r2,r3
    1848:	dfc00217 	ldw	ra,8(sp)
    184c:	dc400117 	ldw	r17,4(sp)
    1850:	dc000017 	ldw	r16,0(sp)
    1854:	dec00304 	addi	sp,sp,12
    1858:	f800283a 	ret

0000185c <__swsetup_r>:
    185c:	00800074 	movhi	r2,1
    1860:	10a50704 	addi	r2,r2,-27620
    1864:	10c00017 	ldw	r3,0(r2)
    1868:	defffd04 	addi	sp,sp,-12
    186c:	dc400115 	stw	r17,4(sp)
    1870:	dc000015 	stw	r16,0(sp)
    1874:	dfc00215 	stw	ra,8(sp)
    1878:	2023883a 	mov	r17,r4
    187c:	2821883a 	mov	r16,r5
    1880:	18000226 	beq	r3,zero,188c <__swsetup_r+0x30>
    1884:	18800e17 	ldw	r2,56(r3)
    1888:	10001f26 	beq	r2,zero,1908 <__swsetup_r+0xac>
    188c:	8100030b 	ldhu	r4,12(r16)
    1890:	2080020c 	andi	r2,r4,8
    1894:	10002826 	beq	r2,zero,1938 <__swsetup_r+0xdc>
    1898:	81400417 	ldw	r5,16(r16)
    189c:	28001d26 	beq	r5,zero,1914 <__swsetup_r+0xb8>
    18a0:	2080004c 	andi	r2,r4,1
    18a4:	1005003a 	cmpeq	r2,r2,zero
    18a8:	10000b26 	beq	r2,zero,18d8 <__swsetup_r+0x7c>
    18ac:	2080008c 	andi	r2,r4,2
    18b0:	10001226 	beq	r2,zero,18fc <__swsetup_r+0xa0>
    18b4:	0005883a 	mov	r2,zero
    18b8:	80800215 	stw	r2,8(r16)
    18bc:	28000b26 	beq	r5,zero,18ec <__swsetup_r+0x90>
    18c0:	0005883a 	mov	r2,zero
    18c4:	dfc00217 	ldw	ra,8(sp)
    18c8:	dc400117 	ldw	r17,4(sp)
    18cc:	dc000017 	ldw	r16,0(sp)
    18d0:	dec00304 	addi	sp,sp,12
    18d4:	f800283a 	ret
    18d8:	80800517 	ldw	r2,20(r16)
    18dc:	80000215 	stw	zero,8(r16)
    18e0:	0085c83a 	sub	r2,zero,r2
    18e4:	80800615 	stw	r2,24(r16)
    18e8:	283ff51e 	bne	r5,zero,18c0 <__swsetup_r+0x64>
    18ec:	2080200c 	andi	r2,r4,128
    18f0:	103ff326 	beq	r2,zero,18c0 <__swsetup_r+0x64>
    18f4:	00bfffc4 	movi	r2,-1
    18f8:	003ff206 	br	18c4 <__swsetup_r+0x68>
    18fc:	80800517 	ldw	r2,20(r16)
    1900:	80800215 	stw	r2,8(r16)
    1904:	003fed06 	br	18bc <__swsetup_r+0x60>
    1908:	1809883a 	mov	r4,r3
    190c:	0001c300 	call	1c30 <__sinit>
    1910:	003fde06 	br	188c <__swsetup_r+0x30>
    1914:	20c0a00c 	andi	r3,r4,640
    1918:	00808004 	movi	r2,512
    191c:	18bfe026 	beq	r3,r2,18a0 <__swsetup_r+0x44>
    1920:	8809883a 	mov	r4,r17
    1924:	800b883a 	mov	r5,r16
    1928:	00024480 	call	2448 <__smakebuf_r>
    192c:	8100030b 	ldhu	r4,12(r16)
    1930:	81400417 	ldw	r5,16(r16)
    1934:	003fda06 	br	18a0 <__swsetup_r+0x44>
    1938:	2080040c 	andi	r2,r4,16
    193c:	103fed26 	beq	r2,zero,18f4 <__swsetup_r+0x98>
    1940:	2080010c 	andi	r2,r4,4
    1944:	10001226 	beq	r2,zero,1990 <__swsetup_r+0x134>
    1948:	81400c17 	ldw	r5,48(r16)
    194c:	28000526 	beq	r5,zero,1964 <__swsetup_r+0x108>
    1950:	80801004 	addi	r2,r16,64
    1954:	28800226 	beq	r5,r2,1960 <__swsetup_r+0x104>
    1958:	8809883a 	mov	r4,r17
    195c:	0001fb40 	call	1fb4 <_free_r>
    1960:	80000c15 	stw	zero,48(r16)
    1964:	8080030b 	ldhu	r2,12(r16)
    1968:	81400417 	ldw	r5,16(r16)
    196c:	80000115 	stw	zero,4(r16)
    1970:	10bff6cc 	andi	r2,r2,65499
    1974:	8080030d 	sth	r2,12(r16)
    1978:	81400015 	stw	r5,0(r16)
    197c:	8080030b 	ldhu	r2,12(r16)
    1980:	10800214 	ori	r2,r2,8
    1984:	113fffcc 	andi	r4,r2,65535
    1988:	8080030d 	sth	r2,12(r16)
    198c:	003fc306 	br	189c <__swsetup_r+0x40>
    1990:	81400417 	ldw	r5,16(r16)
    1994:	003ff906 	br	197c <__swsetup_r+0x120>

00001998 <_fflush_r>:
    1998:	defffb04 	addi	sp,sp,-20
    199c:	dcc00315 	stw	r19,12(sp)
    19a0:	dc800215 	stw	r18,8(sp)
    19a4:	dfc00415 	stw	ra,16(sp)
    19a8:	dc400115 	stw	r17,4(sp)
    19ac:	dc000015 	stw	r16,0(sp)
    19b0:	2027883a 	mov	r19,r4
    19b4:	2825883a 	mov	r18,r5
    19b8:	20000226 	beq	r4,zero,19c4 <_fflush_r+0x2c>
    19bc:	20800e17 	ldw	r2,56(r4)
    19c0:	10005626 	beq	r2,zero,1b1c <_fflush_r+0x184>
    19c4:	9100030b 	ldhu	r4,12(r18)
    19c8:	20ffffcc 	andi	r3,r4,65535
    19cc:	18e0001c 	xori	r3,r3,32768
    19d0:	18e00004 	addi	r3,r3,-32768
    19d4:	1880020c 	andi	r2,r3,8
    19d8:	1000261e 	bne	r2,zero,1a74 <_fflush_r+0xdc>
    19dc:	90c00117 	ldw	r3,4(r18)
    19e0:	20820014 	ori	r2,r4,2048
    19e4:	9080030d 	sth	r2,12(r18)
    19e8:	1009883a 	mov	r4,r2
    19ec:	00c0400e 	bge	zero,r3,1af0 <_fflush_r+0x158>
    19f0:	92000a17 	ldw	r8,40(r18)
    19f4:	40004026 	beq	r8,zero,1af8 <_fflush_r+0x160>
    19f8:	2084000c 	andi	r2,r4,4096
    19fc:	10005326 	beq	r2,zero,1b4c <_fflush_r+0x1b4>
    1a00:	94001417 	ldw	r16,80(r18)
    1a04:	9080030b 	ldhu	r2,12(r18)
    1a08:	1080010c 	andi	r2,r2,4
    1a0c:	1000481e 	bne	r2,zero,1b30 <_fflush_r+0x198>
    1a10:	91400717 	ldw	r5,28(r18)
    1a14:	9809883a 	mov	r4,r19
    1a18:	800d883a 	mov	r6,r16
    1a1c:	000f883a 	mov	r7,zero
    1a20:	403ee83a 	callr	r8
    1a24:	8080261e 	bne	r16,r2,1ac0 <_fflush_r+0x128>
    1a28:	9080030b 	ldhu	r2,12(r18)
    1a2c:	91000417 	ldw	r4,16(r18)
    1a30:	90000115 	stw	zero,4(r18)
    1a34:	10bdffcc 	andi	r2,r2,63487
    1a38:	10ffffcc 	andi	r3,r2,65535
    1a3c:	18c4000c 	andi	r3,r3,4096
    1a40:	9080030d 	sth	r2,12(r18)
    1a44:	91000015 	stw	r4,0(r18)
    1a48:	18002b26 	beq	r3,zero,1af8 <_fflush_r+0x160>
    1a4c:	0007883a 	mov	r3,zero
    1a50:	1805883a 	mov	r2,r3
    1a54:	94001415 	stw	r16,80(r18)
    1a58:	dfc00417 	ldw	ra,16(sp)
    1a5c:	dcc00317 	ldw	r19,12(sp)
    1a60:	dc800217 	ldw	r18,8(sp)
    1a64:	dc400117 	ldw	r17,4(sp)
    1a68:	dc000017 	ldw	r16,0(sp)
    1a6c:	dec00504 	addi	sp,sp,20
    1a70:	f800283a 	ret
    1a74:	94400417 	ldw	r17,16(r18)
    1a78:	88001f26 	beq	r17,zero,1af8 <_fflush_r+0x160>
    1a7c:	90800017 	ldw	r2,0(r18)
    1a80:	18c000cc 	andi	r3,r3,3
    1a84:	94400015 	stw	r17,0(r18)
    1a88:	1461c83a 	sub	r16,r2,r17
    1a8c:	18002526 	beq	r3,zero,1b24 <_fflush_r+0x18c>
    1a90:	0005883a 	mov	r2,zero
    1a94:	90800215 	stw	r2,8(r18)
    1a98:	0400170e 	bge	zero,r16,1af8 <_fflush_r+0x160>
    1a9c:	90c00917 	ldw	r3,36(r18)
    1aa0:	91400717 	ldw	r5,28(r18)
    1aa4:	880d883a 	mov	r6,r17
    1aa8:	800f883a 	mov	r7,r16
    1aac:	9809883a 	mov	r4,r19
    1ab0:	183ee83a 	callr	r3
    1ab4:	88a3883a 	add	r17,r17,r2
    1ab8:	80a1c83a 	sub	r16,r16,r2
    1abc:	00bff616 	blt	zero,r2,1a98 <_fflush_r+0x100>
    1ac0:	9080030b 	ldhu	r2,12(r18)
    1ac4:	00ffffc4 	movi	r3,-1
    1ac8:	10801014 	ori	r2,r2,64
    1acc:	9080030d 	sth	r2,12(r18)
    1ad0:	1805883a 	mov	r2,r3
    1ad4:	dfc00417 	ldw	ra,16(sp)
    1ad8:	dcc00317 	ldw	r19,12(sp)
    1adc:	dc800217 	ldw	r18,8(sp)
    1ae0:	dc400117 	ldw	r17,4(sp)
    1ae4:	dc000017 	ldw	r16,0(sp)
    1ae8:	dec00504 	addi	sp,sp,20
    1aec:	f800283a 	ret
    1af0:	90800f17 	ldw	r2,60(r18)
    1af4:	00bfbe16 	blt	zero,r2,19f0 <_fflush_r+0x58>
    1af8:	0007883a 	mov	r3,zero
    1afc:	1805883a 	mov	r2,r3
    1b00:	dfc00417 	ldw	ra,16(sp)
    1b04:	dcc00317 	ldw	r19,12(sp)
    1b08:	dc800217 	ldw	r18,8(sp)
    1b0c:	dc400117 	ldw	r17,4(sp)
    1b10:	dc000017 	ldw	r16,0(sp)
    1b14:	dec00504 	addi	sp,sp,20
    1b18:	f800283a 	ret
    1b1c:	0001c300 	call	1c30 <__sinit>
    1b20:	003fa806 	br	19c4 <_fflush_r+0x2c>
    1b24:	90800517 	ldw	r2,20(r18)
    1b28:	90800215 	stw	r2,8(r18)
    1b2c:	003fda06 	br	1a98 <_fflush_r+0x100>
    1b30:	90800117 	ldw	r2,4(r18)
    1b34:	90c00c17 	ldw	r3,48(r18)
    1b38:	80a1c83a 	sub	r16,r16,r2
    1b3c:	183fb426 	beq	r3,zero,1a10 <_fflush_r+0x78>
    1b40:	90800f17 	ldw	r2,60(r18)
    1b44:	80a1c83a 	sub	r16,r16,r2
    1b48:	003fb106 	br	1a10 <_fflush_r+0x78>
    1b4c:	91400717 	ldw	r5,28(r18)
    1b50:	9809883a 	mov	r4,r19
    1b54:	000d883a 	mov	r6,zero
    1b58:	01c00044 	movi	r7,1
    1b5c:	403ee83a 	callr	r8
    1b60:	1021883a 	mov	r16,r2
    1b64:	00bfffc4 	movi	r2,-1
    1b68:	80800226 	beq	r16,r2,1b74 <_fflush_r+0x1dc>
    1b6c:	92000a17 	ldw	r8,40(r18)
    1b70:	003fa406 	br	1a04 <_fflush_r+0x6c>
    1b74:	98c00017 	ldw	r3,0(r19)
    1b78:	00800744 	movi	r2,29
    1b7c:	18bfde26 	beq	r3,r2,1af8 <_fflush_r+0x160>
    1b80:	9080030b 	ldhu	r2,12(r18)
    1b84:	8007883a 	mov	r3,r16
    1b88:	10801014 	ori	r2,r2,64
    1b8c:	9080030d 	sth	r2,12(r18)
    1b90:	003fcf06 	br	1ad0 <_fflush_r+0x138>

00001b94 <fflush>:
    1b94:	01400034 	movhi	r5,0
    1b98:	29466604 	addi	r5,r5,6552
    1b9c:	2007883a 	mov	r3,r4
    1ba0:	20000526 	beq	r4,zero,1bb8 <fflush+0x24>
    1ba4:	00800074 	movhi	r2,1
    1ba8:	10a50704 	addi	r2,r2,-27620
    1bac:	11000017 	ldw	r4,0(r2)
    1bb0:	180b883a 	mov	r5,r3
    1bb4:	00019981 	jmpi	1998 <_fflush_r>
    1bb8:	00800074 	movhi	r2,1
    1bbc:	10a50804 	addi	r2,r2,-27616
    1bc0:	11000017 	ldw	r4,0(r2)
    1bc4:	00022c81 	jmpi	22c8 <_fwalk_reent>

00001bc8 <std>:
    1bc8:	00800034 	movhi	r2,0
    1bcc:	10899d04 	addi	r2,r2,9844
    1bd0:	20800b15 	stw	r2,44(r4)
    1bd4:	00800034 	movhi	r2,0
    1bd8:	1089d804 	addi	r2,r2,10080
    1bdc:	20800815 	stw	r2,32(r4)
    1be0:	00c00034 	movhi	r3,0
    1be4:	18c9b904 	addi	r3,r3,9956
    1be8:	00800034 	movhi	r2,0
    1bec:	10899f04 	addi	r2,r2,9852
    1bf0:	2140030d 	sth	r5,12(r4)
    1bf4:	2180038d 	sth	r6,14(r4)
    1bf8:	20c00915 	stw	r3,36(r4)
    1bfc:	20800a15 	stw	r2,40(r4)
    1c00:	20000015 	stw	zero,0(r4)
    1c04:	20000115 	stw	zero,4(r4)
    1c08:	20000215 	stw	zero,8(r4)
    1c0c:	20000415 	stw	zero,16(r4)
    1c10:	20000515 	stw	zero,20(r4)
    1c14:	20000615 	stw	zero,24(r4)
    1c18:	21000715 	stw	r4,28(r4)
    1c1c:	f800283a 	ret

00001c20 <__sfp_lock_acquire>:
    1c20:	f800283a 	ret

00001c24 <__sfp_lock_release>:
    1c24:	f800283a 	ret

00001c28 <__sinit_lock_acquire>:
    1c28:	f800283a 	ret

00001c2c <__sinit_lock_release>:
    1c2c:	f800283a 	ret

00001c30 <__sinit>:
    1c30:	20800e17 	ldw	r2,56(r4)
    1c34:	defffd04 	addi	sp,sp,-12
    1c38:	dc400115 	stw	r17,4(sp)
    1c3c:	dc000015 	stw	r16,0(sp)
    1c40:	dfc00215 	stw	ra,8(sp)
    1c44:	04400044 	movi	r17,1
    1c48:	01400104 	movi	r5,4
    1c4c:	000d883a 	mov	r6,zero
    1c50:	2021883a 	mov	r16,r4
    1c54:	2200bb04 	addi	r8,r4,748
    1c58:	200f883a 	mov	r7,r4
    1c5c:	10000526 	beq	r2,zero,1c74 <__sinit+0x44>
    1c60:	dfc00217 	ldw	ra,8(sp)
    1c64:	dc400117 	ldw	r17,4(sp)
    1c68:	dc000017 	ldw	r16,0(sp)
    1c6c:	dec00304 	addi	sp,sp,12
    1c70:	f800283a 	ret
    1c74:	21000117 	ldw	r4,4(r4)
    1c78:	00800034 	movhi	r2,0
    1c7c:	10874504 	addi	r2,r2,7444
    1c80:	00c000c4 	movi	r3,3
    1c84:	80800f15 	stw	r2,60(r16)
    1c88:	80c0b915 	stw	r3,740(r16)
    1c8c:	8200ba15 	stw	r8,744(r16)
    1c90:	84400e15 	stw	r17,56(r16)
    1c94:	8000b815 	stw	zero,736(r16)
    1c98:	0001bc80 	call	1bc8 <std>
    1c9c:	81000217 	ldw	r4,8(r16)
    1ca0:	880d883a 	mov	r6,r17
    1ca4:	800f883a 	mov	r7,r16
    1ca8:	01400284 	movi	r5,10
    1cac:	0001bc80 	call	1bc8 <std>
    1cb0:	81000317 	ldw	r4,12(r16)
    1cb4:	800f883a 	mov	r7,r16
    1cb8:	01400484 	movi	r5,18
    1cbc:	01800084 	movi	r6,2
    1cc0:	dfc00217 	ldw	ra,8(sp)
    1cc4:	dc400117 	ldw	r17,4(sp)
    1cc8:	dc000017 	ldw	r16,0(sp)
    1ccc:	dec00304 	addi	sp,sp,12
    1cd0:	0001bc81 	jmpi	1bc8 <std>

00001cd4 <__fp_lock>:
    1cd4:	0005883a 	mov	r2,zero
    1cd8:	f800283a 	ret

00001cdc <__fp_unlock>:
    1cdc:	0005883a 	mov	r2,zero
    1ce0:	f800283a 	ret

00001ce4 <__fp_unlock_all>:
    1ce4:	00800074 	movhi	r2,1
    1ce8:	10a50704 	addi	r2,r2,-27620
    1cec:	11000017 	ldw	r4,0(r2)
    1cf0:	01400034 	movhi	r5,0
    1cf4:	29473704 	addi	r5,r5,7388
    1cf8:	00023901 	jmpi	2390 <_fwalk>

00001cfc <__fp_lock_all>:
    1cfc:	00800074 	movhi	r2,1
    1d00:	10a50704 	addi	r2,r2,-27620
    1d04:	11000017 	ldw	r4,0(r2)
    1d08:	01400034 	movhi	r5,0
    1d0c:	29473504 	addi	r5,r5,7380
    1d10:	00023901 	jmpi	2390 <_fwalk>

00001d14 <_cleanup_r>:
    1d14:	01400034 	movhi	r5,0
    1d18:	294a6e04 	addi	r5,r5,10680
    1d1c:	00023901 	jmpi	2390 <_fwalk>

00001d20 <_cleanup>:
    1d20:	00800074 	movhi	r2,1
    1d24:	10a50804 	addi	r2,r2,-27616
    1d28:	11000017 	ldw	r4,0(r2)
    1d2c:	0001d141 	jmpi	1d14 <_cleanup_r>

00001d30 <__sfmoreglue>:
    1d30:	defffc04 	addi	sp,sp,-16
    1d34:	dc400115 	stw	r17,4(sp)
    1d38:	2c401724 	muli	r17,r5,92
    1d3c:	dc800215 	stw	r18,8(sp)
    1d40:	2825883a 	mov	r18,r5
    1d44:	89400304 	addi	r5,r17,12
    1d48:	dc000015 	stw	r16,0(sp)
    1d4c:	dfc00315 	stw	ra,12(sp)
    1d50:	00008540 	call	854 <_malloc_r>
    1d54:	0021883a 	mov	r16,zero
    1d58:	880d883a 	mov	r6,r17
    1d5c:	000b883a 	mov	r5,zero
    1d60:	10000626 	beq	r2,zero,1d7c <__sfmoreglue+0x4c>
    1d64:	11000304 	addi	r4,r2,12
    1d68:	14800115 	stw	r18,4(r2)
    1d6c:	10000015 	stw	zero,0(r2)
    1d70:	11000215 	stw	r4,8(r2)
    1d74:	1021883a 	mov	r16,r2
    1d78:	00025dc0 	call	25dc <memset>
    1d7c:	8005883a 	mov	r2,r16
    1d80:	dfc00317 	ldw	ra,12(sp)
    1d84:	dc800217 	ldw	r18,8(sp)
    1d88:	dc400117 	ldw	r17,4(sp)
    1d8c:	dc000017 	ldw	r16,0(sp)
    1d90:	dec00404 	addi	sp,sp,16
    1d94:	f800283a 	ret

00001d98 <__sfp>:
    1d98:	defffd04 	addi	sp,sp,-12
    1d9c:	00800074 	movhi	r2,1
    1da0:	10a50804 	addi	r2,r2,-27616
    1da4:	dc000015 	stw	r16,0(sp)
    1da8:	14000017 	ldw	r16,0(r2)
    1dac:	dc400115 	stw	r17,4(sp)
    1db0:	dfc00215 	stw	ra,8(sp)
    1db4:	80800e17 	ldw	r2,56(r16)
    1db8:	2023883a 	mov	r17,r4
    1dbc:	10002626 	beq	r2,zero,1e58 <__sfp+0xc0>
    1dc0:	8400b804 	addi	r16,r16,736
    1dc4:	80800117 	ldw	r2,4(r16)
    1dc8:	81000217 	ldw	r4,8(r16)
    1dcc:	10ffffc4 	addi	r3,r2,-1
    1dd0:	18000916 	blt	r3,zero,1df8 <__sfp+0x60>
    1dd4:	2080030f 	ldh	r2,12(r4)
    1dd8:	10000b26 	beq	r2,zero,1e08 <__sfp+0x70>
    1ddc:	017fffc4 	movi	r5,-1
    1de0:	00000206 	br	1dec <__sfp+0x54>
    1de4:	2080030f 	ldh	r2,12(r4)
    1de8:	10000726 	beq	r2,zero,1e08 <__sfp+0x70>
    1dec:	18ffffc4 	addi	r3,r3,-1
    1df0:	21001704 	addi	r4,r4,92
    1df4:	197ffb1e 	bne	r3,r5,1de4 <__sfp+0x4c>
    1df8:	80800017 	ldw	r2,0(r16)
    1dfc:	10001926 	beq	r2,zero,1e64 <__sfp+0xcc>
    1e00:	1021883a 	mov	r16,r2
    1e04:	003fef06 	br	1dc4 <__sfp+0x2c>
    1e08:	00bfffc4 	movi	r2,-1
    1e0c:	00c00044 	movi	r3,1
    1e10:	2080038d 	sth	r2,14(r4)
    1e14:	20c0030d 	sth	r3,12(r4)
    1e18:	20000015 	stw	zero,0(r4)
    1e1c:	20000215 	stw	zero,8(r4)
    1e20:	20000115 	stw	zero,4(r4)
    1e24:	20000415 	stw	zero,16(r4)
    1e28:	20000515 	stw	zero,20(r4)
    1e2c:	20000615 	stw	zero,24(r4)
    1e30:	20000c15 	stw	zero,48(r4)
    1e34:	20000d15 	stw	zero,52(r4)
    1e38:	20001115 	stw	zero,68(r4)
    1e3c:	20001215 	stw	zero,72(r4)
    1e40:	2005883a 	mov	r2,r4
    1e44:	dfc00217 	ldw	ra,8(sp)
    1e48:	dc400117 	ldw	r17,4(sp)
    1e4c:	dc000017 	ldw	r16,0(sp)
    1e50:	dec00304 	addi	sp,sp,12
    1e54:	f800283a 	ret
    1e58:	8009883a 	mov	r4,r16
    1e5c:	0001c300 	call	1c30 <__sinit>
    1e60:	003fd706 	br	1dc0 <__sfp+0x28>
    1e64:	8809883a 	mov	r4,r17
    1e68:	01400104 	movi	r5,4
    1e6c:	0001d300 	call	1d30 <__sfmoreglue>
    1e70:	80800015 	stw	r2,0(r16)
    1e74:	103fe21e 	bne	r2,zero,1e00 <__sfp+0x68>
    1e78:	00800304 	movi	r2,12
    1e7c:	0009883a 	mov	r4,zero
    1e80:	88800015 	stw	r2,0(r17)
    1e84:	003fee06 	br	1e40 <__sfp+0xa8>

00001e88 <_malloc_trim_r>:
    1e88:	defffb04 	addi	sp,sp,-20
    1e8c:	dcc00315 	stw	r19,12(sp)
    1e90:	04c00034 	movhi	r19,0
    1e94:	9cde9604 	addi	r19,r19,31320
    1e98:	dc800215 	stw	r18,8(sp)
    1e9c:	dc400115 	stw	r17,4(sp)
    1ea0:	dc000015 	stw	r16,0(sp)
    1ea4:	2823883a 	mov	r17,r5
    1ea8:	2025883a 	mov	r18,r4
    1eac:	dfc00415 	stw	ra,16(sp)
    1eb0:	00032240 	call	3224 <__malloc_lock>
    1eb4:	98800217 	ldw	r2,8(r19)
    1eb8:	9009883a 	mov	r4,r18
    1ebc:	000b883a 	mov	r5,zero
    1ec0:	10c00117 	ldw	r3,4(r2)
    1ec4:	00bfff04 	movi	r2,-4
    1ec8:	18a0703a 	and	r16,r3,r2
    1ecc:	8463c83a 	sub	r17,r16,r17
    1ed0:	8c43fbc4 	addi	r17,r17,4079
    1ed4:	8822d33a 	srli	r17,r17,12
    1ed8:	0083ffc4 	movi	r2,4095
    1edc:	8c7fffc4 	addi	r17,r17,-1
    1ee0:	8822933a 	slli	r17,r17,12
    1ee4:	1440060e 	bge	r2,r17,1f00 <_malloc_trim_r+0x78>
    1ee8:	00017ec0 	call	17ec <_sbrk_r>
    1eec:	98c00217 	ldw	r3,8(r19)
    1ef0:	9009883a 	mov	r4,r18
    1ef4:	044bc83a 	sub	r5,zero,r17
    1ef8:	80c7883a 	add	r3,r16,r3
    1efc:	10c00926 	beq	r2,r3,1f24 <_malloc_trim_r+0x9c>
    1f00:	00032440 	call	3244 <__malloc_unlock>
    1f04:	0005883a 	mov	r2,zero
    1f08:	dfc00417 	ldw	ra,16(sp)
    1f0c:	dcc00317 	ldw	r19,12(sp)
    1f10:	dc800217 	ldw	r18,8(sp)
    1f14:	dc400117 	ldw	r17,4(sp)
    1f18:	dc000017 	ldw	r16,0(sp)
    1f1c:	dec00504 	addi	sp,sp,20
    1f20:	f800283a 	ret
    1f24:	9009883a 	mov	r4,r18
    1f28:	00017ec0 	call	17ec <_sbrk_r>
    1f2c:	844dc83a 	sub	r6,r16,r17
    1f30:	00ffffc4 	movi	r3,-1
    1f34:	9009883a 	mov	r4,r18
    1f38:	000b883a 	mov	r5,zero
    1f3c:	01c00074 	movhi	r7,1
    1f40:	39ec9e04 	addi	r7,r7,-19848
    1f44:	31800054 	ori	r6,r6,1
    1f48:	10c00926 	beq	r2,r3,1f70 <_malloc_trim_r+0xe8>
    1f4c:	38800017 	ldw	r2,0(r7)
    1f50:	98c00217 	ldw	r3,8(r19)
    1f54:	9009883a 	mov	r4,r18
    1f58:	1445c83a 	sub	r2,r2,r17
    1f5c:	38800015 	stw	r2,0(r7)
    1f60:	19800115 	stw	r6,4(r3)
    1f64:	00032440 	call	3244 <__malloc_unlock>
    1f68:	00800044 	movi	r2,1
    1f6c:	003fe606 	br	1f08 <_malloc_trim_r+0x80>
    1f70:	00017ec0 	call	17ec <_sbrk_r>
    1f74:	99800217 	ldw	r6,8(r19)
    1f78:	100f883a 	mov	r7,r2
    1f7c:	9009883a 	mov	r4,r18
    1f80:	1187c83a 	sub	r3,r2,r6
    1f84:	008003c4 	movi	r2,15
    1f88:	19400054 	ori	r5,r3,1
    1f8c:	10ffdc0e 	bge	r2,r3,1f00 <_malloc_trim_r+0x78>
    1f90:	00800074 	movhi	r2,1
    1f94:	10a50a04 	addi	r2,r2,-27608
    1f98:	10c00017 	ldw	r3,0(r2)
    1f9c:	00800074 	movhi	r2,1
    1fa0:	10ac9e04 	addi	r2,r2,-19848
    1fa4:	31400115 	stw	r5,4(r6)
    1fa8:	38c7c83a 	sub	r3,r7,r3
    1fac:	10c00015 	stw	r3,0(r2)
    1fb0:	003fd306 	br	1f00 <_malloc_trim_r+0x78>

00001fb4 <_free_r>:
    1fb4:	defffd04 	addi	sp,sp,-12
    1fb8:	dc400115 	stw	r17,4(sp)
    1fbc:	dc000015 	stw	r16,0(sp)
    1fc0:	dfc00215 	stw	ra,8(sp)
    1fc4:	2821883a 	mov	r16,r5
    1fc8:	2023883a 	mov	r17,r4
    1fcc:	28005a26 	beq	r5,zero,2138 <_free_r+0x184>
    1fd0:	00032240 	call	3224 <__malloc_lock>
    1fd4:	823ffe04 	addi	r8,r16,-8
    1fd8:	41400117 	ldw	r5,4(r8)
    1fdc:	00bfff84 	movi	r2,-2
    1fe0:	02800034 	movhi	r10,0
    1fe4:	529e9604 	addi	r10,r10,31320
    1fe8:	288e703a 	and	r7,r5,r2
    1fec:	41cd883a 	add	r6,r8,r7
    1ff0:	30c00117 	ldw	r3,4(r6)
    1ff4:	51000217 	ldw	r4,8(r10)
    1ff8:	00bfff04 	movi	r2,-4
    1ffc:	1892703a 	and	r9,r3,r2
    2000:	5017883a 	mov	r11,r10
    2004:	31006726 	beq	r6,r4,21a4 <_free_r+0x1f0>
    2008:	2880004c 	andi	r2,r5,1
    200c:	1005003a 	cmpeq	r2,r2,zero
    2010:	32400115 	stw	r9,4(r6)
    2014:	10001a1e 	bne	r2,zero,2080 <_free_r+0xcc>
    2018:	000b883a 	mov	r5,zero
    201c:	3247883a 	add	r3,r6,r9
    2020:	18800117 	ldw	r2,4(r3)
    2024:	1080004c 	andi	r2,r2,1
    2028:	1000231e 	bne	r2,zero,20b8 <_free_r+0x104>
    202c:	280ac03a 	cmpne	r5,r5,zero
    2030:	3a4f883a 	add	r7,r7,r9
    2034:	2800451e 	bne	r5,zero,214c <_free_r+0x198>
    2038:	31000217 	ldw	r4,8(r6)
    203c:	00800034 	movhi	r2,0
    2040:	109e9804 	addi	r2,r2,31328
    2044:	20807b26 	beq	r4,r2,2234 <_free_r+0x280>
    2048:	30800317 	ldw	r2,12(r6)
    204c:	3a07883a 	add	r3,r7,r8
    2050:	19c00015 	stw	r7,0(r3)
    2054:	11000215 	stw	r4,8(r2)
    2058:	20800315 	stw	r2,12(r4)
    205c:	38800054 	ori	r2,r7,1
    2060:	40800115 	stw	r2,4(r8)
    2064:	28001a26 	beq	r5,zero,20d0 <_free_r+0x11c>
    2068:	8809883a 	mov	r4,r17
    206c:	dfc00217 	ldw	ra,8(sp)
    2070:	dc400117 	ldw	r17,4(sp)
    2074:	dc000017 	ldw	r16,0(sp)
    2078:	dec00304 	addi	sp,sp,12
    207c:	00032441 	jmpi	3244 <__malloc_unlock>
    2080:	80bffe17 	ldw	r2,-8(r16)
    2084:	50c00204 	addi	r3,r10,8
    2088:	4091c83a 	sub	r8,r8,r2
    208c:	41000217 	ldw	r4,8(r8)
    2090:	388f883a 	add	r7,r7,r2
    2094:	20c06126 	beq	r4,r3,221c <_free_r+0x268>
    2098:	40800317 	ldw	r2,12(r8)
    209c:	3247883a 	add	r3,r6,r9
    20a0:	000b883a 	mov	r5,zero
    20a4:	11000215 	stw	r4,8(r2)
    20a8:	20800315 	stw	r2,12(r4)
    20ac:	18800117 	ldw	r2,4(r3)
    20b0:	1080004c 	andi	r2,r2,1
    20b4:	103fdd26 	beq	r2,zero,202c <_free_r+0x78>
    20b8:	38800054 	ori	r2,r7,1
    20bc:	3a07883a 	add	r3,r7,r8
    20c0:	280ac03a 	cmpne	r5,r5,zero
    20c4:	40800115 	stw	r2,4(r8)
    20c8:	19c00015 	stw	r7,0(r3)
    20cc:	283fe61e 	bne	r5,zero,2068 <_free_r+0xb4>
    20d0:	00807fc4 	movi	r2,511
    20d4:	11c01f2e 	bgeu	r2,r7,2154 <_free_r+0x1a0>
    20d8:	3806d27a 	srli	r3,r7,9
    20dc:	1800481e 	bne	r3,zero,2200 <_free_r+0x24c>
    20e0:	3804d0fa 	srli	r2,r7,3
    20e4:	100690fa 	slli	r3,r2,3
    20e8:	1acd883a 	add	r6,r3,r11
    20ec:	31400217 	ldw	r5,8(r6)
    20f0:	31405926 	beq	r6,r5,2258 <_free_r+0x2a4>
    20f4:	28800117 	ldw	r2,4(r5)
    20f8:	00ffff04 	movi	r3,-4
    20fc:	10c4703a 	and	r2,r2,r3
    2100:	3880022e 	bgeu	r7,r2,210c <_free_r+0x158>
    2104:	29400217 	ldw	r5,8(r5)
    2108:	317ffa1e 	bne	r6,r5,20f4 <_free_r+0x140>
    210c:	29800317 	ldw	r6,12(r5)
    2110:	41800315 	stw	r6,12(r8)
    2114:	41400215 	stw	r5,8(r8)
    2118:	8809883a 	mov	r4,r17
    211c:	2a000315 	stw	r8,12(r5)
    2120:	32000215 	stw	r8,8(r6)
    2124:	dfc00217 	ldw	ra,8(sp)
    2128:	dc400117 	ldw	r17,4(sp)
    212c:	dc000017 	ldw	r16,0(sp)
    2130:	dec00304 	addi	sp,sp,12
    2134:	00032441 	jmpi	3244 <__malloc_unlock>
    2138:	dfc00217 	ldw	ra,8(sp)
    213c:	dc400117 	ldw	r17,4(sp)
    2140:	dc000017 	ldw	r16,0(sp)
    2144:	dec00304 	addi	sp,sp,12
    2148:	f800283a 	ret
    214c:	31000217 	ldw	r4,8(r6)
    2150:	003fbd06 	br	2048 <_free_r+0x94>
    2154:	3806d0fa 	srli	r3,r7,3
    2158:	00800044 	movi	r2,1
    215c:	51400117 	ldw	r5,4(r10)
    2160:	180890fa 	slli	r4,r3,3
    2164:	1807d0ba 	srai	r3,r3,2
    2168:	22c9883a 	add	r4,r4,r11
    216c:	21800217 	ldw	r6,8(r4)
    2170:	10c4983a 	sll	r2,r2,r3
    2174:	41000315 	stw	r4,12(r8)
    2178:	41800215 	stw	r6,8(r8)
    217c:	288ab03a 	or	r5,r5,r2
    2180:	22000215 	stw	r8,8(r4)
    2184:	8809883a 	mov	r4,r17
    2188:	51400115 	stw	r5,4(r10)
    218c:	32000315 	stw	r8,12(r6)
    2190:	dfc00217 	ldw	ra,8(sp)
    2194:	dc400117 	ldw	r17,4(sp)
    2198:	dc000017 	ldw	r16,0(sp)
    219c:	dec00304 	addi	sp,sp,12
    21a0:	00032441 	jmpi	3244 <__malloc_unlock>
    21a4:	2880004c 	andi	r2,r5,1
    21a8:	3a4d883a 	add	r6,r7,r9
    21ac:	1000071e 	bne	r2,zero,21cc <_free_r+0x218>
    21b0:	80bffe17 	ldw	r2,-8(r16)
    21b4:	4091c83a 	sub	r8,r8,r2
    21b8:	41000317 	ldw	r4,12(r8)
    21bc:	40c00217 	ldw	r3,8(r8)
    21c0:	308d883a 	add	r6,r6,r2
    21c4:	20c00215 	stw	r3,8(r4)
    21c8:	19000315 	stw	r4,12(r3)
    21cc:	00800074 	movhi	r2,1
    21d0:	10a50904 	addi	r2,r2,-27612
    21d4:	11000017 	ldw	r4,0(r2)
    21d8:	30c00054 	ori	r3,r6,1
    21dc:	52000215 	stw	r8,8(r10)
    21e0:	40c00115 	stw	r3,4(r8)
    21e4:	313fa036 	bltu	r6,r4,2068 <_free_r+0xb4>
    21e8:	00800074 	movhi	r2,1
    21ec:	10ac9404 	addi	r2,r2,-19888
    21f0:	11400017 	ldw	r5,0(r2)
    21f4:	8809883a 	mov	r4,r17
    21f8:	0001e880 	call	1e88 <_malloc_trim_r>
    21fc:	003f9a06 	br	2068 <_free_r+0xb4>
    2200:	00800104 	movi	r2,4
    2204:	10c0072e 	bgeu	r2,r3,2224 <_free_r+0x270>
    2208:	00800504 	movi	r2,20
    220c:	10c01936 	bltu	r2,r3,2274 <_free_r+0x2c0>
    2210:	188016c4 	addi	r2,r3,91
    2214:	100690fa 	slli	r3,r2,3
    2218:	003fb306 	br	20e8 <_free_r+0x134>
    221c:	01400044 	movi	r5,1
    2220:	003f7e06 	br	201c <_free_r+0x68>
    2224:	3804d1ba 	srli	r2,r7,6
    2228:	10800e04 	addi	r2,r2,56
    222c:	100690fa 	slli	r3,r2,3
    2230:	003fad06 	br	20e8 <_free_r+0x134>
    2234:	22000315 	stw	r8,12(r4)
    2238:	22000215 	stw	r8,8(r4)
    223c:	3a05883a 	add	r2,r7,r8
    2240:	38c00054 	ori	r3,r7,1
    2244:	11c00015 	stw	r7,0(r2)
    2248:	41000215 	stw	r4,8(r8)
    224c:	40c00115 	stw	r3,4(r8)
    2250:	41000315 	stw	r4,12(r8)
    2254:	003f8406 	br	2068 <_free_r+0xb4>
    2258:	1005d0ba 	srai	r2,r2,2
    225c:	00c00044 	movi	r3,1
    2260:	51000117 	ldw	r4,4(r10)
    2264:	1886983a 	sll	r3,r3,r2
    2268:	20c8b03a 	or	r4,r4,r3
    226c:	51000115 	stw	r4,4(r10)
    2270:	003fa706 	br	2110 <_free_r+0x15c>
    2274:	00801504 	movi	r2,84
    2278:	10c00436 	bltu	r2,r3,228c <_free_r+0x2d8>
    227c:	3804d33a 	srli	r2,r7,12
    2280:	10801b84 	addi	r2,r2,110
    2284:	100690fa 	slli	r3,r2,3
    2288:	003f9706 	br	20e8 <_free_r+0x134>
    228c:	00805504 	movi	r2,340
    2290:	10c00436 	bltu	r2,r3,22a4 <_free_r+0x2f0>
    2294:	3804d3fa 	srli	r2,r7,15
    2298:	10801dc4 	addi	r2,r2,119
    229c:	100690fa 	slli	r3,r2,3
    22a0:	003f9106 	br	20e8 <_free_r+0x134>
    22a4:	00815504 	movi	r2,1364
    22a8:	10c0032e 	bgeu	r2,r3,22b8 <_free_r+0x304>
    22ac:	00801f84 	movi	r2,126
    22b0:	00c0fc04 	movi	r3,1008
    22b4:	003f8c06 	br	20e8 <_free_r+0x134>
    22b8:	3804d4ba 	srli	r2,r7,18
    22bc:	10801f04 	addi	r2,r2,124
    22c0:	100690fa 	slli	r3,r2,3
    22c4:	003f8806 	br	20e8 <_free_r+0x134>

000022c8 <_fwalk_reent>:
    22c8:	defff704 	addi	sp,sp,-36
    22cc:	dcc00315 	stw	r19,12(sp)
    22d0:	24c0b804 	addi	r19,r4,736
    22d4:	dd800615 	stw	r22,24(sp)
    22d8:	dd400515 	stw	r21,20(sp)
    22dc:	dfc00815 	stw	ra,32(sp)
    22e0:	ddc00715 	stw	r23,28(sp)
    22e4:	dd000415 	stw	r20,16(sp)
    22e8:	dc800215 	stw	r18,8(sp)
    22ec:	dc400115 	stw	r17,4(sp)
    22f0:	dc000015 	stw	r16,0(sp)
    22f4:	202b883a 	mov	r21,r4
    22f8:	282d883a 	mov	r22,r5
    22fc:	0001c200 	call	1c20 <__sfp_lock_acquire>
    2300:	98002126 	beq	r19,zero,2388 <_fwalk_reent+0xc0>
    2304:	002f883a 	mov	r23,zero
    2308:	9c800117 	ldw	r18,4(r19)
    230c:	9c000217 	ldw	r16,8(r19)
    2310:	90bfffc4 	addi	r2,r18,-1
    2314:	10000d16 	blt	r2,zero,234c <_fwalk_reent+0x84>
    2318:	0023883a 	mov	r17,zero
    231c:	053fffc4 	movi	r20,-1
    2320:	8080030f 	ldh	r2,12(r16)
    2324:	8c400044 	addi	r17,r17,1
    2328:	10000626 	beq	r2,zero,2344 <_fwalk_reent+0x7c>
    232c:	8080038f 	ldh	r2,14(r16)
    2330:	800b883a 	mov	r5,r16
    2334:	a809883a 	mov	r4,r21
    2338:	15000226 	beq	r2,r20,2344 <_fwalk_reent+0x7c>
    233c:	b03ee83a 	callr	r22
    2340:	b8aeb03a 	or	r23,r23,r2
    2344:	84001704 	addi	r16,r16,92
    2348:	947ff51e 	bne	r18,r17,2320 <_fwalk_reent+0x58>
    234c:	9cc00017 	ldw	r19,0(r19)
    2350:	983fed1e 	bne	r19,zero,2308 <_fwalk_reent+0x40>
    2354:	0001c240 	call	1c24 <__sfp_lock_release>
    2358:	b805883a 	mov	r2,r23
    235c:	dfc00817 	ldw	ra,32(sp)
    2360:	ddc00717 	ldw	r23,28(sp)
    2364:	dd800617 	ldw	r22,24(sp)
    2368:	dd400517 	ldw	r21,20(sp)
    236c:	dd000417 	ldw	r20,16(sp)
    2370:	dcc00317 	ldw	r19,12(sp)
    2374:	dc800217 	ldw	r18,8(sp)
    2378:	dc400117 	ldw	r17,4(sp)
    237c:	dc000017 	ldw	r16,0(sp)
    2380:	dec00904 	addi	sp,sp,36
    2384:	f800283a 	ret
    2388:	002f883a 	mov	r23,zero
    238c:	003ff106 	br	2354 <_fwalk_reent+0x8c>

00002390 <_fwalk>:
    2390:	defff804 	addi	sp,sp,-32
    2394:	dcc00315 	stw	r19,12(sp)
    2398:	24c0b804 	addi	r19,r4,736
    239c:	dd400515 	stw	r21,20(sp)
    23a0:	dfc00715 	stw	ra,28(sp)
    23a4:	dd800615 	stw	r22,24(sp)
    23a8:	dd000415 	stw	r20,16(sp)
    23ac:	dc800215 	stw	r18,8(sp)
    23b0:	dc400115 	stw	r17,4(sp)
    23b4:	dc000015 	stw	r16,0(sp)
    23b8:	282b883a 	mov	r21,r5
    23bc:	0001c200 	call	1c20 <__sfp_lock_acquire>
    23c0:	98001f26 	beq	r19,zero,2440 <_fwalk+0xb0>
    23c4:	002d883a 	mov	r22,zero
    23c8:	9c800117 	ldw	r18,4(r19)
    23cc:	9c000217 	ldw	r16,8(r19)
    23d0:	90bfffc4 	addi	r2,r18,-1
    23d4:	10000c16 	blt	r2,zero,2408 <_fwalk+0x78>
    23d8:	0023883a 	mov	r17,zero
    23dc:	053fffc4 	movi	r20,-1
    23e0:	8080030f 	ldh	r2,12(r16)
    23e4:	8c400044 	addi	r17,r17,1
    23e8:	10000526 	beq	r2,zero,2400 <_fwalk+0x70>
    23ec:	8080038f 	ldh	r2,14(r16)
    23f0:	8009883a 	mov	r4,r16
    23f4:	15000226 	beq	r2,r20,2400 <_fwalk+0x70>
    23f8:	a83ee83a 	callr	r21
    23fc:	b0acb03a 	or	r22,r22,r2
    2400:	84001704 	addi	r16,r16,92
    2404:	947ff61e 	bne	r18,r17,23e0 <_fwalk+0x50>
    2408:	9cc00017 	ldw	r19,0(r19)
    240c:	983fee1e 	bne	r19,zero,23c8 <_fwalk+0x38>
    2410:	0001c240 	call	1c24 <__sfp_lock_release>
    2414:	b005883a 	mov	r2,r22
    2418:	dfc00717 	ldw	ra,28(sp)
    241c:	dd800617 	ldw	r22,24(sp)
    2420:	dd400517 	ldw	r21,20(sp)
    2424:	dd000417 	ldw	r20,16(sp)
    2428:	dcc00317 	ldw	r19,12(sp)
    242c:	dc800217 	ldw	r18,8(sp)
    2430:	dc400117 	ldw	r17,4(sp)
    2434:	dc000017 	ldw	r16,0(sp)
    2438:	dec00804 	addi	sp,sp,32
    243c:	f800283a 	ret
    2440:	002d883a 	mov	r22,zero
    2444:	003ff206 	br	2410 <_fwalk+0x80>

00002448 <__smakebuf_r>:
    2448:	2880030b 	ldhu	r2,12(r5)
    244c:	deffed04 	addi	sp,sp,-76
    2450:	dc401015 	stw	r17,64(sp)
    2454:	1080008c 	andi	r2,r2,2
    2458:	dc000f15 	stw	r16,60(sp)
    245c:	dfc01215 	stw	ra,72(sp)
    2460:	dc801115 	stw	r18,68(sp)
    2464:	2821883a 	mov	r16,r5
    2468:	2023883a 	mov	r17,r4
    246c:	10000b26 	beq	r2,zero,249c <__smakebuf_r+0x54>
    2470:	28c010c4 	addi	r3,r5,67
    2474:	00800044 	movi	r2,1
    2478:	28800515 	stw	r2,20(r5)
    247c:	28c00415 	stw	r3,16(r5)
    2480:	28c00015 	stw	r3,0(r5)
    2484:	dfc01217 	ldw	ra,72(sp)
    2488:	dc801117 	ldw	r18,68(sp)
    248c:	dc401017 	ldw	r17,64(sp)
    2490:	dc000f17 	ldw	r16,60(sp)
    2494:	dec01304 	addi	sp,sp,76
    2498:	f800283a 	ret
    249c:	2940038f 	ldh	r5,14(r5)
    24a0:	28002116 	blt	r5,zero,2528 <__smakebuf_r+0xe0>
    24a4:	d80d883a 	mov	r6,sp
    24a8:	00029cc0 	call	29cc <_fstat_r>
    24ac:	10001e16 	blt	r2,zero,2528 <__smakebuf_r+0xe0>
    24b0:	d8800117 	ldw	r2,4(sp)
    24b4:	00e00014 	movui	r3,32768
    24b8:	113c000c 	andi	r4,r2,61440
    24bc:	20c03126 	beq	r4,r3,2584 <__smakebuf_r+0x13c>
    24c0:	8080030b 	ldhu	r2,12(r16)
    24c4:	00c80004 	movi	r3,8192
    24c8:	10820014 	ori	r2,r2,2048
    24cc:	8080030d 	sth	r2,12(r16)
    24d0:	20c01e26 	beq	r4,r3,254c <__smakebuf_r+0x104>
    24d4:	04810004 	movi	r18,1024
    24d8:	8809883a 	mov	r4,r17
    24dc:	900b883a 	mov	r5,r18
    24e0:	00008540 	call	854 <_malloc_r>
    24e4:	1009883a 	mov	r4,r2
    24e8:	10003126 	beq	r2,zero,25b0 <__smakebuf_r+0x168>
    24ec:	80c0030b 	ldhu	r3,12(r16)
    24f0:	00800034 	movhi	r2,0
    24f4:	10874504 	addi	r2,r2,7444
    24f8:	88800f15 	stw	r2,60(r17)
    24fc:	18c02014 	ori	r3,r3,128
    2500:	84800515 	stw	r18,20(r16)
    2504:	80c0030d 	sth	r3,12(r16)
    2508:	81000415 	stw	r4,16(r16)
    250c:	81000015 	stw	r4,0(r16)
    2510:	dfc01217 	ldw	ra,72(sp)
    2514:	dc801117 	ldw	r18,68(sp)
    2518:	dc401017 	ldw	r17,64(sp)
    251c:	dc000f17 	ldw	r16,60(sp)
    2520:	dec01304 	addi	sp,sp,76
    2524:	f800283a 	ret
    2528:	80c0030b 	ldhu	r3,12(r16)
    252c:	1880200c 	andi	r2,r3,128
    2530:	10000426 	beq	r2,zero,2544 <__smakebuf_r+0xfc>
    2534:	04801004 	movi	r18,64
    2538:	18820014 	ori	r2,r3,2048
    253c:	8080030d 	sth	r2,12(r16)
    2540:	003fe506 	br	24d8 <__smakebuf_r+0x90>
    2544:	04810004 	movi	r18,1024
    2548:	003ffb06 	br	2538 <__smakebuf_r+0xf0>
    254c:	8140038f 	ldh	r5,14(r16)
    2550:	8809883a 	mov	r4,r17
    2554:	0002a400 	call	2a40 <_isatty_r>
    2558:	103fde26 	beq	r2,zero,24d4 <__smakebuf_r+0x8c>
    255c:	8080030b 	ldhu	r2,12(r16)
    2560:	80c010c4 	addi	r3,r16,67
    2564:	04810004 	movi	r18,1024
    2568:	10800054 	ori	r2,r2,1
    256c:	8080030d 	sth	r2,12(r16)
    2570:	00800044 	movi	r2,1
    2574:	80c00415 	stw	r3,16(r16)
    2578:	80800515 	stw	r2,20(r16)
    257c:	80c00015 	stw	r3,0(r16)
    2580:	003fd506 	br	24d8 <__smakebuf_r+0x90>
    2584:	80c00a17 	ldw	r3,40(r16)
    2588:	00800034 	movhi	r2,0
    258c:	10899f04 	addi	r2,r2,9852
    2590:	18bfcb1e 	bne	r3,r2,24c0 <__smakebuf_r+0x78>
    2594:	8080030b 	ldhu	r2,12(r16)
    2598:	00c10004 	movi	r3,1024
    259c:	1825883a 	mov	r18,r3
    25a0:	10c4b03a 	or	r2,r2,r3
    25a4:	8080030d 	sth	r2,12(r16)
    25a8:	80c01315 	stw	r3,76(r16)
    25ac:	003fca06 	br	24d8 <__smakebuf_r+0x90>
    25b0:	8100030b 	ldhu	r4,12(r16)
    25b4:	2080800c 	andi	r2,r4,512
    25b8:	103fb21e 	bne	r2,zero,2484 <__smakebuf_r+0x3c>
    25bc:	80c010c4 	addi	r3,r16,67
    25c0:	21000094 	ori	r4,r4,2
    25c4:	00800044 	movi	r2,1
    25c8:	80800515 	stw	r2,20(r16)
    25cc:	8100030d 	sth	r4,12(r16)
    25d0:	80c00415 	stw	r3,16(r16)
    25d4:	80c00015 	stw	r3,0(r16)
    25d8:	003faa06 	br	2484 <__smakebuf_r+0x3c>

000025dc <memset>:
    25dc:	008000c4 	movi	r2,3
    25e0:	29403fcc 	andi	r5,r5,255
    25e4:	2007883a 	mov	r3,r4
    25e8:	1180022e 	bgeu	r2,r6,25f4 <memset+0x18>
    25ec:	2084703a 	and	r2,r4,r2
    25f0:	10000826 	beq	r2,zero,2614 <memset+0x38>
    25f4:	30000526 	beq	r6,zero,260c <memset+0x30>
    25f8:	2805883a 	mov	r2,r5
    25fc:	30cd883a 	add	r6,r6,r3
    2600:	18800005 	stb	r2,0(r3)
    2604:	18c00044 	addi	r3,r3,1
    2608:	19bffd1e 	bne	r3,r6,2600 <memset+0x24>
    260c:	2005883a 	mov	r2,r4
    2610:	f800283a 	ret
    2614:	2804923a 	slli	r2,r5,8
    2618:	020003c4 	movi	r8,15
    261c:	200f883a 	mov	r7,r4
    2620:	2884b03a 	or	r2,r5,r2
    2624:	1006943a 	slli	r3,r2,16
    2628:	10c6b03a 	or	r3,r2,r3
    262c:	41800a2e 	bgeu	r8,r6,2658 <memset+0x7c>
    2630:	4005883a 	mov	r2,r8
    2634:	31bffc04 	addi	r6,r6,-16
    2638:	38c00015 	stw	r3,0(r7)
    263c:	38c00115 	stw	r3,4(r7)
    2640:	38c00215 	stw	r3,8(r7)
    2644:	38c00315 	stw	r3,12(r7)
    2648:	39c00404 	addi	r7,r7,16
    264c:	11bff936 	bltu	r2,r6,2634 <memset+0x58>
    2650:	008000c4 	movi	r2,3
    2654:	1180052e 	bgeu	r2,r6,266c <memset+0x90>
    2658:	31bfff04 	addi	r6,r6,-4
    265c:	008000c4 	movi	r2,3
    2660:	38c00015 	stw	r3,0(r7)
    2664:	39c00104 	addi	r7,r7,4
    2668:	11bffb36 	bltu	r2,r6,2658 <memset+0x7c>
    266c:	3807883a 	mov	r3,r7
    2670:	003fe006 	br	25f4 <memset+0x18>

00002674 <__sclose>:
    2674:	2940038f 	ldh	r5,14(r5)
    2678:	00028381 	jmpi	2838 <_close_r>

0000267c <__sseek>:
    267c:	defffe04 	addi	sp,sp,-8
    2680:	dc000015 	stw	r16,0(sp)
    2684:	2821883a 	mov	r16,r5
    2688:	2940038f 	ldh	r5,14(r5)
    268c:	dfc00115 	stw	ra,4(sp)
    2690:	0002ab00 	call	2ab0 <_lseek_r>
    2694:	1007883a 	mov	r3,r2
    2698:	00bfffc4 	movi	r2,-1
    269c:	18800926 	beq	r3,r2,26c4 <__sseek+0x48>
    26a0:	8080030b 	ldhu	r2,12(r16)
    26a4:	80c01415 	stw	r3,80(r16)
    26a8:	10840014 	ori	r2,r2,4096
    26ac:	8080030d 	sth	r2,12(r16)
    26b0:	1805883a 	mov	r2,r3
    26b4:	dfc00117 	ldw	ra,4(sp)
    26b8:	dc000017 	ldw	r16,0(sp)
    26bc:	dec00204 	addi	sp,sp,8
    26c0:	f800283a 	ret
    26c4:	8080030b 	ldhu	r2,12(r16)
    26c8:	10bbffcc 	andi	r2,r2,61439
    26cc:	8080030d 	sth	r2,12(r16)
    26d0:	1805883a 	mov	r2,r3
    26d4:	dfc00117 	ldw	ra,4(sp)
    26d8:	dc000017 	ldw	r16,0(sp)
    26dc:	dec00204 	addi	sp,sp,8
    26e0:	f800283a 	ret

000026e4 <__swrite>:
    26e4:	2880030b 	ldhu	r2,12(r5)
    26e8:	defffb04 	addi	sp,sp,-20
    26ec:	dcc00315 	stw	r19,12(sp)
    26f0:	1080400c 	andi	r2,r2,256
    26f4:	dc800215 	stw	r18,8(sp)
    26f8:	dc400115 	stw	r17,4(sp)
    26fc:	dc000015 	stw	r16,0(sp)
    2700:	3027883a 	mov	r19,r6
    2704:	3825883a 	mov	r18,r7
    2708:	dfc00415 	stw	ra,16(sp)
    270c:	2821883a 	mov	r16,r5
    2710:	000d883a 	mov	r6,zero
    2714:	01c00084 	movi	r7,2
    2718:	2023883a 	mov	r17,r4
    271c:	10000226 	beq	r2,zero,2728 <__swrite+0x44>
    2720:	2940038f 	ldh	r5,14(r5)
    2724:	0002ab00 	call	2ab0 <_lseek_r>
    2728:	8080030b 	ldhu	r2,12(r16)
    272c:	8140038f 	ldh	r5,14(r16)
    2730:	8809883a 	mov	r4,r17
    2734:	10bbffcc 	andi	r2,r2,61439
    2738:	980d883a 	mov	r6,r19
    273c:	900f883a 	mov	r7,r18
    2740:	8080030d 	sth	r2,12(r16)
    2744:	dfc00417 	ldw	ra,16(sp)
    2748:	dcc00317 	ldw	r19,12(sp)
    274c:	dc800217 	ldw	r18,8(sp)
    2750:	dc400117 	ldw	r17,4(sp)
    2754:	dc000017 	ldw	r16,0(sp)
    2758:	dec00504 	addi	sp,sp,20
    275c:	00027c01 	jmpi	27c0 <_write_r>

00002760 <__sread>:
    2760:	defffe04 	addi	sp,sp,-8
    2764:	dc000015 	stw	r16,0(sp)
    2768:	2821883a 	mov	r16,r5
    276c:	2940038f 	ldh	r5,14(r5)
    2770:	dfc00115 	stw	ra,4(sp)
    2774:	0002b280 	call	2b28 <_read_r>
    2778:	1007883a 	mov	r3,r2
    277c:	10000816 	blt	r2,zero,27a0 <__sread+0x40>
    2780:	80801417 	ldw	r2,80(r16)
    2784:	10c5883a 	add	r2,r2,r3
    2788:	80801415 	stw	r2,80(r16)
    278c:	1805883a 	mov	r2,r3
    2790:	dfc00117 	ldw	ra,4(sp)
    2794:	dc000017 	ldw	r16,0(sp)
    2798:	dec00204 	addi	sp,sp,8
    279c:	f800283a 	ret
    27a0:	8080030b 	ldhu	r2,12(r16)
    27a4:	10bbffcc 	andi	r2,r2,61439
    27a8:	8080030d 	sth	r2,12(r16)
    27ac:	1805883a 	mov	r2,r3
    27b0:	dfc00117 	ldw	ra,4(sp)
    27b4:	dc000017 	ldw	r16,0(sp)
    27b8:	dec00204 	addi	sp,sp,8
    27bc:	f800283a 	ret

000027c0 <_write_r>:
    27c0:	defffd04 	addi	sp,sp,-12
    27c4:	dc000015 	stw	r16,0(sp)
    27c8:	04000074 	movhi	r16,1
    27cc:	842c9704 	addi	r16,r16,-19876
    27d0:	dc400115 	stw	r17,4(sp)
    27d4:	80000015 	stw	zero,0(r16)
    27d8:	2023883a 	mov	r17,r4
    27dc:	2809883a 	mov	r4,r5
    27e0:	300b883a 	mov	r5,r6
    27e4:	380d883a 	mov	r6,r7
    27e8:	dfc00215 	stw	ra,8(sp)
    27ec:	00035000 	call	3500 <write>
    27f0:	1007883a 	mov	r3,r2
    27f4:	00bfffc4 	movi	r2,-1
    27f8:	18800626 	beq	r3,r2,2814 <_write_r+0x54>
    27fc:	1805883a 	mov	r2,r3
    2800:	dfc00217 	ldw	ra,8(sp)
    2804:	dc400117 	ldw	r17,4(sp)
    2808:	dc000017 	ldw	r16,0(sp)
    280c:	dec00304 	addi	sp,sp,12
    2810:	f800283a 	ret
    2814:	80800017 	ldw	r2,0(r16)
    2818:	103ff826 	beq	r2,zero,27fc <_write_r+0x3c>
    281c:	88800015 	stw	r2,0(r17)
    2820:	1805883a 	mov	r2,r3
    2824:	dfc00217 	ldw	ra,8(sp)
    2828:	dc400117 	ldw	r17,4(sp)
    282c:	dc000017 	ldw	r16,0(sp)
    2830:	dec00304 	addi	sp,sp,12
    2834:	f800283a 	ret

00002838 <_close_r>:
    2838:	defffd04 	addi	sp,sp,-12
    283c:	dc000015 	stw	r16,0(sp)
    2840:	04000074 	movhi	r16,1
    2844:	842c9704 	addi	r16,r16,-19876
    2848:	dc400115 	stw	r17,4(sp)
    284c:	80000015 	stw	zero,0(r16)
    2850:	2023883a 	mov	r17,r4
    2854:	2809883a 	mov	r4,r5
    2858:	dfc00215 	stw	ra,8(sp)
    285c:	0002ba00 	call	2ba0 <close>
    2860:	1007883a 	mov	r3,r2
    2864:	00bfffc4 	movi	r2,-1
    2868:	18800626 	beq	r3,r2,2884 <_close_r+0x4c>
    286c:	1805883a 	mov	r2,r3
    2870:	dfc00217 	ldw	ra,8(sp)
    2874:	dc400117 	ldw	r17,4(sp)
    2878:	dc000017 	ldw	r16,0(sp)
    287c:	dec00304 	addi	sp,sp,12
    2880:	f800283a 	ret
    2884:	80800017 	ldw	r2,0(r16)
    2888:	103ff826 	beq	r2,zero,286c <_close_r+0x34>
    288c:	88800015 	stw	r2,0(r17)
    2890:	1805883a 	mov	r2,r3
    2894:	dfc00217 	ldw	ra,8(sp)
    2898:	dc400117 	ldw	r17,4(sp)
    289c:	dc000017 	ldw	r16,0(sp)
    28a0:	dec00304 	addi	sp,sp,12
    28a4:	f800283a 	ret

000028a8 <_fclose_r>:
    28a8:	defffc04 	addi	sp,sp,-16
    28ac:	dc400115 	stw	r17,4(sp)
    28b0:	dc000015 	stw	r16,0(sp)
    28b4:	dfc00315 	stw	ra,12(sp)
    28b8:	dc800215 	stw	r18,8(sp)
    28bc:	2821883a 	mov	r16,r5
    28c0:	2023883a 	mov	r17,r4
    28c4:	28002926 	beq	r5,zero,296c <_fclose_r+0xc4>
    28c8:	0001c200 	call	1c20 <__sfp_lock_acquire>
    28cc:	88000226 	beq	r17,zero,28d8 <_fclose_r+0x30>
    28d0:	88800e17 	ldw	r2,56(r17)
    28d4:	10002d26 	beq	r2,zero,298c <_fclose_r+0xe4>
    28d8:	8080030f 	ldh	r2,12(r16)
    28dc:	10002226 	beq	r2,zero,2968 <_fclose_r+0xc0>
    28e0:	8809883a 	mov	r4,r17
    28e4:	800b883a 	mov	r5,r16
    28e8:	00019980 	call	1998 <_fflush_r>
    28ec:	1025883a 	mov	r18,r2
    28f0:	80800b17 	ldw	r2,44(r16)
    28f4:	10000426 	beq	r2,zero,2908 <_fclose_r+0x60>
    28f8:	81400717 	ldw	r5,28(r16)
    28fc:	8809883a 	mov	r4,r17
    2900:	103ee83a 	callr	r2
    2904:	10002a16 	blt	r2,zero,29b0 <_fclose_r+0x108>
    2908:	8080030b 	ldhu	r2,12(r16)
    290c:	1080200c 	andi	r2,r2,128
    2910:	1000231e 	bne	r2,zero,29a0 <_fclose_r+0xf8>
    2914:	81400c17 	ldw	r5,48(r16)
    2918:	28000526 	beq	r5,zero,2930 <_fclose_r+0x88>
    291c:	80801004 	addi	r2,r16,64
    2920:	28800226 	beq	r5,r2,292c <_fclose_r+0x84>
    2924:	8809883a 	mov	r4,r17
    2928:	0001fb40 	call	1fb4 <_free_r>
    292c:	80000c15 	stw	zero,48(r16)
    2930:	81401117 	ldw	r5,68(r16)
    2934:	28000326 	beq	r5,zero,2944 <_fclose_r+0x9c>
    2938:	8809883a 	mov	r4,r17
    293c:	0001fb40 	call	1fb4 <_free_r>
    2940:	80001115 	stw	zero,68(r16)
    2944:	8000030d 	sth	zero,12(r16)
    2948:	0001c240 	call	1c24 <__sfp_lock_release>
    294c:	9005883a 	mov	r2,r18
    2950:	dfc00317 	ldw	ra,12(sp)
    2954:	dc800217 	ldw	r18,8(sp)
    2958:	dc400117 	ldw	r17,4(sp)
    295c:	dc000017 	ldw	r16,0(sp)
    2960:	dec00404 	addi	sp,sp,16
    2964:	f800283a 	ret
    2968:	0001c240 	call	1c24 <__sfp_lock_release>
    296c:	0025883a 	mov	r18,zero
    2970:	9005883a 	mov	r2,r18
    2974:	dfc00317 	ldw	ra,12(sp)
    2978:	dc800217 	ldw	r18,8(sp)
    297c:	dc400117 	ldw	r17,4(sp)
    2980:	dc000017 	ldw	r16,0(sp)
    2984:	dec00404 	addi	sp,sp,16
    2988:	f800283a 	ret
    298c:	8809883a 	mov	r4,r17
    2990:	0001c300 	call	1c30 <__sinit>
    2994:	8080030f 	ldh	r2,12(r16)
    2998:	103fd11e 	bne	r2,zero,28e0 <_fclose_r+0x38>
    299c:	003ff206 	br	2968 <_fclose_r+0xc0>
    29a0:	81400417 	ldw	r5,16(r16)
    29a4:	8809883a 	mov	r4,r17
    29a8:	0001fb40 	call	1fb4 <_free_r>
    29ac:	003fd906 	br	2914 <_fclose_r+0x6c>
    29b0:	04bfffc4 	movi	r18,-1
    29b4:	003fd406 	br	2908 <_fclose_r+0x60>

000029b8 <fclose>:
    29b8:	00800074 	movhi	r2,1
    29bc:	10a50704 	addi	r2,r2,-27620
    29c0:	200b883a 	mov	r5,r4
    29c4:	11000017 	ldw	r4,0(r2)
    29c8:	00028a81 	jmpi	28a8 <_fclose_r>

000029cc <_fstat_r>:
    29cc:	defffd04 	addi	sp,sp,-12
    29d0:	dc000015 	stw	r16,0(sp)
    29d4:	04000074 	movhi	r16,1
    29d8:	842c9704 	addi	r16,r16,-19876
    29dc:	dc400115 	stw	r17,4(sp)
    29e0:	80000015 	stw	zero,0(r16)
    29e4:	2023883a 	mov	r17,r4
    29e8:	2809883a 	mov	r4,r5
    29ec:	300b883a 	mov	r5,r6
    29f0:	dfc00215 	stw	ra,8(sp)
    29f4:	0002d280 	call	2d28 <fstat>
    29f8:	1007883a 	mov	r3,r2
    29fc:	00bfffc4 	movi	r2,-1
    2a00:	18800626 	beq	r3,r2,2a1c <_fstat_r+0x50>
    2a04:	1805883a 	mov	r2,r3
    2a08:	dfc00217 	ldw	ra,8(sp)
    2a0c:	dc400117 	ldw	r17,4(sp)
    2a10:	dc000017 	ldw	r16,0(sp)
    2a14:	dec00304 	addi	sp,sp,12
    2a18:	f800283a 	ret
    2a1c:	80800017 	ldw	r2,0(r16)
    2a20:	103ff826 	beq	r2,zero,2a04 <_fstat_r+0x38>
    2a24:	88800015 	stw	r2,0(r17)
    2a28:	1805883a 	mov	r2,r3
    2a2c:	dfc00217 	ldw	ra,8(sp)
    2a30:	dc400117 	ldw	r17,4(sp)
    2a34:	dc000017 	ldw	r16,0(sp)
    2a38:	dec00304 	addi	sp,sp,12
    2a3c:	f800283a 	ret

00002a40 <_isatty_r>:
    2a40:	defffd04 	addi	sp,sp,-12
    2a44:	dc000015 	stw	r16,0(sp)
    2a48:	04000074 	movhi	r16,1
    2a4c:	842c9704 	addi	r16,r16,-19876
    2a50:	dc400115 	stw	r17,4(sp)
    2a54:	80000015 	stw	zero,0(r16)
    2a58:	2023883a 	mov	r17,r4
    2a5c:	2809883a 	mov	r4,r5
    2a60:	dfc00215 	stw	ra,8(sp)
    2a64:	0002e5c0 	call	2e5c <isatty>
    2a68:	1007883a 	mov	r3,r2
    2a6c:	00bfffc4 	movi	r2,-1
    2a70:	18800626 	beq	r3,r2,2a8c <_isatty_r+0x4c>
    2a74:	1805883a 	mov	r2,r3
    2a78:	dfc00217 	ldw	ra,8(sp)
    2a7c:	dc400117 	ldw	r17,4(sp)
    2a80:	dc000017 	ldw	r16,0(sp)
    2a84:	dec00304 	addi	sp,sp,12
    2a88:	f800283a 	ret
    2a8c:	80800017 	ldw	r2,0(r16)
    2a90:	103ff826 	beq	r2,zero,2a74 <_isatty_r+0x34>
    2a94:	88800015 	stw	r2,0(r17)
    2a98:	1805883a 	mov	r2,r3
    2a9c:	dfc00217 	ldw	ra,8(sp)
    2aa0:	dc400117 	ldw	r17,4(sp)
    2aa4:	dc000017 	ldw	r16,0(sp)
    2aa8:	dec00304 	addi	sp,sp,12
    2aac:	f800283a 	ret

00002ab0 <_lseek_r>:
    2ab0:	defffd04 	addi	sp,sp,-12
    2ab4:	dc000015 	stw	r16,0(sp)
    2ab8:	04000074 	movhi	r16,1
    2abc:	842c9704 	addi	r16,r16,-19876
    2ac0:	dc400115 	stw	r17,4(sp)
    2ac4:	80000015 	stw	zero,0(r16)
    2ac8:	2023883a 	mov	r17,r4
    2acc:	2809883a 	mov	r4,r5
    2ad0:	300b883a 	mov	r5,r6
    2ad4:	380d883a 	mov	r6,r7
    2ad8:	dfc00215 	stw	ra,8(sp)
    2adc:	00030680 	call	3068 <lseek>
    2ae0:	1007883a 	mov	r3,r2
    2ae4:	00bfffc4 	movi	r2,-1
    2ae8:	18800626 	beq	r3,r2,2b04 <_lseek_r+0x54>
    2aec:	1805883a 	mov	r2,r3
    2af0:	dfc00217 	ldw	ra,8(sp)
    2af4:	dc400117 	ldw	r17,4(sp)
    2af8:	dc000017 	ldw	r16,0(sp)
    2afc:	dec00304 	addi	sp,sp,12
    2b00:	f800283a 	ret
    2b04:	80800017 	ldw	r2,0(r16)
    2b08:	103ff826 	beq	r2,zero,2aec <_lseek_r+0x3c>
    2b0c:	88800015 	stw	r2,0(r17)
    2b10:	1805883a 	mov	r2,r3
    2b14:	dfc00217 	ldw	ra,8(sp)
    2b18:	dc400117 	ldw	r17,4(sp)
    2b1c:	dc000017 	ldw	r16,0(sp)
    2b20:	dec00304 	addi	sp,sp,12
    2b24:	f800283a 	ret

00002b28 <_read_r>:
    2b28:	defffd04 	addi	sp,sp,-12
    2b2c:	dc000015 	stw	r16,0(sp)
    2b30:	04000074 	movhi	r16,1
    2b34:	842c9704 	addi	r16,r16,-19876
    2b38:	dc400115 	stw	r17,4(sp)
    2b3c:	80000015 	stw	zero,0(r16)
    2b40:	2023883a 	mov	r17,r4
    2b44:	2809883a 	mov	r4,r5
    2b48:	300b883a 	mov	r5,r6
    2b4c:	380d883a 	mov	r6,r7
    2b50:	dfc00215 	stw	ra,8(sp)
    2b54:	00032640 	call	3264 <read>
    2b58:	1007883a 	mov	r3,r2
    2b5c:	00bfffc4 	movi	r2,-1
    2b60:	18800626 	beq	r3,r2,2b7c <_read_r+0x54>
    2b64:	1805883a 	mov	r2,r3
    2b68:	dfc00217 	ldw	ra,8(sp)
    2b6c:	dc400117 	ldw	r17,4(sp)
    2b70:	dc000017 	ldw	r16,0(sp)
    2b74:	dec00304 	addi	sp,sp,12
    2b78:	f800283a 	ret
    2b7c:	80800017 	ldw	r2,0(r16)
    2b80:	103ff826 	beq	r2,zero,2b64 <_read_r+0x3c>
    2b84:	88800015 	stw	r2,0(r17)
    2b88:	1805883a 	mov	r2,r3
    2b8c:	dfc00217 	ldw	ra,8(sp)
    2b90:	dc400117 	ldw	r17,4(sp)
    2b94:	dc000017 	ldw	r16,0(sp)
    2b98:	dec00304 	addi	sp,sp,12
    2b9c:	f800283a 	ret

00002ba0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    2ba0:	defff804 	addi	sp,sp,-32
    2ba4:	dfc00715 	stw	ra,28(sp)
    2ba8:	df000615 	stw	fp,24(sp)
    2bac:	df000604 	addi	fp,sp,24
    2bb0:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    2bb4:	e0bffc17 	ldw	r2,-16(fp)
    2bb8:	1004803a 	cmplt	r2,r2,zero
    2bbc:	1000081e 	bne	r2,zero,2be0 <close+0x40>
    2bc0:	e0bffc17 	ldw	r2,-16(fp)
    2bc4:	10800324 	muli	r2,r2,12
    2bc8:	1007883a 	mov	r3,r2
    2bcc:	00800034 	movhi	r2,0
    2bd0:	109fa204 	addi	r2,r2,32392
    2bd4:	1887883a 	add	r3,r3,r2
    2bd8:	e0ffff15 	stw	r3,-4(fp)
    2bdc:	00000106 	br	2be4 <close+0x44>
    2be0:	e03fff15 	stw	zero,-4(fp)
    2be4:	e0bfff17 	ldw	r2,-4(fp)
    2be8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    2bec:	e0bffb17 	ldw	r2,-20(fp)
    2bf0:	1005003a 	cmpeq	r2,r2,zero
    2bf4:	10001d1e 	bne	r2,zero,2c6c <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    2bf8:	e0bffb17 	ldw	r2,-20(fp)
    2bfc:	10800017 	ldw	r2,0(r2)
    2c00:	10800417 	ldw	r2,16(r2)
    2c04:	1005003a 	cmpeq	r2,r2,zero
    2c08:	1000071e 	bne	r2,zero,2c28 <close+0x88>
    2c0c:	e0bffb17 	ldw	r2,-20(fp)
    2c10:	10800017 	ldw	r2,0(r2)
    2c14:	10800417 	ldw	r2,16(r2)
    2c18:	e13ffb17 	ldw	r4,-20(fp)
    2c1c:	103ee83a 	callr	r2
    2c20:	e0bffe15 	stw	r2,-8(fp)
    2c24:	00000106 	br	2c2c <close+0x8c>
    2c28:	e03ffe15 	stw	zero,-8(fp)
    2c2c:	e0bffe17 	ldw	r2,-8(fp)
    2c30:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    2c34:	e13ffc17 	ldw	r4,-16(fp)
    2c38:	00033e40 	call	33e4 <alt_release_fd>
    if (rval < 0)
    2c3c:	e0bffa17 	ldw	r2,-24(fp)
    2c40:	1004403a 	cmpge	r2,r2,zero
    2c44:	1000071e 	bne	r2,zero,2c64 <close+0xc4>
    {
      ALT_ERRNO = -rval;
    2c48:	0002c9c0 	call	2c9c <alt_get_errno>
    2c4c:	e0fffa17 	ldw	r3,-24(fp)
    2c50:	00c7c83a 	sub	r3,zero,r3
    2c54:	10c00015 	stw	r3,0(r2)
      return -1;
    2c58:	00bfffc4 	movi	r2,-1
    2c5c:	e0bffd15 	stw	r2,-12(fp)
    2c60:	00000806 	br	2c84 <close+0xe4>
    }
    return 0;
    2c64:	e03ffd15 	stw	zero,-12(fp)
    2c68:	00000606 	br	2c84 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2c6c:	0002c9c0 	call	2c9c <alt_get_errno>
    2c70:	1007883a 	mov	r3,r2
    2c74:	00801444 	movi	r2,81
    2c78:	18800015 	stw	r2,0(r3)
    return -1;
    2c7c:	00bfffc4 	movi	r2,-1
    2c80:	e0bffd15 	stw	r2,-12(fp)
    2c84:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    2c88:	e037883a 	mov	sp,fp
    2c8c:	dfc00117 	ldw	ra,4(sp)
    2c90:	df000017 	ldw	fp,0(sp)
    2c94:	dec00204 	addi	sp,sp,8
    2c98:	f800283a 	ret

00002c9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2c9c:	defffd04 	addi	sp,sp,-12
    2ca0:	dfc00215 	stw	ra,8(sp)
    2ca4:	df000115 	stw	fp,4(sp)
    2ca8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    2cac:	00800074 	movhi	r2,1
    2cb0:	10a51004 	addi	r2,r2,-27584
    2cb4:	10800017 	ldw	r2,0(r2)
    2cb8:	1005003a 	cmpeq	r2,r2,zero
    2cbc:	1000061e 	bne	r2,zero,2cd8 <alt_get_errno+0x3c>
    2cc0:	00800074 	movhi	r2,1
    2cc4:	10a51004 	addi	r2,r2,-27584
    2cc8:	10800017 	ldw	r2,0(r2)
    2ccc:	103ee83a 	callr	r2
    2cd0:	e0bfff15 	stw	r2,-4(fp)
    2cd4:	00000306 	br	2ce4 <alt_get_errno+0x48>
    2cd8:	00800074 	movhi	r2,1
    2cdc:	10ac9704 	addi	r2,r2,-19876
    2ce0:	e0bfff15 	stw	r2,-4(fp)
    2ce4:	e0bfff17 	ldw	r2,-4(fp)
}
    2ce8:	e037883a 	mov	sp,fp
    2cec:	dfc00117 	ldw	ra,4(sp)
    2cf0:	df000017 	ldw	fp,0(sp)
    2cf4:	dec00204 	addi	sp,sp,8
    2cf8:	f800283a 	ret

00002cfc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    2cfc:	defffc04 	addi	sp,sp,-16
    2d00:	df000315 	stw	fp,12(sp)
    2d04:	df000304 	addi	fp,sp,12
    2d08:	e13ffd15 	stw	r4,-12(fp)
    2d0c:	e17ffe15 	stw	r5,-8(fp)
    2d10:	e1bfff15 	stw	r6,-4(fp)
  return len;
    2d14:	e0bfff17 	ldw	r2,-4(fp)
}
    2d18:	e037883a 	mov	sp,fp
    2d1c:	df000017 	ldw	fp,0(sp)
    2d20:	dec00104 	addi	sp,sp,4
    2d24:	f800283a 	ret

00002d28 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    2d28:	defff904 	addi	sp,sp,-28
    2d2c:	dfc00615 	stw	ra,24(sp)
    2d30:	df000515 	stw	fp,20(sp)
    2d34:	df000504 	addi	fp,sp,20
    2d38:	e13ffc15 	stw	r4,-16(fp)
    2d3c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    2d40:	e0bffc17 	ldw	r2,-16(fp)
    2d44:	1004803a 	cmplt	r2,r2,zero
    2d48:	1000081e 	bne	r2,zero,2d6c <fstat+0x44>
    2d4c:	e0bffc17 	ldw	r2,-16(fp)
    2d50:	10800324 	muli	r2,r2,12
    2d54:	1007883a 	mov	r3,r2
    2d58:	00800034 	movhi	r2,0
    2d5c:	109fa204 	addi	r2,r2,32392
    2d60:	1887883a 	add	r3,r3,r2
    2d64:	e0ffff15 	stw	r3,-4(fp)
    2d68:	00000106 	br	2d70 <fstat+0x48>
    2d6c:	e03fff15 	stw	zero,-4(fp)
    2d70:	e0bfff17 	ldw	r2,-4(fp)
    2d74:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    2d78:	e0bffb17 	ldw	r2,-20(fp)
    2d7c:	1005003a 	cmpeq	r2,r2,zero
    2d80:	1000121e 	bne	r2,zero,2dcc <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    2d84:	e0bffb17 	ldw	r2,-20(fp)
    2d88:	10800017 	ldw	r2,0(r2)
    2d8c:	10800817 	ldw	r2,32(r2)
    2d90:	1005003a 	cmpeq	r2,r2,zero
    2d94:	1000081e 	bne	r2,zero,2db8 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    2d98:	e0bffb17 	ldw	r2,-20(fp)
    2d9c:	10800017 	ldw	r2,0(r2)
    2da0:	10800817 	ldw	r2,32(r2)
    2da4:	e13ffb17 	ldw	r4,-20(fp)
    2da8:	e17ffd17 	ldw	r5,-12(fp)
    2dac:	103ee83a 	callr	r2
    2db0:	e0bffe15 	stw	r2,-8(fp)
    2db4:	00000b06 	br	2de4 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    2db8:	e0fffd17 	ldw	r3,-12(fp)
    2dbc:	00880004 	movi	r2,8192
    2dc0:	18800115 	stw	r2,4(r3)
      return 0;
    2dc4:	e03ffe15 	stw	zero,-8(fp)
    2dc8:	00000606 	br	2de4 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2dcc:	0002dfc0 	call	2dfc <alt_get_errno>
    2dd0:	1007883a 	mov	r3,r2
    2dd4:	00801444 	movi	r2,81
    2dd8:	18800015 	stw	r2,0(r3)
    return -1;
    2ddc:	00bfffc4 	movi	r2,-1
    2de0:	e0bffe15 	stw	r2,-8(fp)
    2de4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    2de8:	e037883a 	mov	sp,fp
    2dec:	dfc00117 	ldw	ra,4(sp)
    2df0:	df000017 	ldw	fp,0(sp)
    2df4:	dec00204 	addi	sp,sp,8
    2df8:	f800283a 	ret

00002dfc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2dfc:	defffd04 	addi	sp,sp,-12
    2e00:	dfc00215 	stw	ra,8(sp)
    2e04:	df000115 	stw	fp,4(sp)
    2e08:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    2e0c:	00800074 	movhi	r2,1
    2e10:	10a51004 	addi	r2,r2,-27584
    2e14:	10800017 	ldw	r2,0(r2)
    2e18:	1005003a 	cmpeq	r2,r2,zero
    2e1c:	1000061e 	bne	r2,zero,2e38 <alt_get_errno+0x3c>
    2e20:	00800074 	movhi	r2,1
    2e24:	10a51004 	addi	r2,r2,-27584
    2e28:	10800017 	ldw	r2,0(r2)
    2e2c:	103ee83a 	callr	r2
    2e30:	e0bfff15 	stw	r2,-4(fp)
    2e34:	00000306 	br	2e44 <alt_get_errno+0x48>
    2e38:	00800074 	movhi	r2,1
    2e3c:	10ac9704 	addi	r2,r2,-19876
    2e40:	e0bfff15 	stw	r2,-4(fp)
    2e44:	e0bfff17 	ldw	r2,-4(fp)
}
    2e48:	e037883a 	mov	sp,fp
    2e4c:	dfc00117 	ldw	ra,4(sp)
    2e50:	df000017 	ldw	fp,0(sp)
    2e54:	dec00204 	addi	sp,sp,8
    2e58:	f800283a 	ret

00002e5c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    2e5c:	deffeb04 	addi	sp,sp,-84
    2e60:	dfc01415 	stw	ra,80(sp)
    2e64:	df001315 	stw	fp,76(sp)
    2e68:	df001304 	addi	fp,sp,76
    2e6c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    2e70:	e0bffd17 	ldw	r2,-12(fp)
    2e74:	1004803a 	cmplt	r2,r2,zero
    2e78:	1000081e 	bne	r2,zero,2e9c <isatty+0x40>
    2e7c:	e0bffd17 	ldw	r2,-12(fp)
    2e80:	10800324 	muli	r2,r2,12
    2e84:	1007883a 	mov	r3,r2
    2e88:	00800034 	movhi	r2,0
    2e8c:	109fa204 	addi	r2,r2,32392
    2e90:	1887883a 	add	r3,r3,r2
    2e94:	e0ffff15 	stw	r3,-4(fp)
    2e98:	00000106 	br	2ea0 <isatty+0x44>
    2e9c:	e03fff15 	stw	zero,-4(fp)
    2ea0:	e0bfff17 	ldw	r2,-4(fp)
    2ea4:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    2ea8:	e0bfed17 	ldw	r2,-76(fp)
    2eac:	1005003a 	cmpeq	r2,r2,zero
    2eb0:	10000f1e 	bne	r2,zero,2ef0 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    2eb4:	e0bfed17 	ldw	r2,-76(fp)
    2eb8:	10800017 	ldw	r2,0(r2)
    2ebc:	10800817 	ldw	r2,32(r2)
    2ec0:	1004c03a 	cmpne	r2,r2,zero
    2ec4:	1000031e 	bne	r2,zero,2ed4 <isatty+0x78>
    {
      return 1;
    2ec8:	00800044 	movi	r2,1
    2ecc:	e0bffe15 	stw	r2,-8(fp)
    2ed0:	00000c06 	br	2f04 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    2ed4:	e17fee04 	addi	r5,fp,-72
    2ed8:	e13ffd17 	ldw	r4,-12(fp)
    2edc:	0002d280 	call	2d28 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    2ee0:	e0bfef17 	ldw	r2,-68(fp)
    2ee4:	10880020 	cmpeqi	r2,r2,8192
    2ee8:	e0bffe15 	stw	r2,-8(fp)
    2eec:	00000506 	br	2f04 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2ef0:	0002f1c0 	call	2f1c <alt_get_errno>
    2ef4:	1007883a 	mov	r3,r2
    2ef8:	00801444 	movi	r2,81
    2efc:	18800015 	stw	r2,0(r3)
    return 0;
    2f00:	e03ffe15 	stw	zero,-8(fp)
    2f04:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    2f08:	e037883a 	mov	sp,fp
    2f0c:	dfc00117 	ldw	ra,4(sp)
    2f10:	df000017 	ldw	fp,0(sp)
    2f14:	dec00204 	addi	sp,sp,8
    2f18:	f800283a 	ret

00002f1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2f1c:	defffd04 	addi	sp,sp,-12
    2f20:	dfc00215 	stw	ra,8(sp)
    2f24:	df000115 	stw	fp,4(sp)
    2f28:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    2f2c:	00800074 	movhi	r2,1
    2f30:	10a51004 	addi	r2,r2,-27584
    2f34:	10800017 	ldw	r2,0(r2)
    2f38:	1005003a 	cmpeq	r2,r2,zero
    2f3c:	1000061e 	bne	r2,zero,2f58 <alt_get_errno+0x3c>
    2f40:	00800074 	movhi	r2,1
    2f44:	10a51004 	addi	r2,r2,-27584
    2f48:	10800017 	ldw	r2,0(r2)
    2f4c:	103ee83a 	callr	r2
    2f50:	e0bfff15 	stw	r2,-4(fp)
    2f54:	00000306 	br	2f64 <alt_get_errno+0x48>
    2f58:	00800074 	movhi	r2,1
    2f5c:	10ac9704 	addi	r2,r2,-19876
    2f60:	e0bfff15 	stw	r2,-4(fp)
    2f64:	e0bfff17 	ldw	r2,-4(fp)
}
    2f68:	e037883a 	mov	sp,fp
    2f6c:	dfc00117 	ldw	ra,4(sp)
    2f70:	df000017 	ldw	fp,0(sp)
    2f74:	dec00204 	addi	sp,sp,8
    2f78:	f800283a 	ret

00002f7c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    2f7c:	defffe04 	addi	sp,sp,-8
    2f80:	dfc00115 	stw	ra,4(sp)
    2f84:	df000015 	stw	fp,0(sp)
    2f88:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    2f8c:	01000074 	movhi	r4,1
    2f90:	21251504 	addi	r4,r4,-27564
    2f94:	01400034 	movhi	r5,0
    2f98:	295d9604 	addi	r5,r5,30296
    2f9c:	01800074 	movhi	r6,1
    2fa0:	31a51504 	addi	r6,r6,-27564
    2fa4:	0002ffc0 	call	2ffc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    2fa8:	01000034 	movhi	r4,0
    2fac:	21000804 	addi	r4,r4,32
    2fb0:	01400034 	movhi	r5,0
    2fb4:	29400804 	addi	r5,r5,32
    2fb8:	01800034 	movhi	r6,0
    2fbc:	31806e04 	addi	r6,r6,440
    2fc0:	0002ffc0 	call	2ffc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    2fc4:	01000034 	movhi	r4,0
    2fc8:	211d2604 	addi	r4,r4,29848
    2fcc:	01400034 	movhi	r5,0
    2fd0:	295d2604 	addi	r5,r5,29848
    2fd4:	01800034 	movhi	r6,0
    2fd8:	319d9604 	addi	r6,r6,30296
    2fdc:	0002ffc0 	call	2ffc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    2fe0:	00061cc0 	call	61cc <alt_dcache_flush_all>
  alt_icache_flush_all();
    2fe4:	00064580 	call	6458 <alt_icache_flush_all>
}
    2fe8:	e037883a 	mov	sp,fp
    2fec:	dfc00117 	ldw	ra,4(sp)
    2ff0:	df000017 	ldw	fp,0(sp)
    2ff4:	dec00204 	addi	sp,sp,8
    2ff8:	f800283a 	ret

00002ffc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    2ffc:	defffc04 	addi	sp,sp,-16
    3000:	df000315 	stw	fp,12(sp)
    3004:	df000304 	addi	fp,sp,12
    3008:	e13ffd15 	stw	r4,-12(fp)
    300c:	e17ffe15 	stw	r5,-8(fp)
    3010:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    3014:	e0fffe17 	ldw	r3,-8(fp)
    3018:	e0bffd17 	ldw	r2,-12(fp)
    301c:	18800e26 	beq	r3,r2,3058 <alt_load_section+0x5c>
  {
    while( to != end )
    3020:	00000a06 	br	304c <alt_load_section+0x50>
    {
      *to++ = *from++;
    3024:	e0bffd17 	ldw	r2,-12(fp)
    3028:	10c00017 	ldw	r3,0(r2)
    302c:	e0bffe17 	ldw	r2,-8(fp)
    3030:	10c00015 	stw	r3,0(r2)
    3034:	e0bffe17 	ldw	r2,-8(fp)
    3038:	10800104 	addi	r2,r2,4
    303c:	e0bffe15 	stw	r2,-8(fp)
    3040:	e0bffd17 	ldw	r2,-12(fp)
    3044:	10800104 	addi	r2,r2,4
    3048:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    304c:	e0fffe17 	ldw	r3,-8(fp)
    3050:	e0bfff17 	ldw	r2,-4(fp)
    3054:	18bff31e 	bne	r3,r2,3024 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    3058:	e037883a 	mov	sp,fp
    305c:	df000017 	ldw	fp,0(sp)
    3060:	dec00104 	addi	sp,sp,4
    3064:	f800283a 	ret

00003068 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    3068:	defff804 	addi	sp,sp,-32
    306c:	dfc00715 	stw	ra,28(sp)
    3070:	df000615 	stw	fp,24(sp)
    3074:	df000604 	addi	fp,sp,24
    3078:	e13ffc15 	stw	r4,-16(fp)
    307c:	e17ffd15 	stw	r5,-12(fp)
    3080:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    3084:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3088:	e0bffc17 	ldw	r2,-16(fp)
    308c:	1004803a 	cmplt	r2,r2,zero
    3090:	1000081e 	bne	r2,zero,30b4 <lseek+0x4c>
    3094:	e0bffc17 	ldw	r2,-16(fp)
    3098:	10800324 	muli	r2,r2,12
    309c:	1007883a 	mov	r3,r2
    30a0:	00800034 	movhi	r2,0
    30a4:	109fa204 	addi	r2,r2,32392
    30a8:	1887883a 	add	r3,r3,r2
    30ac:	e0ffff15 	stw	r3,-4(fp)
    30b0:	00000106 	br	30b8 <lseek+0x50>
    30b4:	e03fff15 	stw	zero,-4(fp)
    30b8:	e0bfff17 	ldw	r2,-4(fp)
    30bc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    30c0:	e0bffb17 	ldw	r2,-20(fp)
    30c4:	1005003a 	cmpeq	r2,r2,zero
    30c8:	1000111e 	bne	r2,zero,3110 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    30cc:	e0bffb17 	ldw	r2,-20(fp)
    30d0:	10800017 	ldw	r2,0(r2)
    30d4:	10800717 	ldw	r2,28(r2)
    30d8:	1005003a 	cmpeq	r2,r2,zero
    30dc:	1000091e 	bne	r2,zero,3104 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    30e0:	e0bffb17 	ldw	r2,-20(fp)
    30e4:	10800017 	ldw	r2,0(r2)
    30e8:	10800717 	ldw	r2,28(r2)
    30ec:	e13ffb17 	ldw	r4,-20(fp)
    30f0:	e17ffd17 	ldw	r5,-12(fp)
    30f4:	e1bffe17 	ldw	r6,-8(fp)
    30f8:	103ee83a 	callr	r2
    30fc:	e0bffa15 	stw	r2,-24(fp)
    3100:	00000506 	br	3118 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    3104:	00bfde84 	movi	r2,-134
    3108:	e0bffa15 	stw	r2,-24(fp)
    310c:	00000206 	br	3118 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    3110:	00bfebc4 	movi	r2,-81
    3114:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    3118:	e0bffa17 	ldw	r2,-24(fp)
    311c:	1004403a 	cmpge	r2,r2,zero
    3120:	1000071e 	bne	r2,zero,3140 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    3124:	00031580 	call	3158 <alt_get_errno>
    3128:	1007883a 	mov	r3,r2
    312c:	e0bffa17 	ldw	r2,-24(fp)
    3130:	0085c83a 	sub	r2,zero,r2
    3134:	18800015 	stw	r2,0(r3)
    rc = -1;
    3138:	00bfffc4 	movi	r2,-1
    313c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    3140:	e0bffa17 	ldw	r2,-24(fp)
}
    3144:	e037883a 	mov	sp,fp
    3148:	dfc00117 	ldw	ra,4(sp)
    314c:	df000017 	ldw	fp,0(sp)
    3150:	dec00204 	addi	sp,sp,8
    3154:	f800283a 	ret

00003158 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3158:	defffd04 	addi	sp,sp,-12
    315c:	dfc00215 	stw	ra,8(sp)
    3160:	df000115 	stw	fp,4(sp)
    3164:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    3168:	00800074 	movhi	r2,1
    316c:	10a51004 	addi	r2,r2,-27584
    3170:	10800017 	ldw	r2,0(r2)
    3174:	1005003a 	cmpeq	r2,r2,zero
    3178:	1000061e 	bne	r2,zero,3194 <alt_get_errno+0x3c>
    317c:	00800074 	movhi	r2,1
    3180:	10a51004 	addi	r2,r2,-27584
    3184:	10800017 	ldw	r2,0(r2)
    3188:	103ee83a 	callr	r2
    318c:	e0bfff15 	stw	r2,-4(fp)
    3190:	00000306 	br	31a0 <alt_get_errno+0x48>
    3194:	00800074 	movhi	r2,1
    3198:	10ac9704 	addi	r2,r2,-19876
    319c:	e0bfff15 	stw	r2,-4(fp)
    31a0:	e0bfff17 	ldw	r2,-4(fp)
}
    31a4:	e037883a 	mov	sp,fp
    31a8:	dfc00117 	ldw	ra,4(sp)
    31ac:	df000017 	ldw	fp,0(sp)
    31b0:	dec00204 	addi	sp,sp,8
    31b4:	f800283a 	ret

000031b8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    31b8:	defffd04 	addi	sp,sp,-12
    31bc:	dfc00215 	stw	ra,8(sp)
    31c0:	df000115 	stw	fp,4(sp)
    31c4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    31c8:	0009883a 	mov	r4,zero
    31cc:	00036800 	call	3680 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    31d0:	00036b40 	call	36b4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    31d4:	01000034 	movhi	r4,0
    31d8:	211d2c04 	addi	r4,r4,29872
    31dc:	01400034 	movhi	r5,0
    31e0:	295d2c04 	addi	r5,r5,29872
    31e4:	01800034 	movhi	r6,0
    31e8:	319d2c04 	addi	r6,r6,29872
    31ec:	000654c0 	call	654c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    31f0:	00062fc0 	call	62fc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    31f4:	01000034 	movhi	r4,0
    31f8:	2118d804 	addi	r4,r4,25440
    31fc:	0006fd00 	call	6fd0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    3200:	d1279117 	ldw	r4,-25020(gp)
    3204:	d1679217 	ldw	r5,-25016(gp)
    3208:	d1a79317 	ldw	r6,-25012(gp)
    320c:	00001f40 	call	1f4 <main>
    3210:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    3214:	01000044 	movi	r4,1
    3218:	0002ba00 	call	2ba0 <close>
  exit (result);
    321c:	e13fff17 	ldw	r4,-4(fp)
    3220:	0006fe40 	call	6fe4 <exit>

00003224 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    3224:	defffe04 	addi	sp,sp,-8
    3228:	df000115 	stw	fp,4(sp)
    322c:	df000104 	addi	fp,sp,4
    3230:	e13fff15 	stw	r4,-4(fp)
}
    3234:	e037883a 	mov	sp,fp
    3238:	df000017 	ldw	fp,0(sp)
    323c:	dec00104 	addi	sp,sp,4
    3240:	f800283a 	ret

00003244 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    3244:	defffe04 	addi	sp,sp,-8
    3248:	df000115 	stw	fp,4(sp)
    324c:	df000104 	addi	fp,sp,4
    3250:	e13fff15 	stw	r4,-4(fp)
}
    3254:	e037883a 	mov	sp,fp
    3258:	df000017 	ldw	fp,0(sp)
    325c:	dec00104 	addi	sp,sp,4
    3260:	f800283a 	ret

00003264 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    3264:	defff704 	addi	sp,sp,-36
    3268:	dfc00815 	stw	ra,32(sp)
    326c:	df000715 	stw	fp,28(sp)
    3270:	df000704 	addi	fp,sp,28
    3274:	e13ffb15 	stw	r4,-20(fp)
    3278:	e17ffc15 	stw	r5,-16(fp)
    327c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3280:	e0bffb17 	ldw	r2,-20(fp)
    3284:	1004803a 	cmplt	r2,r2,zero
    3288:	1000081e 	bne	r2,zero,32ac <read+0x48>
    328c:	e0bffb17 	ldw	r2,-20(fp)
    3290:	10800324 	muli	r2,r2,12
    3294:	1007883a 	mov	r3,r2
    3298:	00800034 	movhi	r2,0
    329c:	109fa204 	addi	r2,r2,32392
    32a0:	1887883a 	add	r3,r3,r2
    32a4:	e0ffff15 	stw	r3,-4(fp)
    32a8:	00000106 	br	32b0 <read+0x4c>
    32ac:	e03fff15 	stw	zero,-4(fp)
    32b0:	e0bfff17 	ldw	r2,-4(fp)
    32b4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    32b8:	e0bffa17 	ldw	r2,-24(fp)
    32bc:	1005003a 	cmpeq	r2,r2,zero
    32c0:	1000241e 	bne	r2,zero,3354 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    32c4:	e0bffa17 	ldw	r2,-24(fp)
    32c8:	10800217 	ldw	r2,8(r2)
    32cc:	108000cc 	andi	r2,r2,3
    32d0:	10800060 	cmpeqi	r2,r2,1
    32d4:	10001a1e 	bne	r2,zero,3340 <read+0xdc>
    32d8:	e0bffa17 	ldw	r2,-24(fp)
    32dc:	10800017 	ldw	r2,0(r2)
    32e0:	10800517 	ldw	r2,20(r2)
    32e4:	1005003a 	cmpeq	r2,r2,zero
    32e8:	1000151e 	bne	r2,zero,3340 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    32ec:	e0bffa17 	ldw	r2,-24(fp)
    32f0:	10800017 	ldw	r2,0(r2)
    32f4:	10800517 	ldw	r2,20(r2)
    32f8:	e17ffc17 	ldw	r5,-16(fp)
    32fc:	e1bffd17 	ldw	r6,-12(fp)
    3300:	e13ffa17 	ldw	r4,-24(fp)
    3304:	103ee83a 	callr	r2
    3308:	e0bff915 	stw	r2,-28(fp)
    330c:	e0bff917 	ldw	r2,-28(fp)
    3310:	1004403a 	cmpge	r2,r2,zero
    3314:	1000071e 	bne	r2,zero,3334 <read+0xd0>
        {
          ALT_ERRNO = -rval;
    3318:	00033840 	call	3384 <alt_get_errno>
    331c:	e0fff917 	ldw	r3,-28(fp)
    3320:	00c7c83a 	sub	r3,zero,r3
    3324:	10c00015 	stw	r3,0(r2)
          return -1;
    3328:	00bfffc4 	movi	r2,-1
    332c:	e0bffe15 	stw	r2,-8(fp)
    3330:	00000e06 	br	336c <read+0x108>
        }
        return rval;
    3334:	e0bff917 	ldw	r2,-28(fp)
    3338:	e0bffe15 	stw	r2,-8(fp)
    333c:	00000b06 	br	336c <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    3340:	00033840 	call	3384 <alt_get_errno>
    3344:	1007883a 	mov	r3,r2
    3348:	00800344 	movi	r2,13
    334c:	18800015 	stw	r2,0(r3)
    3350:	00000406 	br	3364 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    3354:	00033840 	call	3384 <alt_get_errno>
    3358:	1007883a 	mov	r3,r2
    335c:	00801444 	movi	r2,81
    3360:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3364:	00bfffc4 	movi	r2,-1
    3368:	e0bffe15 	stw	r2,-8(fp)
    336c:	e0bffe17 	ldw	r2,-8(fp)
}
    3370:	e037883a 	mov	sp,fp
    3374:	dfc00117 	ldw	ra,4(sp)
    3378:	df000017 	ldw	fp,0(sp)
    337c:	dec00204 	addi	sp,sp,8
    3380:	f800283a 	ret

00003384 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3384:	defffd04 	addi	sp,sp,-12
    3388:	dfc00215 	stw	ra,8(sp)
    338c:	df000115 	stw	fp,4(sp)
    3390:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    3394:	00800074 	movhi	r2,1
    3398:	10a51004 	addi	r2,r2,-27584
    339c:	10800017 	ldw	r2,0(r2)
    33a0:	1005003a 	cmpeq	r2,r2,zero
    33a4:	1000061e 	bne	r2,zero,33c0 <alt_get_errno+0x3c>
    33a8:	00800074 	movhi	r2,1
    33ac:	10a51004 	addi	r2,r2,-27584
    33b0:	10800017 	ldw	r2,0(r2)
    33b4:	103ee83a 	callr	r2
    33b8:	e0bfff15 	stw	r2,-4(fp)
    33bc:	00000306 	br	33cc <alt_get_errno+0x48>
    33c0:	00800074 	movhi	r2,1
    33c4:	10ac9704 	addi	r2,r2,-19876
    33c8:	e0bfff15 	stw	r2,-4(fp)
    33cc:	e0bfff17 	ldw	r2,-4(fp)
}
    33d0:	e037883a 	mov	sp,fp
    33d4:	dfc00117 	ldw	ra,4(sp)
    33d8:	df000017 	ldw	fp,0(sp)
    33dc:	dec00204 	addi	sp,sp,8
    33e0:	f800283a 	ret

000033e4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    33e4:	defffe04 	addi	sp,sp,-8
    33e8:	df000115 	stw	fp,4(sp)
    33ec:	df000104 	addi	fp,sp,4
    33f0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    33f4:	e0bfff17 	ldw	r2,-4(fp)
    33f8:	108000d0 	cmplti	r2,r2,3
    33fc:	10000d1e 	bne	r2,zero,3434 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    3400:	e0bfff17 	ldw	r2,-4(fp)
    3404:	00c00034 	movhi	r3,0
    3408:	18dfa204 	addi	r3,r3,32392
    340c:	10800324 	muli	r2,r2,12
    3410:	10c5883a 	add	r2,r2,r3
    3414:	10800204 	addi	r2,r2,8
    3418:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    341c:	e0bfff17 	ldw	r2,-4(fp)
    3420:	00c00034 	movhi	r3,0
    3424:	18dfa204 	addi	r3,r3,32392
    3428:	10800324 	muli	r2,r2,12
    342c:	10c5883a 	add	r2,r2,r3
    3430:	10000015 	stw	zero,0(r2)
  }
}
    3434:	e037883a 	mov	sp,fp
    3438:	df000017 	ldw	fp,0(sp)
    343c:	dec00104 	addi	sp,sp,4
    3440:	f800283a 	ret

00003444 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    3444:	defff804 	addi	sp,sp,-32
    3448:	df000715 	stw	fp,28(sp)
    344c:	df000704 	addi	fp,sp,28
    3450:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3454:	0005303a 	rdctl	r2,status
    3458:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    345c:	e0fffb17 	ldw	r3,-20(fp)
    3460:	00bfff84 	movi	r2,-2
    3464:	1884703a 	and	r2,r3,r2
    3468:	1001703a 	wrctl	status,r2
  
  return context;
    346c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    3470:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    3474:	d0a00a17 	ldw	r2,-32728(gp)
    3478:	10c000c4 	addi	r3,r2,3
    347c:	00bfff04 	movi	r2,-4
    3480:	1884703a 	and	r2,r3,r2
    3484:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    3488:	d0e00a17 	ldw	r3,-32728(gp)
    348c:	e0bffe17 	ldw	r2,-8(fp)
    3490:	1887883a 	add	r3,r3,r2
    3494:	00802034 	movhi	r2,128
    3498:	10800004 	addi	r2,r2,0
    349c:	10c0072e 	bgeu	r2,r3,34bc <sbrk+0x78>
    34a0:	e0bffd17 	ldw	r2,-12(fp)
    34a4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    34a8:	e0bffa17 	ldw	r2,-24(fp)
    34ac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    34b0:	00bfffc4 	movi	r2,-1
    34b4:	e0bfff15 	stw	r2,-4(fp)
    34b8:	00000c06 	br	34ec <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    34bc:	d0a00a17 	ldw	r2,-32728(gp)
    34c0:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    34c4:	d0e00a17 	ldw	r3,-32728(gp)
    34c8:	e0bffe17 	ldw	r2,-8(fp)
    34cc:	1885883a 	add	r2,r3,r2
    34d0:	d0a00a15 	stw	r2,-32728(gp)
    34d4:	e0bffd17 	ldw	r2,-12(fp)
    34d8:	e0bff915 	stw	r2,-28(fp)
    34dc:	e0bff917 	ldw	r2,-28(fp)
    34e0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    34e4:	e0bffc17 	ldw	r2,-16(fp)
    34e8:	e0bfff15 	stw	r2,-4(fp)
    34ec:	e0bfff17 	ldw	r2,-4(fp)
} 
    34f0:	e037883a 	mov	sp,fp
    34f4:	df000017 	ldw	fp,0(sp)
    34f8:	dec00104 	addi	sp,sp,4
    34fc:	f800283a 	ret

00003500 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    3500:	defff704 	addi	sp,sp,-36
    3504:	dfc00815 	stw	ra,32(sp)
    3508:	df000715 	stw	fp,28(sp)
    350c:	df000704 	addi	fp,sp,28
    3510:	e13ffb15 	stw	r4,-20(fp)
    3514:	e17ffc15 	stw	r5,-16(fp)
    3518:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    351c:	e0bffb17 	ldw	r2,-20(fp)
    3520:	1004803a 	cmplt	r2,r2,zero
    3524:	1000081e 	bne	r2,zero,3548 <write+0x48>
    3528:	e0bffb17 	ldw	r2,-20(fp)
    352c:	10800324 	muli	r2,r2,12
    3530:	1007883a 	mov	r3,r2
    3534:	00800034 	movhi	r2,0
    3538:	109fa204 	addi	r2,r2,32392
    353c:	1887883a 	add	r3,r3,r2
    3540:	e0ffff15 	stw	r3,-4(fp)
    3544:	00000106 	br	354c <write+0x4c>
    3548:	e03fff15 	stw	zero,-4(fp)
    354c:	e0bfff17 	ldw	r2,-4(fp)
    3550:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    3554:	e0bffa17 	ldw	r2,-24(fp)
    3558:	1005003a 	cmpeq	r2,r2,zero
    355c:	1000241e 	bne	r2,zero,35f0 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    3560:	e0bffa17 	ldw	r2,-24(fp)
    3564:	10800217 	ldw	r2,8(r2)
    3568:	108000cc 	andi	r2,r2,3
    356c:	1005003a 	cmpeq	r2,r2,zero
    3570:	10001a1e 	bne	r2,zero,35dc <write+0xdc>
    3574:	e0bffa17 	ldw	r2,-24(fp)
    3578:	10800017 	ldw	r2,0(r2)
    357c:	10800617 	ldw	r2,24(r2)
    3580:	1005003a 	cmpeq	r2,r2,zero
    3584:	1000151e 	bne	r2,zero,35dc <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    3588:	e0bffa17 	ldw	r2,-24(fp)
    358c:	10800017 	ldw	r2,0(r2)
    3590:	10800617 	ldw	r2,24(r2)
    3594:	e17ffc17 	ldw	r5,-16(fp)
    3598:	e1bffd17 	ldw	r6,-12(fp)
    359c:	e13ffa17 	ldw	r4,-24(fp)
    35a0:	103ee83a 	callr	r2
    35a4:	e0bff915 	stw	r2,-28(fp)
    35a8:	e0bff917 	ldw	r2,-28(fp)
    35ac:	1004403a 	cmpge	r2,r2,zero
    35b0:	1000071e 	bne	r2,zero,35d0 <write+0xd0>
      {
        ALT_ERRNO = -rval;
    35b4:	00036200 	call	3620 <alt_get_errno>
    35b8:	e0fff917 	ldw	r3,-28(fp)
    35bc:	00c7c83a 	sub	r3,zero,r3
    35c0:	10c00015 	stw	r3,0(r2)
        return -1;
    35c4:	00bfffc4 	movi	r2,-1
    35c8:	e0bffe15 	stw	r2,-8(fp)
    35cc:	00000e06 	br	3608 <write+0x108>
      }
      return rval;
    35d0:	e0bff917 	ldw	r2,-28(fp)
    35d4:	e0bffe15 	stw	r2,-8(fp)
    35d8:	00000b06 	br	3608 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    35dc:	00036200 	call	3620 <alt_get_errno>
    35e0:	1007883a 	mov	r3,r2
    35e4:	00800344 	movi	r2,13
    35e8:	18800015 	stw	r2,0(r3)
    35ec:	00000406 	br	3600 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    35f0:	00036200 	call	3620 <alt_get_errno>
    35f4:	1007883a 	mov	r3,r2
    35f8:	00801444 	movi	r2,81
    35fc:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3600:	00bfffc4 	movi	r2,-1
    3604:	e0bffe15 	stw	r2,-8(fp)
    3608:	e0bffe17 	ldw	r2,-8(fp)
}
    360c:	e037883a 	mov	sp,fp
    3610:	dfc00117 	ldw	ra,4(sp)
    3614:	df000017 	ldw	fp,0(sp)
    3618:	dec00204 	addi	sp,sp,8
    361c:	f800283a 	ret

00003620 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3620:	defffd04 	addi	sp,sp,-12
    3624:	dfc00215 	stw	ra,8(sp)
    3628:	df000115 	stw	fp,4(sp)
    362c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    3630:	00800074 	movhi	r2,1
    3634:	10a51004 	addi	r2,r2,-27584
    3638:	10800017 	ldw	r2,0(r2)
    363c:	1005003a 	cmpeq	r2,r2,zero
    3640:	1000061e 	bne	r2,zero,365c <alt_get_errno+0x3c>
    3644:	00800074 	movhi	r2,1
    3648:	10a51004 	addi	r2,r2,-27584
    364c:	10800017 	ldw	r2,0(r2)
    3650:	103ee83a 	callr	r2
    3654:	e0bfff15 	stw	r2,-4(fp)
    3658:	00000306 	br	3668 <alt_get_errno+0x48>
    365c:	00800074 	movhi	r2,1
    3660:	10ac9704 	addi	r2,r2,-19876
    3664:	e0bfff15 	stw	r2,-4(fp)
    3668:	e0bfff17 	ldw	r2,-4(fp)
}
    366c:	e037883a 	mov	sp,fp
    3670:	dfc00117 	ldw	ra,4(sp)
    3674:	df000017 	ldw	fp,0(sp)
    3678:	dec00204 	addi	sp,sp,8
    367c:	f800283a 	ret

00003680 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    3680:	defffd04 	addi	sp,sp,-12
    3684:	dfc00215 	stw	ra,8(sp)
    3688:	df000115 	stw	fp,4(sp)
    368c:	df000104 	addi	fp,sp,4
    3690:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
    3694:	0006c1c0 	call	6c1c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    3698:	00800044 	movi	r2,1
    369c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    36a0:	e037883a 	mov	sp,fp
    36a4:	dfc00117 	ldw	ra,4(sp)
    36a8:	df000017 	ldw	fp,0(sp)
    36ac:	dec00204 	addi	sp,sp,8
    36b0:	f800283a 	ret

000036b4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    36b4:	defffd04 	addi	sp,sp,-12
    36b8:	dfc00215 	stw	ra,8(sp)
    36bc:	df000115 	stw	fp,4(sp)
    36c0:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    36c4:	01040034 	movhi	r4,4096
    36c8:	21080004 	addi	r4,r4,8192
    36cc:	000b883a 	mov	r5,zero
    36d0:	000d883a 	mov	r6,zero
    36d4:	01c00204 	movi	r7,8
    36d8:	00046080 	call	4608 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    36dc:	01000074 	movhi	r4,1
    36e0:	21200c04 	addi	r4,r4,-32720
    36e4:	000b883a 	mov	r5,zero
    36e8:	01800204 	movi	r6,8
    36ec:	0003c340 	call	3c34 <altera_avalon_jtag_uart_init>
    36f0:	01000074 	movhi	r4,1
    36f4:	21200204 	addi	r4,r4,-32760
    36f8:	0003ab40 	call	3ab4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    36fc:	01000074 	movhi	r4,1
    3700:	21241a04 	addi	r4,r4,-28568
    3704:	0003ab40 	call	3ab4 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
    3708:	01000074 	movhi	r4,1
    370c:	21242604 	addi	r4,r4,-28520
    3710:	0003ab40 	call	3ab4 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    3714:	01000074 	movhi	r4,1
    3718:	21243204 	addi	r4,r4,-28472
    371c:	00047400 	call	4740 <alt_up_character_lcd_init>
    3720:	01000074 	movhi	r4,1
    3724:	21243204 	addi	r4,r4,-28472
    3728:	0003ab40 	call	3ab4 <alt_dev_reg>
    ALTERA_UP_AVALON_ETHERNET_INIT ( ETHERNET, Ethernet);
    372c:	01000074 	movhi	r4,1
    3730:	21243d04 	addi	r4,r4,-28428
    3734:	0004bc00 	call	4bc0 <alt_up_ethernet_init>
    3738:	01000074 	movhi	r4,1
    373c:	21243d04 	addi	r4,r4,-28428
    3740:	0003ab40 	call	3ab4 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA_UART, IrDA_UART);
    3744:	01000074 	movhi	r4,1
    3748:	21244c04 	addi	r4,r4,-28368
    374c:	0003ab40 	call	3ab4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP1, Expansion_JP1);
    3750:	01000074 	movhi	r4,1
    3754:	21245704 	addi	r4,r4,-28324
    3758:	0003ab40 	call	3ab4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP2, Expansion_JP2);
    375c:	01000074 	movhi	r4,1
    3760:	21246204 	addi	r4,r4,-28280
    3764:	0003ab40 	call	3ab4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
    3768:	01000074 	movhi	r4,1
    376c:	21246d04 	addi	r4,r4,-28236
    3770:	0003ab40 	call	3ab4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    3774:	01000074 	movhi	r4,1
    3778:	21247804 	addi	r4,r4,-28192
    377c:	0003ab40 	call	3ab4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
    3780:	01000074 	movhi	r4,1
    3784:	21248304 	addi	r4,r4,-28148
    3788:	0003ab40 	call	3ab4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    378c:	01000074 	movhi	r4,1
    3790:	21248e04 	addi	r4,r4,-28104
    3794:	0003ab40 	call	3ab4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    3798:	01000074 	movhi	r4,1
    379c:	21249904 	addi	r4,r4,-28060
    37a0:	0003ab40 	call	3ab4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    37a4:	01000074 	movhi	r4,1
    37a8:	2124a404 	addi	r4,r4,-28016
    37ac:	0003ab40 	call	3ab4 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    37b0:	01000074 	movhi	r4,1
    37b4:	2124af04 	addi	r4,r4,-27972
    37b8:	00054080 	call	5408 <alt_up_ps2_init>
    37bc:	01000074 	movhi	r4,1
    37c0:	2124af04 	addi	r4,r4,-27972
    37c4:	0003ab40 	call	3ab4 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    37c8:	01000074 	movhi	r4,1
    37cc:	2124bd04 	addi	r4,r4,-27916
    37d0:	0003ab40 	call	3ab4 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
    37d4:	01000074 	movhi	r4,1
    37d8:	2124c804 	addi	r4,r4,-27872
    37dc:	0003ab40 	call	3ab4 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_CHAR_BUFFER, VGA_Char_Buffer);
    37e0:	00800074 	movhi	r2,1
    37e4:	10a4d504 	addi	r2,r2,-27820
    37e8:	10800a17 	ldw	r2,40(r2)
    37ec:	10800104 	addi	r2,r2,4
    37f0:	10800017 	ldw	r2,0(r2)
    37f4:	10ffffcc 	andi	r3,r2,65535
    37f8:	00800074 	movhi	r2,1
    37fc:	10a4d504 	addi	r2,r2,-27820
    3800:	10c00c15 	stw	r3,48(r2)
    3804:	00800074 	movhi	r2,1
    3808:	10a4d504 	addi	r2,r2,-27820
    380c:	10800a17 	ldw	r2,40(r2)
    3810:	10800104 	addi	r2,r2,4
    3814:	10800017 	ldw	r2,0(r2)
    3818:	1005d43a 	srai	r2,r2,16
    381c:	10ffffcc 	andi	r3,r2,65535
    3820:	00800074 	movhi	r2,1
    3824:	10a4d504 	addi	r2,r2,-27820
    3828:	10c00d15 	stw	r3,52(r2)
    382c:	00800074 	movhi	r2,1
    3830:	10a4d504 	addi	r2,r2,-27820
    3834:	10800c17 	ldw	r2,48(r2)
    3838:	10801068 	cmpgeui	r2,r2,65
    383c:	1000081e 	bne	r2,zero,3860 <alt_sys_init+0x1ac>
    3840:	00c00074 	movhi	r3,1
    3844:	18e4d504 	addi	r3,r3,-27820
    3848:	00800fc4 	movi	r2,63
    384c:	18800f15 	stw	r2,60(r3)
    3850:	00c00074 	movhi	r3,1
    3854:	18e4d504 	addi	r3,r3,-27820
    3858:	00800184 	movi	r2,6
    385c:	18801015 	stw	r2,64(r3)
    3860:	00800074 	movhi	r2,1
    3864:	10a4d504 	addi	r2,r2,-27820
    3868:	10800d17 	ldw	r2,52(r2)
    386c:	10800868 	cmpgeui	r2,r2,33
    3870:	1000041e 	bne	r2,zero,3884 <alt_sys_init+0x1d0>
    3874:	00c00074 	movhi	r3,1
    3878:	18e4d504 	addi	r3,r3,-27820
    387c:	008007c4 	movi	r2,31
    3880:	18801115 	stw	r2,68(r3)
    3884:	01000074 	movhi	r4,1
    3888:	2124d504 	addi	r4,r4,-27820
    388c:	0005d740 	call	5d74 <alt_up_char_buffer_init>
    3890:	01000074 	movhi	r4,1
    3894:	2124d504 	addi	r4,r4,-27820
    3898:	0003ab40 	call	3ab4 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_PIXEL_BUFFER, VGA_Pixel_Buffer);
    389c:	00800074 	movhi	r2,1
    38a0:	10a4e704 	addi	r2,r2,-27748
    38a4:	10800a17 	ldw	r2,40(r2)
    38a8:	10800017 	ldw	r2,0(r2)
    38ac:	1007883a 	mov	r3,r2
    38b0:	00800074 	movhi	r2,1
    38b4:	10a4e704 	addi	r2,r2,-27748
    38b8:	10c00b15 	stw	r3,44(r2)
    38bc:	00800074 	movhi	r2,1
    38c0:	10a4e704 	addi	r2,r2,-27748
    38c4:	10800a17 	ldw	r2,40(r2)
    38c8:	10800104 	addi	r2,r2,4
    38cc:	10800017 	ldw	r2,0(r2)
    38d0:	1007883a 	mov	r3,r2
    38d4:	00800074 	movhi	r2,1
    38d8:	10a4e704 	addi	r2,r2,-27748
    38dc:	10c00c15 	stw	r3,48(r2)
    38e0:	00800074 	movhi	r2,1
    38e4:	10a4e704 	addi	r2,r2,-27748
    38e8:	10800a17 	ldw	r2,40(r2)
    38ec:	10800204 	addi	r2,r2,8
    38f0:	10800017 	ldw	r2,0(r2)
    38f4:	10ffffcc 	andi	r3,r2,65535
    38f8:	00800074 	movhi	r2,1
    38fc:	10a4e704 	addi	r2,r2,-27748
    3900:	10c00f15 	stw	r3,60(r2)
    3904:	00800074 	movhi	r2,1
    3908:	10a4e704 	addi	r2,r2,-27748
    390c:	10800a17 	ldw	r2,40(r2)
    3910:	10800204 	addi	r2,r2,8
    3914:	10800017 	ldw	r2,0(r2)
    3918:	1005d43a 	srai	r2,r2,16
    391c:	10ffffcc 	andi	r3,r2,65535
    3920:	00800074 	movhi	r2,1
    3924:	10a4e704 	addi	r2,r2,-27748
    3928:	10c01015 	stw	r3,64(r2)
    392c:	00800074 	movhi	r2,1
    3930:	10a4e704 	addi	r2,r2,-27748
    3934:	10800a17 	ldw	r2,40(r2)
    3938:	10800304 	addi	r2,r2,12
    393c:	10800017 	ldw	r2,0(r2)
    3940:	1005d07a 	srai	r2,r2,1
    3944:	10c0004c 	andi	r3,r2,1
    3948:	00800074 	movhi	r2,1
    394c:	10a4e704 	addi	r2,r2,-27748
    3950:	10c00d15 	stw	r3,52(r2)
    3954:	00800074 	movhi	r2,1
    3958:	10a4e704 	addi	r2,r2,-27748
    395c:	10800a17 	ldw	r2,40(r2)
    3960:	10800304 	addi	r2,r2,12
    3964:	10800017 	ldw	r2,0(r2)
    3968:	1005d13a 	srai	r2,r2,4
    396c:	10c003cc 	andi	r3,r2,15
    3970:	00800074 	movhi	r2,1
    3974:	10a4e704 	addi	r2,r2,-27748
    3978:	10c00e15 	stw	r3,56(r2)
    397c:	00800074 	movhi	r2,1
    3980:	10a4e704 	addi	r2,r2,-27748
    3984:	10800a17 	ldw	r2,40(r2)
    3988:	10800304 	addi	r2,r2,12
    398c:	10800017 	ldw	r2,0(r2)
    3990:	1005d43a 	srai	r2,r2,16
    3994:	1007883a 	mov	r3,r2
    3998:	00bfffc4 	movi	r2,-1
    399c:	1884703a 	and	r2,r3,r2
    39a0:	e0bfff45 	stb	r2,-3(fp)
    39a4:	00800074 	movhi	r2,1
    39a8:	10a4e704 	addi	r2,r2,-27748
    39ac:	10800a17 	ldw	r2,40(r2)
    39b0:	10800304 	addi	r2,r2,12
    39b4:	10800017 	ldw	r2,0(r2)
    39b8:	1005d63a 	srai	r2,r2,24
    39bc:	1007883a 	mov	r3,r2
    39c0:	00bfffc4 	movi	r2,-1
    39c4:	1884703a 	and	r2,r3,r2
    39c8:	e0bfff05 	stb	r2,-4(fp)
    39cc:	00800074 	movhi	r2,1
    39d0:	10a4e704 	addi	r2,r2,-27748
    39d4:	10800e17 	ldw	r2,56(r2)
    39d8:	10800058 	cmpnei	r2,r2,1
    39dc:	1000041e 	bne	r2,zero,39f0 <alt_sys_init+0x33c>
    39e0:	00800074 	movhi	r2,1
    39e4:	10a4e704 	addi	r2,r2,-27748
    39e8:	10001115 	stw	zero,68(r2)
    39ec:	00000e06 	br	3a28 <alt_sys_init+0x374>
    39f0:	00800074 	movhi	r2,1
    39f4:	10a4e704 	addi	r2,r2,-27748
    39f8:	10800e17 	ldw	r2,56(r2)
    39fc:	10800098 	cmpnei	r2,r2,2
    3a00:	1000051e 	bne	r2,zero,3a18 <alt_sys_init+0x364>
    3a04:	00c00074 	movhi	r3,1
    3a08:	18e4e704 	addi	r3,r3,-27748
    3a0c:	00800044 	movi	r2,1
    3a10:	18801115 	stw	r2,68(r3)
    3a14:	00000406 	br	3a28 <alt_sys_init+0x374>
    3a18:	00c00074 	movhi	r3,1
    3a1c:	18e4e704 	addi	r3,r3,-27748
    3a20:	00800084 	movi	r2,2
    3a24:	18801115 	stw	r2,68(r3)
    3a28:	e0ffff43 	ldbu	r3,-3(fp)
    3a2c:	00800804 	movi	r2,32
    3a30:	10c7c83a 	sub	r3,r2,r3
    3a34:	00bfffc4 	movi	r2,-1
    3a38:	10c6d83a 	srl	r3,r2,r3
    3a3c:	00800074 	movhi	r2,1
    3a40:	10a4e704 	addi	r2,r2,-27748
    3a44:	10c01215 	stw	r3,72(r2)
    3a48:	e0ffff43 	ldbu	r3,-3(fp)
    3a4c:	00800074 	movhi	r2,1
    3a50:	10a4e704 	addi	r2,r2,-27748
    3a54:	10801117 	ldw	r2,68(r2)
    3a58:	1887883a 	add	r3,r3,r2
    3a5c:	00800074 	movhi	r2,1
    3a60:	10a4e704 	addi	r2,r2,-27748
    3a64:	10c01315 	stw	r3,76(r2)
    3a68:	e0ffff03 	ldbu	r3,-4(fp)
    3a6c:	00800804 	movi	r2,32
    3a70:	10c7c83a 	sub	r3,r2,r3
    3a74:	00bfffc4 	movi	r2,-1
    3a78:	10c6d83a 	srl	r3,r2,r3
    3a7c:	00800074 	movhi	r2,1
    3a80:	10a4e704 	addi	r2,r2,-27748
    3a84:	10c01415 	stw	r3,80(r2)
    3a88:	01000074 	movhi	r4,1
    3a8c:	2124e704 	addi	r4,r4,-27748
    3a90:	0003ab40 	call	3ab4 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
    3a94:	01000074 	movhi	r4,1
    3a98:	2124fc04 	addi	r4,r4,-27664
    3a9c:	0003ab40 	call	3ab4 <alt_dev_reg>
}
    3aa0:	e037883a 	mov	sp,fp
    3aa4:	dfc00117 	ldw	ra,4(sp)
    3aa8:	df000017 	ldw	fp,0(sp)
    3aac:	dec00204 	addi	sp,sp,8
    3ab0:	f800283a 	ret

00003ab4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    3ab4:	defffd04 	addi	sp,sp,-12
    3ab8:	dfc00215 	stw	ra,8(sp)
    3abc:	df000115 	stw	fp,4(sp)
    3ac0:	df000104 	addi	fp,sp,4
    3ac4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    3ac8:	e13fff17 	ldw	r4,-4(fp)
    3acc:	01400074 	movhi	r5,1
    3ad0:	29650d04 	addi	r5,r5,-27596
    3ad4:	00061e80 	call	61e8 <alt_dev_llist_insert>
}
    3ad8:	e037883a 	mov	sp,fp
    3adc:	dfc00117 	ldw	ra,4(sp)
    3ae0:	df000017 	ldw	fp,0(sp)
    3ae4:	dec00204 	addi	sp,sp,8
    3ae8:	f800283a 	ret

00003aec <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    3aec:	defffa04 	addi	sp,sp,-24
    3af0:	dfc00515 	stw	ra,20(sp)
    3af4:	df000415 	stw	fp,16(sp)
    3af8:	df000404 	addi	fp,sp,16
    3afc:	e13ffd15 	stw	r4,-12(fp)
    3b00:	e17ffe15 	stw	r5,-8(fp)
    3b04:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3b08:	e0bffd17 	ldw	r2,-12(fp)
    3b0c:	10800017 	ldw	r2,0(r2)
    3b10:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    3b14:	e0bffc17 	ldw	r2,-16(fp)
    3b18:	11000a04 	addi	r4,r2,40
    3b1c:	e0bffd17 	ldw	r2,-12(fp)
    3b20:	11c00217 	ldw	r7,8(r2)
    3b24:	e17ffe17 	ldw	r5,-8(fp)
    3b28:	e1bfff17 	ldw	r6,-4(fp)
    3b2c:	00041300 	call	4130 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    3b30:	e037883a 	mov	sp,fp
    3b34:	dfc00117 	ldw	ra,4(sp)
    3b38:	df000017 	ldw	fp,0(sp)
    3b3c:	dec00204 	addi	sp,sp,8
    3b40:	f800283a 	ret

00003b44 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    3b44:	defffa04 	addi	sp,sp,-24
    3b48:	dfc00515 	stw	ra,20(sp)
    3b4c:	df000415 	stw	fp,16(sp)
    3b50:	df000404 	addi	fp,sp,16
    3b54:	e13ffd15 	stw	r4,-12(fp)
    3b58:	e17ffe15 	stw	r5,-8(fp)
    3b5c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3b60:	e0bffd17 	ldw	r2,-12(fp)
    3b64:	10800017 	ldw	r2,0(r2)
    3b68:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    3b6c:	e0bffc17 	ldw	r2,-16(fp)
    3b70:	11000a04 	addi	r4,r2,40
    3b74:	e0bffd17 	ldw	r2,-12(fp)
    3b78:	11c00217 	ldw	r7,8(r2)
    3b7c:	e17ffe17 	ldw	r5,-8(fp)
    3b80:	e1bfff17 	ldw	r6,-4(fp)
    3b84:	00043540 	call	4354 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    3b88:	e037883a 	mov	sp,fp
    3b8c:	dfc00117 	ldw	ra,4(sp)
    3b90:	df000017 	ldw	fp,0(sp)
    3b94:	dec00204 	addi	sp,sp,8
    3b98:	f800283a 	ret

00003b9c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    3b9c:	defffc04 	addi	sp,sp,-16
    3ba0:	dfc00315 	stw	ra,12(sp)
    3ba4:	df000215 	stw	fp,8(sp)
    3ba8:	df000204 	addi	fp,sp,8
    3bac:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3bb0:	e0bfff17 	ldw	r2,-4(fp)
    3bb4:	10800017 	ldw	r2,0(r2)
    3bb8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    3bbc:	e0bffe17 	ldw	r2,-8(fp)
    3bc0:	11000a04 	addi	r4,r2,40
    3bc4:	e0bfff17 	ldw	r2,-4(fp)
    3bc8:	11400217 	ldw	r5,8(r2)
    3bcc:	0003fc80 	call	3fc8 <altera_avalon_jtag_uart_close>
}
    3bd0:	e037883a 	mov	sp,fp
    3bd4:	dfc00117 	ldw	ra,4(sp)
    3bd8:	df000017 	ldw	fp,0(sp)
    3bdc:	dec00204 	addi	sp,sp,8
    3be0:	f800283a 	ret

00003be4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    3be4:	defffa04 	addi	sp,sp,-24
    3be8:	dfc00515 	stw	ra,20(sp)
    3bec:	df000415 	stw	fp,16(sp)
    3bf0:	df000404 	addi	fp,sp,16
    3bf4:	e13ffd15 	stw	r4,-12(fp)
    3bf8:	e17ffe15 	stw	r5,-8(fp)
    3bfc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    3c00:	e0bffd17 	ldw	r2,-12(fp)
    3c04:	10800017 	ldw	r2,0(r2)
    3c08:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    3c0c:	e0bffc17 	ldw	r2,-16(fp)
    3c10:	11000a04 	addi	r4,r2,40
    3c14:	e17ffe17 	ldw	r5,-8(fp)
    3c18:	e1bfff17 	ldw	r6,-4(fp)
    3c1c:	000403c0 	call	403c <altera_avalon_jtag_uart_ioctl>
}
    3c20:	e037883a 	mov	sp,fp
    3c24:	dfc00117 	ldw	ra,4(sp)
    3c28:	df000017 	ldw	fp,0(sp)
    3c2c:	dec00204 	addi	sp,sp,8
    3c30:	f800283a 	ret

00003c34 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    3c34:	defffb04 	addi	sp,sp,-20
    3c38:	dfc00415 	stw	ra,16(sp)
    3c3c:	df000315 	stw	fp,12(sp)
    3c40:	df000304 	addi	fp,sp,12
    3c44:	e13ffd15 	stw	r4,-12(fp)
    3c48:	e17ffe15 	stw	r5,-8(fp)
    3c4c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    3c50:	e0fffd17 	ldw	r3,-12(fp)
    3c54:	00800044 	movi	r2,1
    3c58:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    3c5c:	e0bffd17 	ldw	r2,-12(fp)
    3c60:	10800017 	ldw	r2,0(r2)
    3c64:	11000104 	addi	r4,r2,4
    3c68:	e0bffd17 	ldw	r2,-12(fp)
    3c6c:	10800817 	ldw	r2,32(r2)
    3c70:	1007883a 	mov	r3,r2
    3c74:	2005883a 	mov	r2,r4
    3c78:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    3c7c:	e13fff17 	ldw	r4,-4(fp)
    3c80:	e17ffd17 	ldw	r5,-12(fp)
    3c84:	01800034 	movhi	r6,0
    3c88:	318f3b04 	addi	r6,r6,15596
    3c8c:	00065c40 	call	65c4 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    3c90:	e0bffd17 	ldw	r2,-12(fp)
    3c94:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    3c98:	e0bffd17 	ldw	r2,-12(fp)
    3c9c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    3ca0:	00800074 	movhi	r2,1
    3ca4:	10ac9c04 	addi	r2,r2,-19856
    3ca8:	10800017 	ldw	r2,0(r2)
    3cac:	100b883a 	mov	r5,r2
    3cb0:	01800034 	movhi	r6,0
    3cb4:	318fc604 	addi	r6,r6,16152
    3cb8:	e1fffd17 	ldw	r7,-12(fp)
    3cbc:	00060780 	call	6078 <alt_alarm_start>
    3cc0:	1004403a 	cmpge	r2,r2,zero
    3cc4:	1000041e 	bne	r2,zero,3cd8 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    3cc8:	e0fffd17 	ldw	r3,-12(fp)
    3ccc:	00a00034 	movhi	r2,32768
    3cd0:	10bfffc4 	addi	r2,r2,-1
    3cd4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    3cd8:	e037883a 	mov	sp,fp
    3cdc:	dfc00117 	ldw	ra,4(sp)
    3ce0:	df000017 	ldw	fp,0(sp)
    3ce4:	dec00204 	addi	sp,sp,8
    3ce8:	f800283a 	ret

00003cec <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    3cec:	defff704 	addi	sp,sp,-36
    3cf0:	df000815 	stw	fp,32(sp)
    3cf4:	df000804 	addi	fp,sp,32
    3cf8:	e13ffe15 	stw	r4,-8(fp)
    3cfc:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    3d00:	e0bffe17 	ldw	r2,-8(fp)
    3d04:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
    3d08:	e0bffd17 	ldw	r2,-12(fp)
    3d0c:	10800017 	ldw	r2,0(r2)
    3d10:	e0bffc15 	stw	r2,-16(fp)
    3d14:	00000006 	br	3d18 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    3d18:	e0bffc17 	ldw	r2,-16(fp)
    3d1c:	10800104 	addi	r2,r2,4
    3d20:	10800037 	ldwio	r2,0(r2)
    3d24:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    3d28:	e0bffb17 	ldw	r2,-20(fp)
    3d2c:	1080c00c 	andi	r2,r2,768
    3d30:	1005003a 	cmpeq	r2,r2,zero
    3d34:	1000741e 	bne	r2,zero,3f08 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    3d38:	e0bffb17 	ldw	r2,-20(fp)
    3d3c:	1080400c 	andi	r2,r2,256
    3d40:	1005003a 	cmpeq	r2,r2,zero
    3d44:	1000351e 	bne	r2,zero,3e1c <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    3d48:	00800074 	movhi	r2,1
    3d4c:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    3d50:	e0bffd17 	ldw	r2,-12(fp)
    3d54:	10800a17 	ldw	r2,40(r2)
    3d58:	10800044 	addi	r2,r2,1
    3d5c:	1081ffcc 	andi	r2,r2,2047
    3d60:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
    3d64:	e0bffd17 	ldw	r2,-12(fp)
    3d68:	10c00b17 	ldw	r3,44(r2)
    3d6c:	e0bff917 	ldw	r2,-28(fp)
    3d70:	18801626 	beq	r3,r2,3dcc <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    3d74:	e0bffc17 	ldw	r2,-16(fp)
    3d78:	10800037 	ldwio	r2,0(r2)
    3d7c:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    3d80:	e0bffa17 	ldw	r2,-24(fp)
    3d84:	10a0000c 	andi	r2,r2,32768
    3d88:	1005003a 	cmpeq	r2,r2,zero
    3d8c:	10000f1e 	bne	r2,zero,3dcc <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    3d90:	e0bffd17 	ldw	r2,-12(fp)
    3d94:	10c00a17 	ldw	r3,40(r2)
    3d98:	e0bffa17 	ldw	r2,-24(fp)
    3d9c:	1009883a 	mov	r4,r2
    3da0:	e0bffd17 	ldw	r2,-12(fp)
    3da4:	1885883a 	add	r2,r3,r2
    3da8:	10800e04 	addi	r2,r2,56
    3dac:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    3db0:	e0bffd17 	ldw	r2,-12(fp)
    3db4:	10800a17 	ldw	r2,40(r2)
    3db8:	10800044 	addi	r2,r2,1
    3dbc:	10c1ffcc 	andi	r3,r2,2047
    3dc0:	e0bffd17 	ldw	r2,-12(fp)
    3dc4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    3dc8:	003fe106 	br	3d50 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    3dcc:	e0bffa17 	ldw	r2,-24(fp)
    3dd0:	10bfffec 	andhi	r2,r2,65535
    3dd4:	1005003a 	cmpeq	r2,r2,zero
    3dd8:	1000101e 	bne	r2,zero,3e1c <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    3ddc:	e0bffd17 	ldw	r2,-12(fp)
    3de0:	10c00817 	ldw	r3,32(r2)
    3de4:	00bfff84 	movi	r2,-2
    3de8:	1886703a 	and	r3,r3,r2
    3dec:	e0bffd17 	ldw	r2,-12(fp)
    3df0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    3df4:	e0bffc17 	ldw	r2,-16(fp)
    3df8:	11000104 	addi	r4,r2,4
    3dfc:	e0bffd17 	ldw	r2,-12(fp)
    3e00:	10800817 	ldw	r2,32(r2)
    3e04:	1007883a 	mov	r3,r2
    3e08:	2005883a 	mov	r2,r4
    3e0c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    3e10:	e0bffc17 	ldw	r2,-16(fp)
    3e14:	10800104 	addi	r2,r2,4
    3e18:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    3e1c:	e0bffb17 	ldw	r2,-20(fp)
    3e20:	1080800c 	andi	r2,r2,512
    3e24:	1005003a 	cmpeq	r2,r2,zero
    3e28:	103fbb1e 	bne	r2,zero,3d18 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    3e2c:	e0bffb17 	ldw	r2,-20(fp)
    3e30:	10bfffec 	andhi	r2,r2,65535
    3e34:	1004d43a 	srli	r2,r2,16
    3e38:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    3e3c:	00001506 	br	3e94 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    3e40:	e13ffc17 	ldw	r4,-16(fp)
    3e44:	e0bffd17 	ldw	r2,-12(fp)
    3e48:	10c00d17 	ldw	r3,52(r2)
    3e4c:	e0bffd17 	ldw	r2,-12(fp)
    3e50:	1885883a 	add	r2,r3,r2
    3e54:	10820e04 	addi	r2,r2,2104
    3e58:	10800003 	ldbu	r2,0(r2)
    3e5c:	10c03fcc 	andi	r3,r2,255
    3e60:	18c0201c 	xori	r3,r3,128
    3e64:	18ffe004 	addi	r3,r3,-128
    3e68:	2005883a 	mov	r2,r4
    3e6c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    3e70:	e0bffd17 	ldw	r2,-12(fp)
    3e74:	10800d17 	ldw	r2,52(r2)
    3e78:	10800044 	addi	r2,r2,1
    3e7c:	10c1ffcc 	andi	r3,r2,2047
    3e80:	e0bffd17 	ldw	r2,-12(fp)
    3e84:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    3e88:	e0bff817 	ldw	r2,-32(fp)
    3e8c:	10bfffc4 	addi	r2,r2,-1
    3e90:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    3e94:	e0bff817 	ldw	r2,-32(fp)
    3e98:	1005003a 	cmpeq	r2,r2,zero
    3e9c:	1000051e 	bne	r2,zero,3eb4 <altera_avalon_jtag_uart_irq+0x1c8>
    3ea0:	e0bffd17 	ldw	r2,-12(fp)
    3ea4:	10c00d17 	ldw	r3,52(r2)
    3ea8:	e0bffd17 	ldw	r2,-12(fp)
    3eac:	10800c17 	ldw	r2,48(r2)
    3eb0:	18bfe31e 	bne	r3,r2,3e40 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    3eb4:	e0bff817 	ldw	r2,-32(fp)
    3eb8:	1005003a 	cmpeq	r2,r2,zero
    3ebc:	103f961e 	bne	r2,zero,3d18 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    3ec0:	e0bffd17 	ldw	r2,-12(fp)
    3ec4:	10c00817 	ldw	r3,32(r2)
    3ec8:	00bfff44 	movi	r2,-3
    3ecc:	1886703a 	and	r3,r3,r2
    3ed0:	e0bffd17 	ldw	r2,-12(fp)
    3ed4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    3ed8:	e0bffd17 	ldw	r2,-12(fp)
    3edc:	10800017 	ldw	r2,0(r2)
    3ee0:	11000104 	addi	r4,r2,4
    3ee4:	e0bffd17 	ldw	r2,-12(fp)
    3ee8:	10800817 	ldw	r2,32(r2)
    3eec:	1007883a 	mov	r3,r2
    3ef0:	2005883a 	mov	r2,r4
    3ef4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    3ef8:	e0bffc17 	ldw	r2,-16(fp)
    3efc:	10800104 	addi	r2,r2,4
    3f00:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    3f04:	003f8406 	br	3d18 <altera_avalon_jtag_uart_irq+0x2c>
}
    3f08:	e037883a 	mov	sp,fp
    3f0c:	df000017 	ldw	fp,0(sp)
    3f10:	dec00104 	addi	sp,sp,4
    3f14:	f800283a 	ret

00003f18 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    3f18:	defffc04 	addi	sp,sp,-16
    3f1c:	df000315 	stw	fp,12(sp)
    3f20:	df000304 	addi	fp,sp,12
    3f24:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    3f28:	e0bfff17 	ldw	r2,-4(fp)
    3f2c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    3f30:	e0bffe17 	ldw	r2,-8(fp)
    3f34:	10800017 	ldw	r2,0(r2)
    3f38:	10800104 	addi	r2,r2,4
    3f3c:	10800037 	ldwio	r2,0(r2)
    3f40:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    3f44:	e0bffd17 	ldw	r2,-12(fp)
    3f48:	1081000c 	andi	r2,r2,1024
    3f4c:	1005003a 	cmpeq	r2,r2,zero
    3f50:	10000c1e 	bne	r2,zero,3f84 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    3f54:	e0bffe17 	ldw	r2,-8(fp)
    3f58:	10800017 	ldw	r2,0(r2)
    3f5c:	11000104 	addi	r4,r2,4
    3f60:	e0bffe17 	ldw	r2,-8(fp)
    3f64:	10800817 	ldw	r2,32(r2)
    3f68:	10810014 	ori	r2,r2,1024
    3f6c:	1007883a 	mov	r3,r2
    3f70:	2005883a 	mov	r2,r4
    3f74:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    3f78:	e0bffe17 	ldw	r2,-8(fp)
    3f7c:	10000915 	stw	zero,36(r2)
    3f80:	00000a06 	br	3fac <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    3f84:	e0bffe17 	ldw	r2,-8(fp)
    3f88:	10c00917 	ldw	r3,36(r2)
    3f8c:	00a00034 	movhi	r2,32768
    3f90:	10bfff04 	addi	r2,r2,-4
    3f94:	10c00536 	bltu	r2,r3,3fac <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    3f98:	e0bffe17 	ldw	r2,-8(fp)
    3f9c:	10800917 	ldw	r2,36(r2)
    3fa0:	10c00044 	addi	r3,r2,1
    3fa4:	e0bffe17 	ldw	r2,-8(fp)
    3fa8:	10c00915 	stw	r3,36(r2)
    3fac:	00800074 	movhi	r2,1
    3fb0:	10ac9c04 	addi	r2,r2,-19856
    3fb4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    3fb8:	e037883a 	mov	sp,fp
    3fbc:	df000017 	ldw	fp,0(sp)
    3fc0:	dec00104 	addi	sp,sp,4
    3fc4:	f800283a 	ret

00003fc8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    3fc8:	defffc04 	addi	sp,sp,-16
    3fcc:	df000315 	stw	fp,12(sp)
    3fd0:	df000304 	addi	fp,sp,12
    3fd4:	e13ffd15 	stw	r4,-12(fp)
    3fd8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    3fdc:	00000706 	br	3ffc <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    3fe0:	e0bffe17 	ldw	r2,-8(fp)
    3fe4:	1090000c 	andi	r2,r2,16384
    3fe8:	1005003a 	cmpeq	r2,r2,zero
    3fec:	1000031e 	bne	r2,zero,3ffc <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    3ff0:	00bffd44 	movi	r2,-11
    3ff4:	e0bfff15 	stw	r2,-4(fp)
    3ff8:	00000b06 	br	4028 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    3ffc:	e0bffd17 	ldw	r2,-12(fp)
    4000:	10c00d17 	ldw	r3,52(r2)
    4004:	e0bffd17 	ldw	r2,-12(fp)
    4008:	10800c17 	ldw	r2,48(r2)
    400c:	18800526 	beq	r3,r2,4024 <altera_avalon_jtag_uart_close+0x5c>
    4010:	e0bffd17 	ldw	r2,-12(fp)
    4014:	10c00917 	ldw	r3,36(r2)
    4018:	e0bffd17 	ldw	r2,-12(fp)
    401c:	10800117 	ldw	r2,4(r2)
    4020:	18bfef36 	bltu	r3,r2,3fe0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    4024:	e03fff15 	stw	zero,-4(fp)
    4028:	e0bfff17 	ldw	r2,-4(fp)
}
    402c:	e037883a 	mov	sp,fp
    4030:	df000017 	ldw	fp,0(sp)
    4034:	dec00104 	addi	sp,sp,4
    4038:	f800283a 	ret

0000403c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    403c:	defff804 	addi	sp,sp,-32
    4040:	df000715 	stw	fp,28(sp)
    4044:	df000704 	addi	fp,sp,28
    4048:	e13ffb15 	stw	r4,-20(fp)
    404c:	e17ffc15 	stw	r5,-16(fp)
    4050:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    4054:	00bff9c4 	movi	r2,-25
    4058:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    405c:	e0bffc17 	ldw	r2,-16(fp)
    4060:	e0bfff15 	stw	r2,-4(fp)
    4064:	e0ffff17 	ldw	r3,-4(fp)
    4068:	189a8060 	cmpeqi	r2,r3,27137
    406c:	1000041e 	bne	r2,zero,4080 <altera_avalon_jtag_uart_ioctl+0x44>
    4070:	e0ffff17 	ldw	r3,-4(fp)
    4074:	189a80a0 	cmpeqi	r2,r3,27138
    4078:	10001b1e 	bne	r2,zero,40e8 <altera_avalon_jtag_uart_ioctl+0xac>
    407c:	00002706 	br	411c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    4080:	e0bffb17 	ldw	r2,-20(fp)
    4084:	10c00117 	ldw	r3,4(r2)
    4088:	00a00034 	movhi	r2,32768
    408c:	10bfffc4 	addi	r2,r2,-1
    4090:	18802226 	beq	r3,r2,411c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    4094:	e0bffd17 	ldw	r2,-12(fp)
    4098:	10800017 	ldw	r2,0(r2)
    409c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    40a0:	e0bff917 	ldw	r2,-28(fp)
    40a4:	10800090 	cmplti	r2,r2,2
    40a8:	1000071e 	bne	r2,zero,40c8 <altera_avalon_jtag_uart_ioctl+0x8c>
    40ac:	e0fff917 	ldw	r3,-28(fp)
    40b0:	00a00034 	movhi	r2,32768
    40b4:	10bfffc4 	addi	r2,r2,-1
    40b8:	18800326 	beq	r3,r2,40c8 <altera_avalon_jtag_uart_ioctl+0x8c>
    40bc:	e0bff917 	ldw	r2,-28(fp)
    40c0:	e0bffe15 	stw	r2,-8(fp)
    40c4:	00000306 	br	40d4 <altera_avalon_jtag_uart_ioctl+0x98>
    40c8:	00e00034 	movhi	r3,32768
    40cc:	18ffff84 	addi	r3,r3,-2
    40d0:	e0fffe15 	stw	r3,-8(fp)
    40d4:	e0bffb17 	ldw	r2,-20(fp)
    40d8:	e0fffe17 	ldw	r3,-8(fp)
    40dc:	10c00115 	stw	r3,4(r2)
      rc = 0;
    40e0:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    40e4:	00000d06 	br	411c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    40e8:	e0bffb17 	ldw	r2,-20(fp)
    40ec:	10c00117 	ldw	r3,4(r2)
    40f0:	00a00034 	movhi	r2,32768
    40f4:	10bfffc4 	addi	r2,r2,-1
    40f8:	18800826 	beq	r3,r2,411c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    40fc:	e13ffd17 	ldw	r4,-12(fp)
    4100:	e0bffb17 	ldw	r2,-20(fp)
    4104:	10c00917 	ldw	r3,36(r2)
    4108:	e0bffb17 	ldw	r2,-20(fp)
    410c:	10800117 	ldw	r2,4(r2)
    4110:	1885803a 	cmpltu	r2,r3,r2
    4114:	20800015 	stw	r2,0(r4)
      rc = 0;
    4118:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    411c:	e0bffa17 	ldw	r2,-24(fp)
}
    4120:	e037883a 	mov	sp,fp
    4124:	df000017 	ldw	fp,0(sp)
    4128:	dec00104 	addi	sp,sp,4
    412c:	f800283a 	ret

00004130 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    4130:	defff204 	addi	sp,sp,-56
    4134:	dfc00d15 	stw	ra,52(sp)
    4138:	df000c15 	stw	fp,48(sp)
    413c:	df000c04 	addi	fp,sp,48
    4140:	e13ffb15 	stw	r4,-20(fp)
    4144:	e17ffc15 	stw	r5,-16(fp)
    4148:	e1bffd15 	stw	r6,-12(fp)
    414c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    4150:	e0bffc17 	ldw	r2,-16(fp)
    4154:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    4158:	00004806 	br	427c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    415c:	e0bffb17 	ldw	r2,-20(fp)
    4160:	10800a17 	ldw	r2,40(r2)
    4164:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    4168:	e0bffb17 	ldw	r2,-20(fp)
    416c:	10800b17 	ldw	r2,44(r2)
    4170:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    4174:	e0fff717 	ldw	r3,-36(fp)
    4178:	e0bff617 	ldw	r2,-40(fp)
    417c:	18800536 	bltu	r3,r2,4194 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    4180:	e0bff717 	ldw	r2,-36(fp)
    4184:	e0fff617 	ldw	r3,-40(fp)
    4188:	10c5c83a 	sub	r2,r2,r3
    418c:	e0bff815 	stw	r2,-32(fp)
    4190:	00000406 	br	41a4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    4194:	00820004 	movi	r2,2048
    4198:	e0fff617 	ldw	r3,-40(fp)
    419c:	10c5c83a 	sub	r2,r2,r3
    41a0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    41a4:	e0bff817 	ldw	r2,-32(fp)
    41a8:	1005003a 	cmpeq	r2,r2,zero
    41ac:	10001f1e 	bne	r2,zero,422c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    41b0:	e0fffd17 	ldw	r3,-12(fp)
    41b4:	e0bff817 	ldw	r2,-32(fp)
    41b8:	1880022e 	bgeu	r3,r2,41c4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    41bc:	e0bffd17 	ldw	r2,-12(fp)
    41c0:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    41c4:	e0bffb17 	ldw	r2,-20(fp)
    41c8:	10c00e04 	addi	r3,r2,56
    41cc:	e0bff617 	ldw	r2,-40(fp)
    41d0:	1887883a 	add	r3,r3,r2
    41d4:	e0bffa17 	ldw	r2,-24(fp)
    41d8:	1009883a 	mov	r4,r2
    41dc:	180b883a 	mov	r5,r3
    41e0:	e1bff817 	ldw	r6,-32(fp)
    41e4:	00010780 	call	1078 <memcpy>
      ptr   += n;
    41e8:	e0fff817 	ldw	r3,-32(fp)
    41ec:	e0bffa17 	ldw	r2,-24(fp)
    41f0:	10c5883a 	add	r2,r2,r3
    41f4:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    41f8:	e0fffd17 	ldw	r3,-12(fp)
    41fc:	e0bff817 	ldw	r2,-32(fp)
    4200:	1885c83a 	sub	r2,r3,r2
    4204:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4208:	e0fff617 	ldw	r3,-40(fp)
    420c:	e0bff817 	ldw	r2,-32(fp)
    4210:	1885883a 	add	r2,r3,r2
    4214:	10c1ffcc 	andi	r3,r2,2047
    4218:	e0bffb17 	ldw	r2,-20(fp)
    421c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    4220:	e0bffd17 	ldw	r2,-12(fp)
    4224:	10800048 	cmpgei	r2,r2,1
    4228:	103fcc1e 	bne	r2,zero,415c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    422c:	e0fffa17 	ldw	r3,-24(fp)
    4230:	e0bffc17 	ldw	r2,-16(fp)
    4234:	1880141e 	bne	r3,r2,4288 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    4238:	e0bffe17 	ldw	r2,-8(fp)
    423c:	1090000c 	andi	r2,r2,16384
    4240:	1004c03a 	cmpne	r2,r2,zero
    4244:	1000101e 	bne	r2,zero,4288 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    4248:	e0bffb17 	ldw	r2,-20(fp)
    424c:	10c00a17 	ldw	r3,40(r2)
    4250:	e0bff717 	ldw	r2,-36(fp)
    4254:	1880051e 	bne	r3,r2,426c <altera_avalon_jtag_uart_read+0x13c>
    4258:	e0bffb17 	ldw	r2,-20(fp)
    425c:	10c00917 	ldw	r3,36(r2)
    4260:	e0bffb17 	ldw	r2,-20(fp)
    4264:	10800117 	ldw	r2,4(r2)
    4268:	18bff736 	bltu	r3,r2,4248 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    426c:	e0bffb17 	ldw	r2,-20(fp)
    4270:	10c00a17 	ldw	r3,40(r2)
    4274:	e0bff717 	ldw	r2,-36(fp)
    4278:	18800326 	beq	r3,r2,4288 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    427c:	e0bffd17 	ldw	r2,-12(fp)
    4280:	10800048 	cmpgei	r2,r2,1
    4284:	103fb51e 	bne	r2,zero,415c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    4288:	e0fffa17 	ldw	r3,-24(fp)
    428c:	e0bffc17 	ldw	r2,-16(fp)
    4290:	18801926 	beq	r3,r2,42f8 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4294:	0005303a 	rdctl	r2,status
    4298:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    429c:	e0fff517 	ldw	r3,-44(fp)
    42a0:	00bfff84 	movi	r2,-2
    42a4:	1884703a 	and	r2,r3,r2
    42a8:	1001703a 	wrctl	status,r2
  
  return context;
    42ac:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    42b0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    42b4:	e0bffb17 	ldw	r2,-20(fp)
    42b8:	10800817 	ldw	r2,32(r2)
    42bc:	10c00054 	ori	r3,r2,1
    42c0:	e0bffb17 	ldw	r2,-20(fp)
    42c4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    42c8:	e0bffb17 	ldw	r2,-20(fp)
    42cc:	10800017 	ldw	r2,0(r2)
    42d0:	11000104 	addi	r4,r2,4
    42d4:	e0bffb17 	ldw	r2,-20(fp)
    42d8:	10800817 	ldw	r2,32(r2)
    42dc:	1007883a 	mov	r3,r2
    42e0:	2005883a 	mov	r2,r4
    42e4:	10c00035 	stwio	r3,0(r2)
    42e8:	e0bff917 	ldw	r2,-28(fp)
    42ec:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    42f0:	e0bff417 	ldw	r2,-48(fp)
    42f4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    42f8:	e0fffa17 	ldw	r3,-24(fp)
    42fc:	e0bffc17 	ldw	r2,-16(fp)
    4300:	18800526 	beq	r3,r2,4318 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    4304:	e0fffa17 	ldw	r3,-24(fp)
    4308:	e0bffc17 	ldw	r2,-16(fp)
    430c:	1887c83a 	sub	r3,r3,r2
    4310:	e0ffff15 	stw	r3,-4(fp)
    4314:	00000906 	br	433c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    4318:	e0bffe17 	ldw	r2,-8(fp)
    431c:	1090000c 	andi	r2,r2,16384
    4320:	1005003a 	cmpeq	r2,r2,zero
    4324:	1000031e 	bne	r2,zero,4334 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    4328:	00bffd44 	movi	r2,-11
    432c:	e0bfff15 	stw	r2,-4(fp)
    4330:	00000206 	br	433c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    4334:	00bffec4 	movi	r2,-5
    4338:	e0bfff15 	stw	r2,-4(fp)
    433c:	e0bfff17 	ldw	r2,-4(fp)
}
    4340:	e037883a 	mov	sp,fp
    4344:	dfc00117 	ldw	ra,4(sp)
    4348:	df000017 	ldw	fp,0(sp)
    434c:	dec00204 	addi	sp,sp,8
    4350:	f800283a 	ret

00004354 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    4354:	defff204 	addi	sp,sp,-56
    4358:	dfc00d15 	stw	ra,52(sp)
    435c:	df000c15 	stw	fp,48(sp)
    4360:	df000c04 	addi	fp,sp,48
    4364:	e13ffb15 	stw	r4,-20(fp)
    4368:	e17ffc15 	stw	r5,-16(fp)
    436c:	e1bffd15 	stw	r6,-12(fp)
    4370:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    4374:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    4378:	e0bffc17 	ldw	r2,-16(fp)
    437c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    4380:	00003a06 	br	446c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    4384:	e0bffb17 	ldw	r2,-20(fp)
    4388:	10800c17 	ldw	r2,48(r2)
    438c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    4390:	e0bffb17 	ldw	r2,-20(fp)
    4394:	10800d17 	ldw	r2,52(r2)
    4398:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    439c:	e0fffa17 	ldw	r3,-24(fp)
    43a0:	e0bff917 	ldw	r2,-28(fp)
    43a4:	1880062e 	bgeu	r3,r2,43c0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    43a8:	e0fff917 	ldw	r3,-28(fp)
    43ac:	e0bffa17 	ldw	r2,-24(fp)
    43b0:	1885c83a 	sub	r2,r3,r2
    43b4:	10bfffc4 	addi	r2,r2,-1
    43b8:	e0bff815 	stw	r2,-32(fp)
    43bc:	00000c06 	br	43f0 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    43c0:	e0bff917 	ldw	r2,-28(fp)
    43c4:	1005003a 	cmpeq	r2,r2,zero
    43c8:	1000051e 	bne	r2,zero,43e0 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    43cc:	00820004 	movi	r2,2048
    43d0:	e0fffa17 	ldw	r3,-24(fp)
    43d4:	10c5c83a 	sub	r2,r2,r3
    43d8:	e0bff815 	stw	r2,-32(fp)
    43dc:	00000406 	br	43f0 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    43e0:	0081ffc4 	movi	r2,2047
    43e4:	e0fffa17 	ldw	r3,-24(fp)
    43e8:	10c5c83a 	sub	r2,r2,r3
    43ec:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    43f0:	e0bff817 	ldw	r2,-32(fp)
    43f4:	1005003a 	cmpeq	r2,r2,zero
    43f8:	10001f1e 	bne	r2,zero,4478 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    43fc:	e0fffd17 	ldw	r3,-12(fp)
    4400:	e0bff817 	ldw	r2,-32(fp)
    4404:	1880022e 	bgeu	r3,r2,4410 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    4408:	e0bffd17 	ldw	r2,-12(fp)
    440c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    4410:	e0bffb17 	ldw	r2,-20(fp)
    4414:	10c20e04 	addi	r3,r2,2104
    4418:	e0bffa17 	ldw	r2,-24(fp)
    441c:	1885883a 	add	r2,r3,r2
    4420:	e0fffc17 	ldw	r3,-16(fp)
    4424:	1009883a 	mov	r4,r2
    4428:	180b883a 	mov	r5,r3
    442c:	e1bff817 	ldw	r6,-32(fp)
    4430:	00010780 	call	1078 <memcpy>
      ptr   += n;
    4434:	e0fff817 	ldw	r3,-32(fp)
    4438:	e0bffc17 	ldw	r2,-16(fp)
    443c:	10c5883a 	add	r2,r2,r3
    4440:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    4444:	e0fffd17 	ldw	r3,-12(fp)
    4448:	e0bff817 	ldw	r2,-32(fp)
    444c:	1885c83a 	sub	r2,r3,r2
    4450:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4454:	e0fffa17 	ldw	r3,-24(fp)
    4458:	e0bff817 	ldw	r2,-32(fp)
    445c:	1885883a 	add	r2,r3,r2
    4460:	10c1ffcc 	andi	r3,r2,2047
    4464:	e0bffb17 	ldw	r2,-20(fp)
    4468:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    446c:	e0bffd17 	ldw	r2,-12(fp)
    4470:	10800048 	cmpgei	r2,r2,1
    4474:	103fc31e 	bne	r2,zero,4384 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4478:	0005303a 	rdctl	r2,status
    447c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4480:	e0fff517 	ldw	r3,-44(fp)
    4484:	00bfff84 	movi	r2,-2
    4488:	1884703a 	and	r2,r3,r2
    448c:	1001703a 	wrctl	status,r2
  
  return context;
    4490:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    4494:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    4498:	e0bffb17 	ldw	r2,-20(fp)
    449c:	10800817 	ldw	r2,32(r2)
    44a0:	10c00094 	ori	r3,r2,2
    44a4:	e0bffb17 	ldw	r2,-20(fp)
    44a8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    44ac:	e0bffb17 	ldw	r2,-20(fp)
    44b0:	10800017 	ldw	r2,0(r2)
    44b4:	11000104 	addi	r4,r2,4
    44b8:	e0bffb17 	ldw	r2,-20(fp)
    44bc:	10800817 	ldw	r2,32(r2)
    44c0:	1007883a 	mov	r3,r2
    44c4:	2005883a 	mov	r2,r4
    44c8:	10c00035 	stwio	r3,0(r2)
    44cc:	e0bff717 	ldw	r2,-36(fp)
    44d0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    44d4:	e0bff417 	ldw	r2,-48(fp)
    44d8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    44dc:	e0bffd17 	ldw	r2,-12(fp)
    44e0:	10800050 	cmplti	r2,r2,1
    44e4:	1000111e 	bne	r2,zero,452c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    44e8:	e0bffe17 	ldw	r2,-8(fp)
    44ec:	1090000c 	andi	r2,r2,16384
    44f0:	1004c03a 	cmpne	r2,r2,zero
    44f4:	1000101e 	bne	r2,zero,4538 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    44f8:	e0bffb17 	ldw	r2,-20(fp)
    44fc:	10c00d17 	ldw	r3,52(r2)
    4500:	e0bff917 	ldw	r2,-28(fp)
    4504:	1880051e 	bne	r3,r2,451c <altera_avalon_jtag_uart_write+0x1c8>
    4508:	e0bffb17 	ldw	r2,-20(fp)
    450c:	10c00917 	ldw	r3,36(r2)
    4510:	e0bffb17 	ldw	r2,-20(fp)
    4514:	10800117 	ldw	r2,4(r2)
    4518:	18bff736 	bltu	r3,r2,44f8 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    451c:	e0bffb17 	ldw	r2,-20(fp)
    4520:	10c00d17 	ldw	r3,52(r2)
    4524:	e0bff917 	ldw	r2,-28(fp)
    4528:	18800326 	beq	r3,r2,4538 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
    452c:	e0bffd17 	ldw	r2,-12(fp)
    4530:	10800048 	cmpgei	r2,r2,1
    4534:	103fcd1e 	bne	r2,zero,446c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    4538:	e0fffc17 	ldw	r3,-16(fp)
    453c:	e0bff617 	ldw	r2,-40(fp)
    4540:	18800526 	beq	r3,r2,4558 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    4544:	e0fffc17 	ldw	r3,-16(fp)
    4548:	e0bff617 	ldw	r2,-40(fp)
    454c:	1887c83a 	sub	r3,r3,r2
    4550:	e0ffff15 	stw	r3,-4(fp)
    4554:	00000906 	br	457c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    4558:	e0bffe17 	ldw	r2,-8(fp)
    455c:	1090000c 	andi	r2,r2,16384
    4560:	1005003a 	cmpeq	r2,r2,zero
    4564:	1000031e 	bne	r2,zero,4574 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    4568:	00bffd44 	movi	r2,-11
    456c:	e0bfff15 	stw	r2,-4(fp)
    4570:	00000206 	br	457c <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    4574:	00bffec4 	movi	r2,-5
    4578:	e0bfff15 	stw	r2,-4(fp)
    457c:	e0bfff17 	ldw	r2,-4(fp)
}
    4580:	e037883a 	mov	sp,fp
    4584:	dfc00117 	ldw	ra,4(sp)
    4588:	df000017 	ldw	fp,0(sp)
    458c:	dec00204 	addi	sp,sp,8
    4590:	f800283a 	ret

00004594 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    4594:	defff904 	addi	sp,sp,-28
    4598:	dfc00615 	stw	ra,24(sp)
    459c:	df000515 	stw	fp,20(sp)
    45a0:	df000504 	addi	fp,sp,20
    45a4:	e13ffe15 	stw	r4,-8(fp)
    45a8:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    45ac:	e0bffe17 	ldw	r2,-8(fp)
    45b0:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    45b4:	e0bffe17 	ldw	r2,-8(fp)
    45b8:	10800104 	addi	r2,r2,4
    45bc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    45c0:	0005303a 	rdctl	r2,status
    45c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    45c8:	e0fffc17 	ldw	r3,-16(fp)
    45cc:	00bfff84 	movi	r2,-2
    45d0:	1884703a 	and	r2,r3,r2
    45d4:	1001703a 	wrctl	status,r2
  
  return context;
    45d8:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    45dc:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
    45e0:	0006ae00 	call	6ae0 <alt_tick>
    45e4:	e0bffd17 	ldw	r2,-12(fp)
    45e8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    45ec:	e0bffb17 	ldw	r2,-20(fp)
    45f0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    45f4:	e037883a 	mov	sp,fp
    45f8:	dfc00117 	ldw	ra,4(sp)
    45fc:	df000017 	ldw	fp,0(sp)
    4600:	dec00204 	addi	sp,sp,8
    4604:	f800283a 	ret

00004608 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    4608:	defff904 	addi	sp,sp,-28
    460c:	dfc00615 	stw	ra,24(sp)
    4610:	df000515 	stw	fp,20(sp)
    4614:	df000504 	addi	fp,sp,20
    4618:	e13ffc15 	stw	r4,-16(fp)
    461c:	e17ffd15 	stw	r5,-12(fp)
    4620:	e1bffe15 	stw	r6,-8(fp)
    4624:	e1ffff15 	stw	r7,-4(fp)
    4628:	e0bfff17 	ldw	r2,-4(fp)
    462c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    4630:	00800074 	movhi	r2,1
    4634:	10ac9c04 	addi	r2,r2,-19856
    4638:	10800017 	ldw	r2,0(r2)
    463c:	1004c03a 	cmpne	r2,r2,zero
    4640:	1000041e 	bne	r2,zero,4654 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    4644:	00c00074 	movhi	r3,1
    4648:	18ec9c04 	addi	r3,r3,-19856
    464c:	e0bffb17 	ldw	r2,-20(fp)
    4650:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    4654:	e0bffc17 	ldw	r2,-16(fp)
    4658:	10800104 	addi	r2,r2,4
    465c:	1007883a 	mov	r3,r2
    4660:	008001c4 	movi	r2,7
    4664:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    4668:	e13ffe17 	ldw	r4,-8(fp)
    466c:	e17ffc17 	ldw	r5,-16(fp)
    4670:	01800034 	movhi	r6,0
    4674:	31916504 	addi	r6,r6,17812
    4678:	00065c40 	call	65c4 <alt_irq_register>
#endif  
}
    467c:	e037883a 	mov	sp,fp
    4680:	dfc00117 	ldw	ra,4(sp)
    4684:	df000017 	ldw	fp,0(sp)
    4688:	dec00204 	addi	sp,sp,8
    468c:	f800283a 	ret

00004690 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    4690:	defffc04 	addi	sp,sp,-16
    4694:	df000315 	stw	fp,12(sp)
    4698:	df000304 	addi	fp,sp,12
    469c:	e13ffe15 	stw	r4,-8(fp)
    46a0:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    46a4:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
    46a8:	e0bfff17 	ldw	r2,-4(fp)
    46ac:	1004c03a 	cmpne	r2,r2,zero
    46b0:	1000061e 	bne	r2,zero,46cc <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
    46b4:	e0bffe17 	ldw	r2,-8(fp)
    46b8:	1007883a 	mov	r3,r2
    46bc:	e0bffd03 	ldbu	r2,-12(fp)
    46c0:	10c4b03a 	or	r2,r2,r3
    46c4:	e0bffd05 	stb	r2,-12(fp)
    46c8:	00000806 	br	46ec <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
    46cc:	e0bffe17 	ldw	r2,-8(fp)
    46d0:	1007883a 	mov	r3,r2
    46d4:	e0bffd03 	ldbu	r2,-12(fp)
    46d8:	10c4b03a 	or	r2,r2,r3
    46dc:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
    46e0:	e0bffd03 	ldbu	r2,-12(fp)
    46e4:	10801014 	ori	r2,r2,64
    46e8:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    46ec:	e0fffd03 	ldbu	r3,-12(fp)
    46f0:	00bfe004 	movi	r2,-128
    46f4:	1884b03a 	or	r2,r3,r2
    46f8:	10803fcc 	andi	r2,r2,255
}
    46fc:	e037883a 	mov	sp,fp
    4700:	df000017 	ldw	fp,0(sp)
    4704:	dec00104 	addi	sp,sp,4
    4708:	f800283a 	ret

0000470c <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    470c:	defffd04 	addi	sp,sp,-12
    4710:	df000215 	stw	fp,8(sp)
    4714:	df000204 	addi	fp,sp,8
    4718:	e13ffe15 	stw	r4,-8(fp)
    471c:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    4720:	e0bffe17 	ldw	r2,-8(fp)
    4724:	10800a17 	ldw	r2,40(r2)
    4728:	e0ffff03 	ldbu	r3,-4(fp)
    472c:	10c00025 	stbio	r3,0(r2)
}
    4730:	e037883a 	mov	sp,fp
    4734:	df000017 	ldw	fp,0(sp)
    4738:	dec00104 	addi	sp,sp,4
    473c:	f800283a 	ret

00004740 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    4740:	defffe04 	addi	sp,sp,-8
    4744:	df000115 	stw	fp,4(sp)
    4748:	df000104 	addi	fp,sp,4
    474c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    4750:	e0bfff17 	ldw	r2,-4(fp)
    4754:	10800a17 	ldw	r2,40(r2)
    4758:	1007883a 	mov	r3,r2
    475c:	00800044 	movi	r2,1
    4760:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    4764:	e037883a 	mov	sp,fp
    4768:	df000017 	ldw	fp,0(sp)
    476c:	dec00104 	addi	sp,sp,4
    4770:	f800283a 	ret

00004774 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    4774:	defffc04 	addi	sp,sp,-16
    4778:	dfc00315 	stw	ra,12(sp)
    477c:	df000215 	stw	fp,8(sp)
    4780:	df000204 	addi	fp,sp,8
    4784:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    4788:	e13fff17 	ldw	r4,-4(fp)
    478c:	01400074 	movhi	r5,1
    4790:	29650d04 	addi	r5,r5,-27596
    4794:	00063c40 	call	63c4 <alt_find_dev>
    4798:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    479c:	e0bffe17 	ldw	r2,-8(fp)
}
    47a0:	e037883a 	mov	sp,fp
    47a4:	dfc00117 	ldw	ra,4(sp)
    47a8:	df000017 	ldw	fp,0(sp)
    47ac:	dec00204 	addi	sp,sp,8
    47b0:	f800283a 	ret

000047b4 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    47b4:	defffb04 	addi	sp,sp,-20
    47b8:	df000415 	stw	fp,16(sp)
    47bc:	df000404 	addi	fp,sp,16
    47c0:	e13ffd15 	stw	r4,-12(fp)
    47c4:	e17ffe15 	stw	r5,-8(fp)
    47c8:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    47cc:	e03ffc15 	stw	zero,-16(fp)
    47d0:	00000f06 	br	4810 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    47d4:	e0bffd17 	ldw	r2,-12(fp)
    47d8:	10800a17 	ldw	r2,40(r2)
    47dc:	11000044 	addi	r4,r2,1
    47e0:	e0fffc17 	ldw	r3,-16(fp)
    47e4:	e0bffe17 	ldw	r2,-8(fp)
    47e8:	1885883a 	add	r2,r3,r2
    47ec:	10800003 	ldbu	r2,0(r2)
    47f0:	10c03fcc 	andi	r3,r2,255
    47f4:	18c0201c 	xori	r3,r3,128
    47f8:	18ffe004 	addi	r3,r3,-128
    47fc:	2005883a 	mov	r2,r4
    4800:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    4804:	e0bffc17 	ldw	r2,-16(fp)
    4808:	10800044 	addi	r2,r2,1
    480c:	e0bffc15 	stw	r2,-16(fp)
    4810:	e0fffc17 	ldw	r3,-16(fp)
    4814:	e0bfff17 	ldw	r2,-4(fp)
    4818:	18bfee36 	bltu	r3,r2,47d4 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    481c:	e037883a 	mov	sp,fp
    4820:	df000017 	ldw	fp,0(sp)
    4824:	dec00104 	addi	sp,sp,4
    4828:	f800283a 	ret

0000482c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    482c:	defffd04 	addi	sp,sp,-12
    4830:	df000215 	stw	fp,8(sp)
    4834:	df000204 	addi	fp,sp,8
    4838:	e13ffe15 	stw	r4,-8(fp)
    483c:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
    4840:	00000d06 	br	4878 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    4844:	e0bffe17 	ldw	r2,-8(fp)
    4848:	10800a17 	ldw	r2,40(r2)
    484c:	11000044 	addi	r4,r2,1
    4850:	e0bfff17 	ldw	r2,-4(fp)
    4854:	10800003 	ldbu	r2,0(r2)
    4858:	10c03fcc 	andi	r3,r2,255
    485c:	18c0201c 	xori	r3,r3,128
    4860:	18ffe004 	addi	r3,r3,-128
    4864:	2005883a 	mov	r2,r4
    4868:	10c00025 	stbio	r3,0(r2)
		++ptr;
    486c:	e0bfff17 	ldw	r2,-4(fp)
    4870:	10800044 	addi	r2,r2,1
    4874:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    4878:	e0bfff17 	ldw	r2,-4(fp)
    487c:	10800003 	ldbu	r2,0(r2)
    4880:	10803fcc 	andi	r2,r2,255
    4884:	1080201c 	xori	r2,r2,128
    4888:	10bfe004 	addi	r2,r2,-128
    488c:	1004c03a 	cmpne	r2,r2,zero
    4890:	103fec1e 	bne	r2,zero,4844 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    4894:	e037883a 	mov	sp,fp
    4898:	df000017 	ldw	fp,0(sp)
    489c:	dec00104 	addi	sp,sp,4
    48a0:	f800283a 	ret

000048a4 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    48a4:	defffb04 	addi	sp,sp,-20
    48a8:	dfc00415 	stw	ra,16(sp)
    48ac:	df000315 	stw	fp,12(sp)
    48b0:	df000304 	addi	fp,sp,12
    48b4:	e13ffd15 	stw	r4,-12(fp)
    48b8:	e17ffe15 	stw	r5,-8(fp)
    48bc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    48c0:	e0bffd17 	ldw	r2,-12(fp)
    48c4:	10800017 	ldw	r2,0(r2)
    48c8:	1009883a 	mov	r4,r2
    48cc:	e1bfff17 	ldw	r6,-4(fp)
    48d0:	e17ffe17 	ldw	r5,-8(fp)
    48d4:	00047b40 	call	47b4 <alt_up_character_lcd_write>
	return 0;
    48d8:	0005883a 	mov	r2,zero
}
    48dc:	e037883a 	mov	sp,fp
    48e0:	dfc00117 	ldw	ra,4(sp)
    48e4:	df000017 	ldw	fp,0(sp)
    48e8:	dec00204 	addi	sp,sp,8
    48ec:	f800283a 	ret

000048f0 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    48f0:	defff904 	addi	sp,sp,-28
    48f4:	dfc00615 	stw	ra,24(sp)
    48f8:	df000515 	stw	fp,20(sp)
    48fc:	df000504 	addi	fp,sp,20
    4900:	e13ffc15 	stw	r4,-16(fp)
    4904:	e17ffd15 	stw	r5,-12(fp)
    4908:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    490c:	e0bffd17 	ldw	r2,-12(fp)
    4910:	10800a28 	cmpgeui	r2,r2,40
    4914:	1000031e 	bne	r2,zero,4924 <alt_up_character_lcd_set_cursor_pos+0x34>
    4918:	e0bffe17 	ldw	r2,-8(fp)
    491c:	108000b0 	cmpltui	r2,r2,2
    4920:	1000031e 	bne	r2,zero,4930 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
    4924:	00bfffc4 	movi	r2,-1
    4928:	e0bfff15 	stw	r2,-4(fp)
    492c:	00000806 	br	4950 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    4930:	e13ffd17 	ldw	r4,-12(fp)
    4934:	e17ffe17 	ldw	r5,-8(fp)
    4938:	00046900 	call	4690 <get_DDRAM_addr>
    493c:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    4940:	e17ffb03 	ldbu	r5,-20(fp)
    4944:	e13ffc17 	ldw	r4,-16(fp)
    4948:	000470c0 	call	470c <alt_up_character_lcd_send_cmd>
	return 0;
    494c:	e03fff15 	stw	zero,-4(fp)
    4950:	e0bfff17 	ldw	r2,-4(fp)
}
    4954:	e037883a 	mov	sp,fp
    4958:	dfc00117 	ldw	ra,4(sp)
    495c:	df000017 	ldw	fp,0(sp)
    4960:	dec00204 	addi	sp,sp,8
    4964:	f800283a 	ret

00004968 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    4968:	defff904 	addi	sp,sp,-28
    496c:	dfc00615 	stw	ra,24(sp)
    4970:	df000515 	stw	fp,20(sp)
    4974:	df000504 	addi	fp,sp,20
    4978:	e13ffc15 	stw	r4,-16(fp)
    497c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    4980:	e0bffd17 	ldw	r2,-12(fp)
    4984:	1005003a 	cmpeq	r2,r2,zero
    4988:	10001e1e 	bne	r2,zero,4a04 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
    498c:	e0bffd17 	ldw	r2,-12(fp)
    4990:	10800050 	cmplti	r2,r2,1
    4994:	1000031e 	bne	r2,zero,49a4 <alt_up_character_lcd_shift_cursor+0x3c>
    4998:	00800504 	movi	r2,20
    499c:	e0bfff05 	stb	r2,-4(fp)
    49a0:	00000206 	br	49ac <alt_up_character_lcd_shift_cursor+0x44>
    49a4:	00c00404 	movi	r3,16
    49a8:	e0ffff05 	stb	r3,-4(fp)
    49ac:	e0bfff03 	ldbu	r2,-4(fp)
    49b0:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    49b4:	e0fffd17 	ldw	r3,-12(fp)
    49b8:	e0fffe15 	stw	r3,-8(fp)
    49bc:	e0fffe17 	ldw	r3,-8(fp)
    49c0:	1804403a 	cmpge	r2,r3,zero
    49c4:	1000031e 	bne	r2,zero,49d4 <alt_up_character_lcd_shift_cursor+0x6c>
    49c8:	e0bffe17 	ldw	r2,-8(fp)
    49cc:	0085c83a 	sub	r2,zero,r2
    49d0:	e0bffe15 	stw	r2,-8(fp)
    49d4:	e0fffe17 	ldw	r3,-8(fp)
    49d8:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    49dc:	00000306 	br	49ec <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    49e0:	e17ffb43 	ldbu	r5,-19(fp)
    49e4:	e13ffc17 	ldw	r4,-16(fp)
    49e8:	000470c0 	call	470c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    49ec:	e0bffb03 	ldbu	r2,-20(fp)
    49f0:	10bfffc4 	addi	r2,r2,-1
    49f4:	e0bffb05 	stb	r2,-20(fp)
    49f8:	e0bffb03 	ldbu	r2,-20(fp)
    49fc:	10803fd8 	cmpnei	r2,r2,255
    4a00:	103ff71e 	bne	r2,zero,49e0 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    4a04:	e037883a 	mov	sp,fp
    4a08:	dfc00117 	ldw	ra,4(sp)
    4a0c:	df000017 	ldw	fp,0(sp)
    4a10:	dec00204 	addi	sp,sp,8
    4a14:	f800283a 	ret

00004a18 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    4a18:	defff904 	addi	sp,sp,-28
    4a1c:	dfc00615 	stw	ra,24(sp)
    4a20:	df000515 	stw	fp,20(sp)
    4a24:	df000504 	addi	fp,sp,20
    4a28:	e13ffc15 	stw	r4,-16(fp)
    4a2c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    4a30:	e0bffd17 	ldw	r2,-12(fp)
    4a34:	1005003a 	cmpeq	r2,r2,zero
    4a38:	10001e1e 	bne	r2,zero,4ab4 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
    4a3c:	e0bffd17 	ldw	r2,-12(fp)
    4a40:	10800050 	cmplti	r2,r2,1
    4a44:	1000031e 	bne	r2,zero,4a54 <alt_up_character_lcd_shift_display+0x3c>
    4a48:	00800704 	movi	r2,28
    4a4c:	e0bfff05 	stb	r2,-4(fp)
    4a50:	00000206 	br	4a5c <alt_up_character_lcd_shift_display+0x44>
    4a54:	00c00604 	movi	r3,24
    4a58:	e0ffff05 	stb	r3,-4(fp)
    4a5c:	e0bfff03 	ldbu	r2,-4(fp)
    4a60:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    4a64:	e0fffd17 	ldw	r3,-12(fp)
    4a68:	e0fffe15 	stw	r3,-8(fp)
    4a6c:	e0fffe17 	ldw	r3,-8(fp)
    4a70:	1804403a 	cmpge	r2,r3,zero
    4a74:	1000031e 	bne	r2,zero,4a84 <alt_up_character_lcd_shift_display+0x6c>
    4a78:	e0bffe17 	ldw	r2,-8(fp)
    4a7c:	0085c83a 	sub	r2,zero,r2
    4a80:	e0bffe15 	stw	r2,-8(fp)
    4a84:	e0fffe17 	ldw	r3,-8(fp)
    4a88:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    4a8c:	00000306 	br	4a9c <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    4a90:	e17ffb43 	ldbu	r5,-19(fp)
    4a94:	e13ffc17 	ldw	r4,-16(fp)
    4a98:	000470c0 	call	470c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    4a9c:	e0bffb03 	ldbu	r2,-20(fp)
    4aa0:	10bfffc4 	addi	r2,r2,-1
    4aa4:	e0bffb05 	stb	r2,-20(fp)
    4aa8:	e0bffb03 	ldbu	r2,-20(fp)
    4aac:	10803fd8 	cmpnei	r2,r2,255
    4ab0:	103ff71e 	bne	r2,zero,4a90 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    4ab4:	e037883a 	mov	sp,fp
    4ab8:	dfc00117 	ldw	ra,4(sp)
    4abc:	df000017 	ldw	fp,0(sp)
    4ac0:	dec00204 	addi	sp,sp,8
    4ac4:	f800283a 	ret

00004ac8 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    4ac8:	defff904 	addi	sp,sp,-28
    4acc:	dfc00615 	stw	ra,24(sp)
    4ad0:	df000515 	stw	fp,20(sp)
    4ad4:	df000504 	addi	fp,sp,20
    4ad8:	e13ffc15 	stw	r4,-16(fp)
    4adc:	e17ffd15 	stw	r5,-12(fp)
    4ae0:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    4ae4:	e0bffd17 	ldw	r2,-12(fp)
    4ae8:	10800a28 	cmpgeui	r2,r2,40
    4aec:	1000031e 	bne	r2,zero,4afc <alt_up_character_lcd_erase_pos+0x34>
    4af0:	e0bffe17 	ldw	r2,-8(fp)
    4af4:	108000b0 	cmpltui	r2,r2,2
    4af8:	1000031e 	bne	r2,zero,4b08 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
    4afc:	00bfffc4 	movi	r2,-1
    4b00:	e0bfff15 	stw	r2,-4(fp)
    4b04:	00000e06 	br	4b40 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    4b08:	e13ffd17 	ldw	r4,-12(fp)
    4b0c:	e17ffe17 	ldw	r5,-8(fp)
    4b10:	00046900 	call	4690 <get_DDRAM_addr>
    4b14:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    4b18:	e17ffb03 	ldbu	r5,-20(fp)
    4b1c:	e13ffc17 	ldw	r4,-16(fp)
    4b20:	000470c0 	call	470c <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    4b24:	e0bffc17 	ldw	r2,-16(fp)
    4b28:	10800a17 	ldw	r2,40(r2)
    4b2c:	10800044 	addi	r2,r2,1
    4b30:	1007883a 	mov	r3,r2
    4b34:	00800084 	movi	r2,2
    4b38:	18800025 	stbio	r2,0(r3)
	return 0;
    4b3c:	e03fff15 	stw	zero,-4(fp)
    4b40:	e0bfff17 	ldw	r2,-4(fp)
}
    4b44:	e037883a 	mov	sp,fp
    4b48:	dfc00117 	ldw	ra,4(sp)
    4b4c:	df000017 	ldw	fp,0(sp)
    4b50:	dec00204 	addi	sp,sp,8
    4b54:	f800283a 	ret

00004b58 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    4b58:	defffd04 	addi	sp,sp,-12
    4b5c:	dfc00215 	stw	ra,8(sp)
    4b60:	df000115 	stw	fp,4(sp)
    4b64:	df000104 	addi	fp,sp,4
    4b68:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    4b6c:	e13fff17 	ldw	r4,-4(fp)
    4b70:	01400304 	movi	r5,12
    4b74:	000470c0 	call	470c <alt_up_character_lcd_send_cmd>
}
    4b78:	e037883a 	mov	sp,fp
    4b7c:	dfc00117 	ldw	ra,4(sp)
    4b80:	df000017 	ldw	fp,0(sp)
    4b84:	dec00204 	addi	sp,sp,8
    4b88:	f800283a 	ret

00004b8c <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    4b8c:	defffd04 	addi	sp,sp,-12
    4b90:	dfc00215 	stw	ra,8(sp)
    4b94:	df000115 	stw	fp,4(sp)
    4b98:	df000104 	addi	fp,sp,4
    4b9c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    4ba0:	e13fff17 	ldw	r4,-4(fp)
    4ba4:	014003c4 	movi	r5,15
    4ba8:	000470c0 	call	470c <alt_up_character_lcd_send_cmd>
}
    4bac:	e037883a 	mov	sp,fp
    4bb0:	dfc00117 	ldw	ra,4(sp)
    4bb4:	df000017 	ldw	fp,0(sp)
    4bb8:	dec00204 	addi	sp,sp,8
    4bbc:	f800283a 	ret

00004bc0 <alt_up_ethernet_init>:
#include "altera_up_avalon_ethernet.h"
#include "altera_up_avalon_ethernet_regs.h"
#include "altera_up_avalon_ethernet_low_level_driver.h"

void alt_up_ethernet_init(alt_up_ethernet_dev *ethernet)
{
    4bc0:	defffb04 	addi	sp,sp,-20
    4bc4:	dfc00415 	stw	ra,16(sp)
    4bc8:	df000315 	stw	fp,12(sp)
    4bcc:	df000304 	addi	fp,sp,12
    4bd0:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned int base = ethernet->base;
    4bd4:	e0bfff17 	ldw	r2,-4(fp)
    4bd8:	10800a17 	ldw	r2,40(r2)
    4bdc:	e0bffe15 	stw	r2,-8(fp)
	int i;

	// Power on the internal PHY
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_GPR, 0x00 );
    4be0:	e13ffe17 	ldw	r4,-8(fp)
    4be4:	014007c4 	movi	r5,31
    4be8:	000d883a 	mov	r6,zero
    4bec:	0004d4c0 	call	4d4c <alt_up_ethernet_reg_write>

	// Software Reset of the Ethernet chip
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NCR, 0x01 );
    4bf0:	e13ffe17 	ldw	r4,-8(fp)
    4bf4:	000b883a 	mov	r5,zero
    4bf8:	01800044 	movi	r6,1
    4bfc:	0004d4c0 	call	4d4c <alt_up_ethernet_reg_write>
	usleep(10);
    4c00:	01000284 	movi	r4,10
    4c04:	0006bec0 	call	6bec <usleep>
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NCR, 0x00 );
    4c08:	e13ffe17 	ldw	r4,-8(fp)
    4c0c:	000b883a 	mov	r5,zero
    4c10:	000d883a 	mov	r6,zero
    4c14:	0004d4c0 	call	4d4c <alt_up_ethernet_reg_write>
	usleep(1);
    4c18:	01000044 	movi	r4,1
    4c1c:	0006bec0 	call	6bec <usleep>

	// Initialize the MAC Address
	for (i = 0; i < 6; i++) 
    4c20:	e03ffd15 	stw	zero,-12(fp)
    4c24:	00000e06 	br	4c60 <alt_up_ethernet_init+0xa0>
		alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_PAR + i, ethernet->mac_addr[i] );
    4c28:	e0bffd17 	ldw	r2,-12(fp)
    4c2c:	10800404 	addi	r2,r2,16
    4c30:	100b883a 	mov	r5,r2
    4c34:	e0fffd17 	ldw	r3,-12(fp)
    4c38:	e0bfff17 	ldw	r2,-4(fp)
    4c3c:	1885883a 	add	r2,r3,r2
    4c40:	10800d04 	addi	r2,r2,52
    4c44:	10800003 	ldbu	r2,0(r2)
    4c48:	11803fcc 	andi	r6,r2,255
    4c4c:	e13ffe17 	ldw	r4,-8(fp)
    4c50:	0004d4c0 	call	4d4c <alt_up_ethernet_reg_write>
	usleep(10);
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NCR, 0x00 );
	usleep(1);

	// Initialize the MAC Address
	for (i = 0; i < 6; i++) 
    4c54:	e0bffd17 	ldw	r2,-12(fp)
    4c58:	10800044 	addi	r2,r2,1
    4c5c:	e0bffd15 	stw	r2,-12(fp)
    4c60:	e0bffd17 	ldw	r2,-12(fp)
    4c64:	10800190 	cmplti	r2,r2,6
    4c68:	103fef1e 	bne	r2,zero,4c28 <alt_up_ethernet_init+0x68>
		alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_PAR + i, ethernet->mac_addr[i] );

	/* clear any pending interrupt */
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_ISR,  0x3F );
    4c6c:	e13ffe17 	ldw	r4,-8(fp)
    4c70:	01403f84 	movi	r5,254
    4c74:	01800fc4 	movi	r6,63
    4c78:	0004d4c0 	call	4d4c <alt_up_ethernet_reg_write>
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NSR,  0x2C );
    4c7c:	e13ffe17 	ldw	r4,-8(fp)
    4c80:	01400044 	movi	r5,1
    4c84:	01800b04 	movi	r6,44
    4c88:	0004d4c0 	call	4d4c <alt_up_ethernet_reg_write>

	/* set PAR bit, don't enable interrupts (do that with the set_interrupts() function */
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_IMR, 0x80 );
    4c8c:	e13ffe17 	ldw	r4,-8(fp)
    4c90:	01403fc4 	movi	r5,255
    4c94:	01802004 	movi	r6,128
    4c98:	0004d4c0 	call	4d4c <alt_up_ethernet_reg_write>

	/* enable RX (Broadcast/ ALL_MULTICAST) */
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_RCR, 0x39 );
    4c9c:	e13ffe17 	ldw	r4,-8(fp)
    4ca0:	01400144 	movi	r5,5
    4ca4:	01800e44 	movi	r6,57
    4ca8:	0004d4c0 	call	4d4c <alt_up_ethernet_reg_write>

	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_ETXCSR, 0x03 );
    4cac:	e13ffe17 	ldw	r4,-8(fp)
    4cb0:	01400c04 	movi	r5,48
    4cb4:	018000c4 	movi	r6,3
    4cb8:	0004d4c0 	call	4d4c <alt_up_ethernet_reg_write>

	return;
}
    4cbc:	e037883a 	mov	sp,fp
    4cc0:	dfc00117 	ldw	ra,4(sp)
    4cc4:	df000017 	ldw	fp,0(sp)
    4cc8:	dec00204 	addi	sp,sp,8
    4ccc:	f800283a 	ret

00004cd0 <alt_up_ethernet_open_dev>:

alt_up_ethernet_dev* alt_up_ethernet_open_dev(const char* name)
{
    4cd0:	defffc04 	addi	sp,sp,-16
    4cd4:	dfc00315 	stw	ra,12(sp)
    4cd8:	df000215 	stw	fp,8(sp)
    4cdc:	df000204 	addi	fp,sp,8
    4ce0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ethernet_dev * dev = (alt_up_ethernet_dev *) alt_find_dev( name, &alt_dev_list );
    4ce4:	e13fff17 	ldw	r4,-4(fp)
    4ce8:	01400074 	movhi	r5,1
    4cec:	29650d04 	addi	r5,r5,-27596
    4cf0:	00063c40 	call	63c4 <alt_find_dev>
    4cf4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    4cf8:	e0bffe17 	ldw	r2,-8(fp)
}
    4cfc:	e037883a 	mov	sp,fp
    4d00:	dfc00117 	ldw	ra,4(sp)
    4d04:	df000017 	ldw	fp,0(sp)
    4d08:	dec00204 	addi	sp,sp,8
    4d0c:	f800283a 	ret

00004d10 <alt_up_ethernet_reg_read>:
#include "altera_up_avalon_ethernet_low_level_driver.h"
#include "altera_up_avalon_ethernet_regs.h"
#include <unistd.h>

unsigned int alt_up_ethernet_reg_read(unsigned int base, unsigned int reg)
{
    4d10:	defffd04 	addi	sp,sp,-12
    4d14:	df000215 	stw	fp,8(sp)
    4d18:	df000204 	addi	fp,sp,8
    4d1c:	e13ffe15 	stw	r4,-8(fp)
    4d20:	e17fff15 	stw	r5,-4(fp)
	IOWR_ALTERA_UP_AVALON_ETHERNET_INDEX(base, reg);
    4d24:	e0bffe17 	ldw	r2,-8(fp)
    4d28:	e0ffff17 	ldw	r3,-4(fp)
    4d2c:	10c00035 	stwio	r3,0(r2)
	return IORD_ALTERA_UP_AVALON_ETHERNET_DATA(base);
    4d30:	e0bffe17 	ldw	r2,-8(fp)
    4d34:	10800104 	addi	r2,r2,4
    4d38:	10800037 	ldwio	r2,0(r2)
}
    4d3c:	e037883a 	mov	sp,fp
    4d40:	df000017 	ldw	fp,0(sp)
    4d44:	dec00104 	addi	sp,sp,4
    4d48:	f800283a 	ret

00004d4c <alt_up_ethernet_reg_write>:

void alt_up_ethernet_reg_write(unsigned int base, unsigned int reg, unsigned int data)
{
    4d4c:	defffc04 	addi	sp,sp,-16
    4d50:	df000315 	stw	fp,12(sp)
    4d54:	df000304 	addi	fp,sp,12
    4d58:	e13ffd15 	stw	r4,-12(fp)
    4d5c:	e17ffe15 	stw	r5,-8(fp)
    4d60:	e1bfff15 	stw	r6,-4(fp)
	IOWR_ALTERA_UP_AVALON_ETHERNET_INDEX(base, reg);
    4d64:	e0bffd17 	ldw	r2,-12(fp)
    4d68:	e0fffe17 	ldw	r3,-8(fp)
    4d6c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_UP_AVALON_ETHERNET_DATA(base, data);
    4d70:	e0bffd17 	ldw	r2,-12(fp)
    4d74:	10800104 	addi	r2,r2,4
    4d78:	e0ffff17 	ldw	r3,-4(fp)
    4d7c:	10c00035 	stwio	r3,0(r2)
}
    4d80:	e037883a 	mov	sp,fp
    4d84:	df000017 	ldw	fp,0(sp)
    4d88:	dec00104 	addi	sp,sp,4
    4d8c:	f800283a 	ret

00004d90 <alt_up_ethernet_phy_reg_read>:

unsigned int alt_up_ethernet_phy_reg_read (unsigned int base, unsigned int reg)
{
    4d90:	defffa04 	addi	sp,sp,-24
    4d94:	dfc00515 	stw	ra,20(sp)
    4d98:	df000415 	stw	fp,16(sp)
    4d9c:	df000404 	addi	fp,sp,16
    4da0:	e13ffe15 	stw	r4,-8(fp)
    4da4:	e17fff15 	stw	r5,-4(fp)
	unsigned int result = 0;
    4da8:	e03ffd15 	stw	zero,-12(fp)
	unsigned int timeout = 0;
    4dac:	e03ffc15 	stw	zero,-16(fp)

	/* set PHY register address into EPAR REG. 0CH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPAR, reg | 0x40);				/* PHY register address setting, and DM9000_PHY offset = 0x40 */
    4db0:	e0bfff17 	ldw	r2,-4(fp)
    4db4:	11801014 	ori	r6,r2,64
    4db8:	e13ffe17 	ldw	r4,-8(fp)
    4dbc:	01400304 	movi	r5,12
    4dc0:	0004d4c0 	call	4d4c <alt_up_ethernet_reg_write>

	/* issue PHY + READ command = 0xC into EPCR REG. 0BH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x0C);					/* issue PHY + READ command */
    4dc4:	e13ffe17 	ldw	r4,-8(fp)
    4dc8:	014002c4 	movi	r5,11
    4dcc:	01800304 	movi	r6,12
    4dd0:	0004d4c0 	call	4d4c <alt_up_ethernet_reg_write>
	do {
		usleep(1);
    4dd4:	01000044 	movi	r4,1
    4dd8:	0006bec0 	call	6bec <usleep>
		timeout++;
    4ddc:	e0bffc17 	ldw	r2,-16(fp)
    4de0:	10800044 	addi	r2,r2,1
    4de4:	e0bffc15 	stw	r2,-16(fp)
	} while ((timeout < 50) && (alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPCR) & 0x01));
    4de8:	e0bffc17 	ldw	r2,-16(fp)
    4dec:	10800ca8 	cmpgeui	r2,r2,50
    4df0:	1000071e 	bne	r2,zero,4e10 <alt_up_ethernet_phy_reg_read+0x80>
    4df4:	e13ffe17 	ldw	r4,-8(fp)
    4df8:	014002c4 	movi	r5,11
    4dfc:	0004d100 	call	4d10 <alt_up_ethernet_reg_read>
    4e00:	1080004c 	andi	r2,r2,1
    4e04:	10803fcc 	andi	r2,r2,255
    4e08:	1004c03a 	cmpne	r2,r2,zero
    4e0c:	103ff11e 	bne	r2,zero,4dd4 <alt_up_ethernet_phy_reg_read+0x44>
	
	usleep(1);
    4e10:	01000044 	movi	r4,1
    4e14:	0006bec0 	call	6bec <usleep>
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x08);					/* clear PHY command */
    4e18:	e13ffe17 	ldw	r4,-8(fp)
    4e1c:	014002c4 	movi	r5,11
    4e20:	01800204 	movi	r6,8
    4e24:	0004d4c0 	call	4d4c <alt_up_ethernet_reg_write>

	/* read PHY data from EPDR REG. 0EH & REG. 0DH */
	result = (alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPDRH) << 8);			/* PHY data high_byte */
    4e28:	e13ffe17 	ldw	r4,-8(fp)
    4e2c:	01400384 	movi	r5,14
    4e30:	0004d100 	call	4d10 <alt_up_ethernet_reg_read>
    4e34:	1004923a 	slli	r2,r2,8
    4e38:	e0bffd15 	stw	r2,-12(fp)
	result |= alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPDRL);				/* PHY data low_byte */
    4e3c:	e13ffe17 	ldw	r4,-8(fp)
    4e40:	01400344 	movi	r5,13
    4e44:	0004d100 	call	4d10 <alt_up_ethernet_reg_read>
    4e48:	1007883a 	mov	r3,r2
    4e4c:	e0bffd17 	ldw	r2,-12(fp)
    4e50:	10c4b03a 	or	r2,r2,r3
    4e54:	e0bffd15 	stw	r2,-12(fp)

	return result;
    4e58:	e0bffd17 	ldw	r2,-12(fp)
}
    4e5c:	e037883a 	mov	sp,fp
    4e60:	dfc00117 	ldw	ra,4(sp)
    4e64:	df000017 	ldw	fp,0(sp)
    4e68:	dec00204 	addi	sp,sp,8
    4e6c:	f800283a 	ret

00004e70 <alt_up_ethernet_phy_reg_write>:

void alt_up_ethernet_phy_reg_write (unsigned int base, unsigned int reg, unsigned int data)
{ 
    4e70:	defffa04 	addi	sp,sp,-24
    4e74:	dfc00515 	stw	ra,20(sp)
    4e78:	df000415 	stw	fp,16(sp)
    4e7c:	df000404 	addi	fp,sp,16
    4e80:	e13ffd15 	stw	r4,-12(fp)
    4e84:	e17ffe15 	stw	r5,-8(fp)
    4e88:	e1bfff15 	stw	r6,-4(fp)
	unsigned int timeout = 0;
    4e8c:	e03ffc15 	stw	zero,-16(fp)
	
	/* set PHY register address into EPAR REG. 0CH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPAR, reg | 0x40);				/* PHY register address setting, and DM9000_PHY offset = 0x40 */
    4e90:	e0bffe17 	ldw	r2,-8(fp)
    4e94:	11801014 	ori	r6,r2,64
    4e98:	e13ffd17 	ldw	r4,-12(fp)
    4e9c:	01400304 	movi	r5,12
    4ea0:	0004d4c0 	call	4d4c <alt_up_ethernet_reg_write>

	/* fill PHY WRITE data into EPDR REG. 0EH & REG. 0DH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPDRH, ((data >> 8) & 0xFF));	/* PHY data high_byte */
    4ea4:	e0bfff17 	ldw	r2,-4(fp)
    4ea8:	1004d23a 	srli	r2,r2,8
    4eac:	11803fcc 	andi	r6,r2,255
    4eb0:	e13ffd17 	ldw	r4,-12(fp)
    4eb4:	01400384 	movi	r5,14
    4eb8:	0004d4c0 	call	4d4c <alt_up_ethernet_reg_write>
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPDRL, data & 0xFF);			/* PHY data low_byte */
    4ebc:	e0bfff17 	ldw	r2,-4(fp)
    4ec0:	11803fcc 	andi	r6,r2,255
    4ec4:	e13ffd17 	ldw	r4,-12(fp)
    4ec8:	01400344 	movi	r5,13
    4ecc:	0004d4c0 	call	4d4c <alt_up_ethernet_reg_write>

	/* issue PHY + WRITE command = 0xA into EPCR REG. 0BH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x0A);					/* issue PHY + WRITE command */
    4ed0:	e13ffd17 	ldw	r4,-12(fp)
    4ed4:	014002c4 	movi	r5,11
    4ed8:	01800284 	movi	r6,10
    4edc:	0004d4c0 	call	4d4c <alt_up_ethernet_reg_write>
	do {
		usleep(1);
    4ee0:	01000044 	movi	r4,1
    4ee4:	0006bec0 	call	6bec <usleep>
		timeout++;
    4ee8:	e0bffc17 	ldw	r2,-16(fp)
    4eec:	10800044 	addi	r2,r2,1
    4ef0:	e0bffc15 	stw	r2,-16(fp)
	} while ((timeout < 50) && (alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPCR) & 0x01));
    4ef4:	e0bffc17 	ldw	r2,-16(fp)
    4ef8:	10800ca8 	cmpgeui	r2,r2,50
    4efc:	1000071e 	bne	r2,zero,4f1c <alt_up_ethernet_phy_reg_write+0xac>
    4f00:	e13ffd17 	ldw	r4,-12(fp)
    4f04:	014002c4 	movi	r5,11
    4f08:	0004d100 	call	4d10 <alt_up_ethernet_reg_read>
    4f0c:	1080004c 	andi	r2,r2,1
    4f10:	10803fcc 	andi	r2,r2,255
    4f14:	1004c03a 	cmpne	r2,r2,zero
    4f18:	103ff11e 	bne	r2,zero,4ee0 <alt_up_ethernet_phy_reg_write+0x70>
	
	usleep(1);
    4f1c:	01000044 	movi	r4,1
    4f20:	0006bec0 	call	6bec <usleep>
	
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x08);					/* clear PHY command */
    4f24:	e13ffd17 	ldw	r4,-12(fp)
    4f28:	014002c4 	movi	r5,11
    4f2c:	01800204 	movi	r6,8
    4f30:	0004d4c0 	call	4d4c <alt_up_ethernet_reg_write>
}
    4f34:	e037883a 	mov	sp,fp
    4f38:	dfc00117 	ldw	ra,4(sp)
    4f3c:	df000017 	ldw	fp,0(sp)
    4f40:	dec00204 	addi	sp,sp,8
    4f44:	f800283a 	ret

00004f48 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
    4f48:	defffd04 	addi	sp,sp,-12
    4f4c:	df000215 	stw	fp,8(sp)
    4f50:	df000204 	addi	fp,sp,8
    4f54:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    4f58:	e0bfff17 	ldw	r2,-4(fp)
    4f5c:	10800a17 	ldw	r2,40(r2)
    4f60:	10800104 	addi	r2,r2,4
    4f64:	10800037 	ldwio	r2,0(r2)
    4f68:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
    4f6c:	e0bffe17 	ldw	r2,-8(fp)
    4f70:	10800054 	ori	r2,r2,1
    4f74:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    4f78:	e0bfff17 	ldw	r2,-4(fp)
    4f7c:	10800a17 	ldw	r2,40(r2)
    4f80:	10800104 	addi	r2,r2,4
    4f84:	e0fffe17 	ldw	r3,-8(fp)
    4f88:	10c00035 	stwio	r3,0(r2)
}
    4f8c:	e037883a 	mov	sp,fp
    4f90:	df000017 	ldw	fp,0(sp)
    4f94:	dec00104 	addi	sp,sp,4
    4f98:	f800283a 	ret

00004f9c <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
    4f9c:	defffd04 	addi	sp,sp,-12
    4fa0:	df000215 	stw	fp,8(sp)
    4fa4:	df000204 	addi	fp,sp,8
    4fa8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    4fac:	e0bfff17 	ldw	r2,-4(fp)
    4fb0:	10800a17 	ldw	r2,40(r2)
    4fb4:	10800104 	addi	r2,r2,4
    4fb8:	10800037 	ldwio	r2,0(r2)
    4fbc:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
    4fc0:	e0fffe17 	ldw	r3,-8(fp)
    4fc4:	00bfff84 	movi	r2,-2
    4fc8:	1884703a 	and	r2,r3,r2
    4fcc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    4fd0:	e0bfff17 	ldw	r2,-4(fp)
    4fd4:	10800a17 	ldw	r2,40(r2)
    4fd8:	10800104 	addi	r2,r2,4
    4fdc:	e0fffe17 	ldw	r3,-8(fp)
    4fe0:	10c00035 	stwio	r3,0(r2)
}
    4fe4:	e037883a 	mov	sp,fp
    4fe8:	df000017 	ldw	fp,0(sp)
    4fec:	dec00104 	addi	sp,sp,4
    4ff0:	f800283a 	ret

00004ff4 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
    4ff4:	defffd04 	addi	sp,sp,-12
    4ff8:	df000215 	stw	fp,8(sp)
    4ffc:	df000204 	addi	fp,sp,8
    5000:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    5004:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    5008:	e0bfff17 	ldw	r2,-4(fp)
    500c:	10800a17 	ldw	r2,40(r2)
    5010:	10800084 	addi	r2,r2,2
    5014:	1080002b 	ldhuio	r2,0(r2)
    5018:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
    501c:	e0bffe0b 	ldhu	r2,-8(fp)
}
    5020:	e037883a 	mov	sp,fp
    5024:	df000017 	ldw	fp,0(sp)
    5028:	dec00104 	addi	sp,sp,4
    502c:	f800283a 	ret

00005030 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
    5030:	defffd04 	addi	sp,sp,-12
    5034:	df000215 	stw	fp,8(sp)
    5038:	df000204 	addi	fp,sp,8
    503c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    5040:	e0bfff17 	ldw	r2,-4(fp)
    5044:	10800a17 	ldw	r2,40(r2)
    5048:	10800104 	addi	r2,r2,4
    504c:	10800037 	ldwio	r2,0(r2)
    5050:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
    5054:	e0bffe17 	ldw	r2,-8(fp)
    5058:	10bfffec 	andhi	r2,r2,65535
    505c:	1004d43a 	srli	r2,r2,16
}
    5060:	e037883a 	mov	sp,fp
    5064:	df000017 	ldw	fp,0(sp)
    5068:	dec00104 	addi	sp,sp,4
    506c:	f800283a 	ret

00005070 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
    5070:	defffc04 	addi	sp,sp,-16
    5074:	df000315 	stw	fp,12(sp)
    5078:	df000304 	addi	fp,sp,12
    507c:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
    5080:	e0bffe17 	ldw	r2,-8(fp)
    5084:	1080800c 	andi	r2,r2,512
    5088:	1004d27a 	srli	r2,r2,9
    508c:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
    5090:	e0bffd17 	ldw	r2,-12(fp)
    5094:	1005003a 	cmpeq	r2,r2,zero
    5098:	1000031e 	bne	r2,zero,50a8 <alt_up_irda_check_parity+0x38>
    509c:	00bfffc4 	movi	r2,-1
    50a0:	e0bfff15 	stw	r2,-4(fp)
    50a4:	00000106 	br	50ac <alt_up_irda_check_parity+0x3c>
    50a8:	e03fff15 	stw	zero,-4(fp)
    50ac:	e0bfff17 	ldw	r2,-4(fp)
}
    50b0:	e037883a 	mov	sp,fp
    50b4:	df000017 	ldw	fp,0(sp)
    50b8:	dec00104 	addi	sp,sp,4
    50bc:	f800283a 	ret

000050c0 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
    50c0:	defffc04 	addi	sp,sp,-16
    50c4:	df000315 	stw	fp,12(sp)
    50c8:	df000304 	addi	fp,sp,12
    50cc:	e13ffe15 	stw	r4,-8(fp)
    50d0:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    50d4:	e0bffe17 	ldw	r2,-8(fp)
    50d8:	10800a17 	ldw	r2,40(r2)
    50dc:	10800037 	ldwio	r2,0(r2)
    50e0:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    50e4:	e0bffe17 	ldw	r2,-8(fp)
    50e8:	10800a17 	ldw	r2,40(r2)
    50ec:	e0ffff03 	ldbu	r3,-4(fp)
    50f0:	10c00035 	stwio	r3,0(r2)
	return 0;
    50f4:	0005883a 	mov	r2,zero
}
    50f8:	e037883a 	mov	sp,fp
    50fc:	df000017 	ldw	fp,0(sp)
    5100:	dec00104 	addi	sp,sp,4
    5104:	f800283a 	ret

00005108 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    5108:	defffa04 	addi	sp,sp,-24
    510c:	dfc00515 	stw	ra,20(sp)
    5110:	df000415 	stw	fp,16(sp)
    5114:	df000404 	addi	fp,sp,16
    5118:	e13ffd15 	stw	r4,-12(fp)
    511c:	e17ffe15 	stw	r5,-8(fp)
    5120:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    5124:	e0bffd17 	ldw	r2,-12(fp)
    5128:	10800a17 	ldw	r2,40(r2)
    512c:	10800037 	ldwio	r2,0(r2)
    5130:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    5134:	e0bffc17 	ldw	r2,-16(fp)
    5138:	1007883a 	mov	r3,r2
    513c:	e0bffe17 	ldw	r2,-8(fp)
    5140:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
    5144:	e13ffc17 	ldw	r4,-16(fp)
    5148:	00050700 	call	5070 <alt_up_irda_check_parity>
    514c:	1007883a 	mov	r3,r2
    5150:	e0bfff17 	ldw	r2,-4(fp)
    5154:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
    5158:	e0bffc17 	ldw	r2,-16(fp)
    515c:	10a0000c 	andi	r2,r2,32768
    5160:	1004d3fa 	srli	r2,r2,15
    5164:	10bfffc4 	addi	r2,r2,-1
}
    5168:	e037883a 	mov	sp,fp
    516c:	dfc00117 	ldw	ra,4(sp)
    5170:	df000017 	ldw	fp,0(sp)
    5174:	dec00204 	addi	sp,sp,8
    5178:	f800283a 	ret

0000517c <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    517c:	defff804 	addi	sp,sp,-32
    5180:	dfc00715 	stw	ra,28(sp)
    5184:	df000615 	stw	fp,24(sp)
    5188:	df000604 	addi	fp,sp,24
    518c:	e13ffd15 	stw	r4,-12(fp)
    5190:	e17ffe15 	stw	r5,-8(fp)
    5194:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    5198:	e0bffd17 	ldw	r2,-12(fp)
    519c:	10800017 	ldw	r2,0(r2)
    51a0:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    51a4:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    51a8:	00000c06 	br	51dc <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, ptr++, &parity_error)==0)
    51ac:	e17ffe17 	ldw	r5,-8(fp)
    51b0:	e0bffe17 	ldw	r2,-8(fp)
    51b4:	10800044 	addi	r2,r2,1
    51b8:	e0bffe15 	stw	r2,-8(fp)
    51bc:	e1bffc04 	addi	r6,fp,-16
    51c0:	e13ffb17 	ldw	r4,-20(fp)
    51c4:	00051080 	call	5108 <alt_up_irda_read_data>
    51c8:	1004c03a 	cmpne	r2,r2,zero
    51cc:	1000091e 	bne	r2,zero,51f4 <alt_up_irda_read_fd+0x78>
			count++;
    51d0:	e0bffa17 	ldw	r2,-24(fp)
    51d4:	10800044 	addi	r2,r2,1
    51d8:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    51dc:	e0bfff17 	ldw	r2,-4(fp)
    51e0:	10bfffc4 	addi	r2,r2,-1
    51e4:	e0bfff15 	stw	r2,-4(fp)
    51e8:	e0bfff17 	ldw	r2,-4(fp)
    51ec:	10bfffd8 	cmpnei	r2,r2,-1
    51f0:	103fee1e 	bne	r2,zero,51ac <alt_up_irda_read_fd+0x30>
		if (alt_up_irda_read_data(irda, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    51f4:	e0bffa17 	ldw	r2,-24(fp)
}
    51f8:	e037883a 	mov	sp,fp
    51fc:	dfc00117 	ldw	ra,4(sp)
    5200:	df000017 	ldw	fp,0(sp)
    5204:	dec00204 	addi	sp,sp,8
    5208:	f800283a 	ret

0000520c <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    520c:	defff904 	addi	sp,sp,-28
    5210:	dfc00615 	stw	ra,24(sp)
    5214:	df000515 	stw	fp,20(sp)
    5218:	df000504 	addi	fp,sp,20
    521c:	e13ffd15 	stw	r4,-12(fp)
    5220:	e17ffe15 	stw	r5,-8(fp)
    5224:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    5228:	e0bffd17 	ldw	r2,-12(fp)
    522c:	10800017 	ldw	r2,0(r2)
    5230:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    5234:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    5238:	00000c06 	br	526c <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, ptr++)==0)
    523c:	e0bffe17 	ldw	r2,-8(fp)
    5240:	11403fcc 	andi	r5,r2,255
    5244:	e0bffe17 	ldw	r2,-8(fp)
    5248:	10800044 	addi	r2,r2,1
    524c:	e0bffe15 	stw	r2,-8(fp)
    5250:	e13ffc17 	ldw	r4,-16(fp)
    5254:	00050c00 	call	50c0 <alt_up_irda_write_data>
    5258:	1004c03a 	cmpne	r2,r2,zero
    525c:	1000091e 	bne	r2,zero,5284 <alt_up_irda_write_fd+0x78>
			count++;
    5260:	e0bffb17 	ldw	r2,-20(fp)
    5264:	10800044 	addi	r2,r2,1
    5268:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
    526c:	e0bfff17 	ldw	r2,-4(fp)
    5270:	10bfffc4 	addi	r2,r2,-1
    5274:	e0bfff15 	stw	r2,-4(fp)
    5278:	e0bfff17 	ldw	r2,-4(fp)
    527c:	10bfffd8 	cmpnei	r2,r2,-1
    5280:	103fee1e 	bne	r2,zero,523c <alt_up_irda_write_fd+0x30>
		if (alt_up_irda_write_data(irda, ptr++)==0)
			count++;
		else
			break;
	}
	return count;
    5284:	e0bffb17 	ldw	r2,-20(fp)
}
    5288:	e037883a 	mov	sp,fp
    528c:	dfc00117 	ldw	ra,4(sp)
    5290:	df000017 	ldw	fp,0(sp)
    5294:	dec00204 	addi	sp,sp,8
    5298:	f800283a 	ret

0000529c <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    529c:	defffc04 	addi	sp,sp,-16
    52a0:	dfc00315 	stw	ra,12(sp)
    52a4:	df000215 	stw	fp,8(sp)
    52a8:	df000204 	addi	fp,sp,8
    52ac:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    52b0:	e13fff17 	ldw	r4,-4(fp)
    52b4:	01400074 	movhi	r5,1
    52b8:	29650d04 	addi	r5,r5,-27596
    52bc:	00063c40 	call	63c4 <alt_find_dev>
    52c0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    52c4:	e0bffe17 	ldw	r2,-8(fp)
}
    52c8:	e037883a 	mov	sp,fp
    52cc:	dfc00117 	ldw	ra,4(sp)
    52d0:	df000017 	ldw	fp,0(sp)
    52d4:	dec00204 	addi	sp,sp,8
    52d8:	f800283a 	ret

000052dc <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    52dc:	defffd04 	addi	sp,sp,-12
    52e0:	df000215 	stw	fp,8(sp)
    52e4:	df000204 	addi	fp,sp,8
    52e8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    52ec:	e0bfff17 	ldw	r2,-4(fp)
    52f0:	1080400c 	andi	r2,r2,256
    52f4:	1004d23a 	srli	r2,r2,8
    52f8:	e0bffe05 	stb	r2,-8(fp)
	return ri;
    52fc:	e0bffe03 	ldbu	r2,-8(fp)
}
    5300:	e037883a 	mov	sp,fp
    5304:	df000017 	ldw	fp,0(sp)
    5308:	dec00104 	addi	sp,sp,4
    530c:	f800283a 	ret

00005310 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
    5310:	defffd04 	addi	sp,sp,-12
    5314:	df000215 	stw	fp,8(sp)
    5318:	df000204 	addi	fp,sp,8
    531c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
    5320:	e0bfff17 	ldw	r2,-4(fp)
    5324:	1080004c 	andi	r2,r2,1
    5328:	e0bffe05 	stb	r2,-8(fp)
	return re;
    532c:	e0bffe03 	ldbu	r2,-8(fp)
}
    5330:	e037883a 	mov	sp,fp
    5334:	df000017 	ldw	fp,0(sp)
    5338:	dec00104 	addi	sp,sp,4
    533c:	f800283a 	ret

00005340 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    5340:	defffd04 	addi	sp,sp,-12
    5344:	df000215 	stw	fp,8(sp)
    5348:	df000204 	addi	fp,sp,8
    534c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    5350:	e0bfff17 	ldw	r2,-4(fp)
    5354:	1081000c 	andi	r2,r2,1024
    5358:	1004d2ba 	srli	r2,r2,10
    535c:	e0bffe05 	stb	r2,-8(fp)
	return re;
    5360:	e0bffe03 	ldbu	r2,-8(fp)
}
    5364:	e037883a 	mov	sp,fp
    5368:	df000017 	ldw	fp,0(sp)
    536c:	dec00104 	addi	sp,sp,4
    5370:	f800283a 	ret

00005374 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
    5374:	defffd04 	addi	sp,sp,-12
    5378:	df000215 	stw	fp,8(sp)
    537c:	df000204 	addi	fp,sp,8
    5380:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
    5384:	e0bfff17 	ldw	r2,-4(fp)
    5388:	10bfffec 	andhi	r2,r2,65535
    538c:	1004d43a 	srli	r2,r2,16
    5390:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
    5394:	e0bffe0b 	ldhu	r2,-8(fp)
}
    5398:	e037883a 	mov	sp,fp
    539c:	df000017 	ldw	fp,0(sp)
    53a0:	dec00104 	addi	sp,sp,4
    53a4:	f800283a 	ret

000053a8 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    53a8:	defffd04 	addi	sp,sp,-12
    53ac:	df000215 	stw	fp,8(sp)
    53b0:	df000204 	addi	fp,sp,8
    53b4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    53b8:	e0bfff17 	ldw	r2,-4(fp)
    53bc:	10a0000c 	andi	r2,r2,32768
    53c0:	1004d3fa 	srli	r2,r2,15
    53c4:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
    53c8:	e0bffe03 	ldbu	r2,-8(fp)
}
    53cc:	e037883a 	mov	sp,fp
    53d0:	df000017 	ldw	fp,0(sp)
    53d4:	dec00104 	addi	sp,sp,4
    53d8:	f800283a 	ret

000053dc <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
    53dc:	defffd04 	addi	sp,sp,-12
    53e0:	df000215 	stw	fp,8(sp)
    53e4:	df000204 	addi	fp,sp,8
    53e8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    53ec:	e0bfff17 	ldw	r2,-4(fp)
    53f0:	e0bffe05 	stb	r2,-8(fp)
	return data;
    53f4:	e0bffe03 	ldbu	r2,-8(fp)
}
    53f8:	e037883a 	mov	sp,fp
    53fc:	df000017 	ldw	fp,0(sp)
    5400:	dec00104 	addi	sp,sp,4
    5404:	f800283a 	ret

00005408 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    5408:	defffb04 	addi	sp,sp,-20
    540c:	dfc00415 	stw	ra,16(sp)
    5410:	df000315 	stw	fp,12(sp)
    5414:	df000304 	addi	fp,sp,12
    5418:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    541c:	e13fff17 	ldw	r4,-4(fp)
    5420:	01403fc4 	movi	r5,255
    5424:	00056680 	call	5668 <alt_up_ps2_write_data_byte_with_ack>
    5428:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
    542c:	e0bffd17 	ldw	r2,-12(fp)
    5430:	1004c03a 	cmpne	r2,r2,zero
    5434:	1000221e 	bne	r2,zero,54c0 <alt_up_ps2_init+0xb8>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    5438:	e17ffe04 	addi	r5,fp,-8
    543c:	e13fff17 	ldw	r4,-4(fp)
    5440:	00056d40 	call	56d4 <alt_up_ps2_read_data_byte_timeout>
    5444:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
    5448:	e0bffd17 	ldw	r2,-12(fp)
    544c:	1004c03a 	cmpne	r2,r2,zero
    5450:	10001b1e 	bne	r2,zero,54c0 <alt_up_ps2_init+0xb8>
    5454:	e0bffe03 	ldbu	r2,-8(fp)
    5458:	10803fcc 	andi	r2,r2,255
    545c:	10802a98 	cmpnei	r2,r2,170
    5460:	1000171e 	bne	r2,zero,54c0 <alt_up_ps2_init+0xb8>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    5464:	e17ffe04 	addi	r5,fp,-8
    5468:	e13fff17 	ldw	r4,-4(fp)
    546c:	00056d40 	call	56d4 <alt_up_ps2_read_data_byte_timeout>
    5470:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
    5474:	e0bffd17 	ldw	r2,-12(fp)
    5478:	10bfe318 	cmpnei	r2,r2,-116
    547c:	1000041e 	bne	r2,zero,5490 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    5480:	e0ffff17 	ldw	r3,-4(fp)
    5484:	00800044 	movi	r2,1
    5488:	18800d15 	stw	r2,52(r3)
    548c:	00000c06 	br	54c0 <alt_up_ps2_init+0xb8>
			}
			else if (status == 0 && byte == 0x00)
    5490:	e0bffd17 	ldw	r2,-12(fp)
    5494:	1004c03a 	cmpne	r2,r2,zero
    5498:	1000091e 	bne	r2,zero,54c0 <alt_up_ps2_init+0xb8>
    549c:	e0bffe03 	ldbu	r2,-8(fp)
    54a0:	10803fcc 	andi	r2,r2,255
    54a4:	1004c03a 	cmpne	r2,r2,zero
    54a8:	1000051e 	bne	r2,zero,54c0 <alt_up_ps2_init+0xb8>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    54ac:	e0bfff17 	ldw	r2,-4(fp)
    54b0:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    54b4:	e13fff17 	ldw	r4,-4(fp)
    54b8:	01403d04 	movi	r5,244
    54bc:	00055800 	call	5580 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    54c0:	e037883a 	mov	sp,fp
    54c4:	dfc00117 	ldw	ra,4(sp)
    54c8:	df000017 	ldw	fp,0(sp)
    54cc:	dec00204 	addi	sp,sp,8
    54d0:	f800283a 	ret

000054d4 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
    54d4:	defffd04 	addi	sp,sp,-12
    54d8:	df000215 	stw	fp,8(sp)
    54dc:	df000204 	addi	fp,sp,8
    54e0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    54e4:	e0bfff17 	ldw	r2,-4(fp)
    54e8:	10800a17 	ldw	r2,40(r2)
    54ec:	10800104 	addi	r2,r2,4
    54f0:	10800037 	ldwio	r2,0(r2)
    54f4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    54f8:	e0bffe17 	ldw	r2,-8(fp)
    54fc:	10800054 	ori	r2,r2,1
    5500:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    5504:	e0bfff17 	ldw	r2,-4(fp)
    5508:	10800a17 	ldw	r2,40(r2)
    550c:	10800104 	addi	r2,r2,4
    5510:	e0fffe17 	ldw	r3,-8(fp)
    5514:	10c00035 	stwio	r3,0(r2)
}
    5518:	e037883a 	mov	sp,fp
    551c:	df000017 	ldw	fp,0(sp)
    5520:	dec00104 	addi	sp,sp,4
    5524:	f800283a 	ret

00005528 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
    5528:	defffd04 	addi	sp,sp,-12
    552c:	df000215 	stw	fp,8(sp)
    5530:	df000204 	addi	fp,sp,8
    5534:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    5538:	e0bfff17 	ldw	r2,-4(fp)
    553c:	10800a17 	ldw	r2,40(r2)
    5540:	10800104 	addi	r2,r2,4
    5544:	10800037 	ldwio	r2,0(r2)
    5548:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    554c:	e0fffe17 	ldw	r3,-8(fp)
    5550:	00bfff84 	movi	r2,-2
    5554:	1884703a 	and	r2,r3,r2
    5558:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    555c:	e0bfff17 	ldw	r2,-4(fp)
    5560:	10800a17 	ldw	r2,40(r2)
    5564:	10800104 	addi	r2,r2,4
    5568:	e0fffe17 	ldw	r3,-8(fp)
    556c:	10c00035 	stwio	r3,0(r2)
}
    5570:	e037883a 	mov	sp,fp
    5574:	df000017 	ldw	fp,0(sp)
    5578:	dec00104 	addi	sp,sp,4
    557c:	f800283a 	ret

00005580 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    5580:	defffa04 	addi	sp,sp,-24
    5584:	dfc00515 	stw	ra,20(sp)
    5588:	df000415 	stw	fp,16(sp)
    558c:	df000404 	addi	fp,sp,16
    5590:	e13ffd15 	stw	r4,-12(fp)
    5594:	e17ffe05 	stb	r5,-8(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    5598:	e0bffd17 	ldw	r2,-12(fp)
    559c:	10800a17 	ldw	r2,40(r2)
    55a0:	e0fffe03 	ldbu	r3,-8(fp)
    55a4:	10c00025 	stbio	r3,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    55a8:	e0bffd17 	ldw	r2,-12(fp)
    55ac:	10800a17 	ldw	r2,40(r2)
    55b0:	10800104 	addi	r2,r2,4
    55b4:	10800037 	ldwio	r2,0(r2)
    55b8:	e0bffc15 	stw	r2,-16(fp)
	if (read_CE_bit(ctrl_reg))
    55bc:	e13ffc17 	ldw	r4,-16(fp)
    55c0:	00053400 	call	5340 <read_CE_bit>
    55c4:	10803fcc 	andi	r2,r2,255
    55c8:	1005003a 	cmpeq	r2,r2,zero
    55cc:	1000031e 	bne	r2,zero,55dc <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    55d0:	00bffec4 	movi	r2,-5
    55d4:	e0bfff15 	stw	r2,-4(fp)
    55d8:	00000106 	br	55e0 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
    55dc:	e03fff15 	stw	zero,-4(fp)
    55e0:	e0bfff17 	ldw	r2,-4(fp)
}
    55e4:	e037883a 	mov	sp,fp
    55e8:	dfc00117 	ldw	ra,4(sp)
    55ec:	df000017 	ldw	fp,0(sp)
    55f0:	dec00204 	addi	sp,sp,8
    55f4:	f800283a 	ret

000055f8 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    55f8:	defffb04 	addi	sp,sp,-20
    55fc:	dfc00415 	stw	ra,16(sp)
    5600:	df000315 	stw	fp,12(sp)
    5604:	df000304 	addi	fp,sp,12
    5608:	e13ffe15 	stw	r4,-8(fp)
	unsigned char data = 0;
    560c:	e03ffd45 	stb	zero,-11(fp)
	unsigned char status = 0;
    5610:	e03ffd05 	stb	zero,-12(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    5614:	e17ffd44 	addi	r5,fp,-11
    5618:	e13ffe17 	ldw	r4,-8(fp)
    561c:	00056d40 	call	56d4 <alt_up_ps2_read_data_byte_timeout>
    5620:	e0bffd05 	stb	r2,-12(fp)
		if ( status == 0)
    5624:	e0bffd03 	ldbu	r2,-12(fp)
    5628:	1004c03a 	cmpne	r2,r2,zero
    562c:	1000061e 	bne	r2,zero,5648 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
    5630:	e0bffd43 	ldbu	r2,-11(fp)
    5634:	10803fcc 	andi	r2,r2,255
    5638:	10803e98 	cmpnei	r2,r2,250
    563c:	103ff51e 	bne	r2,zero,5614 <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
    5640:	e03fff15 	stw	zero,-4(fp)
    5644:	00000206 	br	5650 <alt_up_ps2_wait_for_ack+0x58>
		}
		else 
		{
			return status;
    5648:	e0bffd03 	ldbu	r2,-12(fp)
    564c:	e0bfff15 	stw	r2,-4(fp)
    5650:	e0bfff17 	ldw	r2,-4(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
    5654:	e037883a 	mov	sp,fp
    5658:	dfc00117 	ldw	ra,4(sp)
    565c:	df000017 	ldw	fp,0(sp)
    5660:	dec00204 	addi	sp,sp,8
    5664:	f800283a 	ret

00005668 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    5668:	defff904 	addi	sp,sp,-28
    566c:	dfc00615 	stw	ra,24(sp)
    5670:	df000515 	stw	fp,20(sp)
    5674:	df000504 	addi	fp,sp,20
    5678:	e13ffd15 	stw	r4,-12(fp)
    567c:	e17ffe05 	stb	r5,-8(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    5680:	e17ffe03 	ldbu	r5,-8(fp)
    5684:	e13ffd17 	ldw	r4,-12(fp)
    5688:	00055800 	call	5580 <alt_up_ps2_write_data_byte>
    568c:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
    5690:	e0bffc17 	ldw	r2,-16(fp)
    5694:	1005003a 	cmpeq	r2,r2,zero
    5698:	1000031e 	bne	r2,zero,56a8 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
    569c:	e0bffc17 	ldw	r2,-16(fp)
    56a0:	e0bfff15 	stw	r2,-4(fp)
    56a4:	00000506 	br	56bc <alt_up_ps2_write_data_byte_with_ack+0x54>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    56a8:	e13ffd17 	ldw	r4,-12(fp)
    56ac:	00055f80 	call	55f8 <alt_up_ps2_wait_for_ack>
    56b0:	e0bffb15 	stw	r2,-20(fp)
	return ack_status;
    56b4:	e0bffb17 	ldw	r2,-20(fp)
    56b8:	e0bfff15 	stw	r2,-4(fp)
    56bc:	e0bfff17 	ldw	r2,-4(fp)
}
    56c0:	e037883a 	mov	sp,fp
    56c4:	dfc00117 	ldw	ra,4(sp)
    56c8:	df000017 	ldw	fp,0(sp)
    56cc:	dec00204 	addi	sp,sp,8
    56d0:	f800283a 	ret

000056d4 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    56d4:	defff904 	addi	sp,sp,-28
    56d8:	dfc00615 	stw	ra,24(sp)
    56dc:	df000515 	stw	fp,20(sp)
    56e0:	df000504 	addi	fp,sp,20
    56e4:	e13ffd15 	stw	r4,-12(fp)
    56e8:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
    56ec:	e03ffc15 	stw	zero,-16(fp)
	unsigned int count = 0;
    56f0:	e03ffb15 	stw	zero,-20(fp)
    56f4:	00000006 	br	56f8 <alt_up_ps2_read_data_byte_timeout+0x24>
	do {
		count++;
    56f8:	e0bffb17 	ldw	r2,-20(fp)
    56fc:	10800044 	addi	r2,r2,1
    5700:	e0bffb15 	stw	r2,-20(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    5704:	e0bffd17 	ldw	r2,-12(fp)
    5708:	10800a17 	ldw	r2,40(r2)
    570c:	10800037 	ldwio	r2,0(r2)
    5710:	e0bffc15 	stw	r2,-16(fp)
		if (read_data_valid(data_reg))
    5714:	e13ffc17 	ldw	r4,-16(fp)
    5718:	00053a80 	call	53a8 <read_data_valid>
    571c:	10803fcc 	andi	r2,r2,255
    5720:	1005003a 	cmpeq	r2,r2,zero
    5724:	1000071e 	bne	r2,zero,5744 <alt_up_ps2_read_data_byte_timeout+0x70>
		{
			*byte = read_data_byte(data_reg);
    5728:	e13ffc17 	ldw	r4,-16(fp)
    572c:	00053dc0 	call	53dc <read_data_byte>
    5730:	1007883a 	mov	r3,r2
    5734:	e0bffe17 	ldw	r2,-8(fp)
    5738:	10c00005 	stb	r3,0(r2)
			return 0;
    573c:	e03fff15 	stw	zero,-4(fp)
    5740:	00000a06 	br	576c <alt_up_ps2_read_data_byte_timeout+0x98>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    5744:	e0bffd17 	ldw	r2,-12(fp)
    5748:	10800c17 	ldw	r2,48(r2)
    574c:	1005003a 	cmpeq	r2,r2,zero
    5750:	103fe91e 	bne	r2,zero,56f8 <alt_up_ps2_read_data_byte_timeout+0x24>
    5754:	e0bffd17 	ldw	r2,-12(fp)
    5758:	10c00c17 	ldw	r3,48(r2)
    575c:	e0bffb17 	ldw	r2,-20(fp)
    5760:	18bfe52e 	bgeu	r3,r2,56f8 <alt_up_ps2_read_data_byte_timeout+0x24>
		{
			return -ETIMEDOUT;
    5764:	00bfe304 	movi	r2,-116
    5768:	e0bfff15 	stw	r2,-4(fp)
		}
	} while (1);
    576c:	e0bfff17 	ldw	r2,-4(fp)
}
    5770:	e037883a 	mov	sp,fp
    5774:	dfc00117 	ldw	ra,4(sp)
    5778:	df000017 	ldw	fp,0(sp)
    577c:	dec00204 	addi	sp,sp,8
    5780:	f800283a 	ret

00005784 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    5784:	defffa04 	addi	sp,sp,-24
    5788:	dfc00515 	stw	ra,20(sp)
    578c:	df000415 	stw	fp,16(sp)
    5790:	df000404 	addi	fp,sp,16
    5794:	e13ffd15 	stw	r4,-12(fp)
    5798:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
    579c:	e03ffc15 	stw	zero,-16(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    57a0:	e0bffd17 	ldw	r2,-12(fp)
    57a4:	10800a17 	ldw	r2,40(r2)
    57a8:	10800037 	ldwio	r2,0(r2)
    57ac:	e0bffc15 	stw	r2,-16(fp)
	if (read_data_valid(data_reg))
    57b0:	e13ffc17 	ldw	r4,-16(fp)
    57b4:	00053a80 	call	53a8 <read_data_valid>
    57b8:	10803fcc 	andi	r2,r2,255
    57bc:	1005003a 	cmpeq	r2,r2,zero
    57c0:	1000071e 	bne	r2,zero,57e0 <alt_up_ps2_read_data_byte+0x5c>
	{
		*byte = read_data_byte(data_reg);
    57c4:	e13ffc17 	ldw	r4,-16(fp)
    57c8:	00053dc0 	call	53dc <read_data_byte>
    57cc:	1007883a 	mov	r3,r2
    57d0:	e0bffe17 	ldw	r2,-8(fp)
    57d4:	10c00005 	stb	r3,0(r2)
		return 0;
    57d8:	e03fff15 	stw	zero,-4(fp)
    57dc:	00000206 	br	57e8 <alt_up_ps2_read_data_byte+0x64>
	}
	return -1;
    57e0:	00bfffc4 	movi	r2,-1
    57e4:	e0bfff15 	stw	r2,-4(fp)
    57e8:	e0bfff17 	ldw	r2,-4(fp)
}
    57ec:	e037883a 	mov	sp,fp
    57f0:	dfc00117 	ldw	ra,4(sp)
    57f4:	df000017 	ldw	fp,0(sp)
    57f8:	dec00204 	addi	sp,sp,8
    57fc:	f800283a 	ret

00005800 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    5800:	defffb04 	addi	sp,sp,-20
    5804:	dfc00415 	stw	ra,16(sp)
    5808:	df000315 	stw	fp,12(sp)
    580c:	df000304 	addi	fp,sp,12
    5810:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
    5814:	e03ffe0d 	sth	zero,-8(fp)
	unsigned int data_reg = 0;
    5818:	e03ffd15 	stw	zero,-12(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    581c:	e0bfff17 	ldw	r2,-4(fp)
    5820:	10800a17 	ldw	r2,40(r2)
    5824:	10800037 	ldwio	r2,0(r2)
    5828:	e0bffd15 	stw	r2,-12(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    582c:	e13ffd17 	ldw	r4,-12(fp)
    5830:	00053740 	call	5374 <read_num_bytes_available>
    5834:	e0bffe0d 	sth	r2,-8(fp)
	} while (num > 0);
    5838:	e0bffe0b 	ldhu	r2,-8(fp)
    583c:	1004c03a 	cmpne	r2,r2,zero
    5840:	103ff61e 	bne	r2,zero,581c <alt_up_ps2_clear_fifo+0x1c>
}
    5844:	e037883a 	mov	sp,fp
    5848:	dfc00117 	ldw	ra,4(sp)
    584c:	df000017 	ldw	fp,0(sp)
    5850:	dec00204 	addi	sp,sp,8
    5854:	f800283a 	ret

00005858 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    5858:	defff704 	addi	sp,sp,-36
    585c:	dfc00815 	stw	ra,32(sp)
    5860:	df000715 	stw	fp,28(sp)
    5864:	df000704 	addi	fp,sp,28
    5868:	e13ffc15 	stw	r4,-16(fp)
    586c:	e17ffd15 	stw	r5,-12(fp)
    5870:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    5874:	e0bffc17 	ldw	r2,-16(fp)
    5878:	10800017 	ldw	r2,0(r2)
    587c:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    5880:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
    5884:	e03ff915 	stw	zero,-28(fp)
	while (count < len);
    5888:	e0fff917 	ldw	r3,-28(fp)
    588c:	e0bffe17 	ldw	r2,-8(fp)
    5890:	18bffd16 	blt	r3,r2,5888 <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
    5894:	e17ffd17 	ldw	r5,-12(fp)
    5898:	e0bffd17 	ldw	r2,-12(fp)
    589c:	10800044 	addi	r2,r2,1
    58a0:	e0bffd15 	stw	r2,-12(fp)
    58a4:	e13ffb17 	ldw	r4,-20(fp)
    58a8:	00056d40 	call	56d4 <alt_up_ps2_read_data_byte_timeout>
    58ac:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
    58b0:	e0bffa17 	ldw	r2,-24(fp)
    58b4:	1005003a 	cmpeq	r2,r2,zero
    58b8:	1000031e 	bne	r2,zero,58c8 <alt_up_ps2_read_fd+0x70>
			return count;
    58bc:	e0bff917 	ldw	r2,-28(fp)
    58c0:	e0bfff15 	stw	r2,-4(fp)
    58c4:	00000506 	br	58dc <alt_up_ps2_read_fd+0x84>
		count++;
    58c8:	e0bff917 	ldw	r2,-28(fp)
    58cc:	10800044 	addi	r2,r2,1
    58d0:	e0bff915 	stw	r2,-28(fp)
	} 
	return count;
    58d4:	e0bff917 	ldw	r2,-28(fp)
    58d8:	e0bfff15 	stw	r2,-4(fp)
    58dc:	e0bfff17 	ldw	r2,-4(fp)
}
    58e0:	e037883a 	mov	sp,fp
    58e4:	dfc00117 	ldw	ra,4(sp)
    58e8:	df000017 	ldw	fp,0(sp)
    58ec:	dec00204 	addi	sp,sp,8
    58f0:	f800283a 	ret

000058f4 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    58f4:	defff704 	addi	sp,sp,-36
    58f8:	dfc00815 	stw	ra,32(sp)
    58fc:	df000715 	stw	fp,28(sp)
    5900:	df000704 	addi	fp,sp,28
    5904:	e13ffc15 	stw	r4,-16(fp)
    5908:	e17ffd15 	stw	r5,-12(fp)
    590c:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    5910:	e0bffc17 	ldw	r2,-16(fp)
    5914:	10800017 	ldw	r2,0(r2)
    5918:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    591c:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
    5920:	e03ff915 	stw	zero,-28(fp)
	while (count < len)
    5924:	00001206 	br	5970 <alt_up_ps2_write_fd+0x7c>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    5928:	e0bffd17 	ldw	r2,-12(fp)
    592c:	10800003 	ldbu	r2,0(r2)
    5930:	11403fcc 	andi	r5,r2,255
    5934:	e0bffd17 	ldw	r2,-12(fp)
    5938:	10800044 	addi	r2,r2,1
    593c:	e0bffd15 	stw	r2,-12(fp)
    5940:	e13ffb17 	ldw	r4,-20(fp)
    5944:	00055800 	call	5580 <alt_up_ps2_write_data_byte>
    5948:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
    594c:	e0bffa17 	ldw	r2,-24(fp)
    5950:	1005003a 	cmpeq	r2,r2,zero
    5954:	1000031e 	bne	r2,zero,5964 <alt_up_ps2_write_fd+0x70>
			return count;
    5958:	e0bff917 	ldw	r2,-28(fp)
    595c:	e0bfff15 	stw	r2,-4(fp)
    5960:	00000806 	br	5984 <alt_up_ps2_write_fd+0x90>
		count++;
    5964:	e0bff917 	ldw	r2,-28(fp)
    5968:	10800044 	addi	r2,r2,1
    596c:	e0bff915 	stw	r2,-28(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    5970:	e0fff917 	ldw	r3,-28(fp)
    5974:	e0bffe17 	ldw	r2,-8(fp)
    5978:	18bfeb16 	blt	r3,r2,5928 <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
    597c:	e0bff917 	ldw	r2,-28(fp)
    5980:	e0bfff15 	stw	r2,-4(fp)
    5984:	e0bfff17 	ldw	r2,-4(fp)
}
    5988:	e037883a 	mov	sp,fp
    598c:	dfc00117 	ldw	ra,4(sp)
    5990:	df000017 	ldw	fp,0(sp)
    5994:	dec00204 	addi	sp,sp,8
    5998:	f800283a 	ret

0000599c <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    599c:	defffc04 	addi	sp,sp,-16
    59a0:	dfc00315 	stw	ra,12(sp)
    59a4:	df000215 	stw	fp,8(sp)
    59a8:	df000204 	addi	fp,sp,8
    59ac:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    59b0:	e13fff17 	ldw	r4,-4(fp)
    59b4:	01400074 	movhi	r5,1
    59b8:	29650d04 	addi	r5,r5,-27596
    59bc:	00063c40 	call	63c4 <alt_find_dev>
    59c0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    59c4:	e0bffe17 	ldw	r2,-8(fp)
}
    59c8:	e037883a 	mov	sp,fp
    59cc:	dfc00117 	ldw	ra,4(sp)
    59d0:	df000017 	ldw	fp,0(sp)
    59d4:	dec00204 	addi	sp,sp,8
    59d8:	f800283a 	ret

000059dc <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    59dc:	defffd04 	addi	sp,sp,-12
    59e0:	df000215 	stw	fp,8(sp)
    59e4:	df000204 	addi	fp,sp,8
    59e8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    59ec:	e0bfff17 	ldw	r2,-4(fp)
    59f0:	10800a17 	ldw	r2,40(r2)
    59f4:	10800104 	addi	r2,r2,4
    59f8:	10800037 	ldwio	r2,0(r2)
    59fc:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    5a00:	e0bffe17 	ldw	r2,-8(fp)
    5a04:	10800054 	ori	r2,r2,1
    5a08:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    5a0c:	e0bfff17 	ldw	r2,-4(fp)
    5a10:	10800a17 	ldw	r2,40(r2)
    5a14:	10800104 	addi	r2,r2,4
    5a18:	e0fffe17 	ldw	r3,-8(fp)
    5a1c:	10c00035 	stwio	r3,0(r2)
}
    5a20:	e037883a 	mov	sp,fp
    5a24:	df000017 	ldw	fp,0(sp)
    5a28:	dec00104 	addi	sp,sp,4
    5a2c:	f800283a 	ret

00005a30 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    5a30:	defffd04 	addi	sp,sp,-12
    5a34:	df000215 	stw	fp,8(sp)
    5a38:	df000204 	addi	fp,sp,8
    5a3c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    5a40:	e0bfff17 	ldw	r2,-4(fp)
    5a44:	10800a17 	ldw	r2,40(r2)
    5a48:	10800104 	addi	r2,r2,4
    5a4c:	10800037 	ldwio	r2,0(r2)
    5a50:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    5a54:	e0fffe17 	ldw	r3,-8(fp)
    5a58:	00bfff84 	movi	r2,-2
    5a5c:	1884703a 	and	r2,r3,r2
    5a60:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    5a64:	e0bfff17 	ldw	r2,-4(fp)
    5a68:	10800a17 	ldw	r2,40(r2)
    5a6c:	10800104 	addi	r2,r2,4
    5a70:	e0fffe17 	ldw	r3,-8(fp)
    5a74:	10c00035 	stwio	r3,0(r2)
}
    5a78:	e037883a 	mov	sp,fp
    5a7c:	df000017 	ldw	fp,0(sp)
    5a80:	dec00104 	addi	sp,sp,4
    5a84:	f800283a 	ret

00005a88 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    5a88:	defffd04 	addi	sp,sp,-12
    5a8c:	df000215 	stw	fp,8(sp)
    5a90:	df000204 	addi	fp,sp,8
    5a94:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    5a98:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    5a9c:	e0bfff17 	ldw	r2,-4(fp)
    5aa0:	10800a17 	ldw	r2,40(r2)
    5aa4:	10800084 	addi	r2,r2,2
    5aa8:	1080002b 	ldhuio	r2,0(r2)
    5aac:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    5ab0:	e0bffe0b 	ldhu	r2,-8(fp)
}
    5ab4:	e037883a 	mov	sp,fp
    5ab8:	df000017 	ldw	fp,0(sp)
    5abc:	dec00104 	addi	sp,sp,4
    5ac0:	f800283a 	ret

00005ac4 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    5ac4:	defffd04 	addi	sp,sp,-12
    5ac8:	df000215 	stw	fp,8(sp)
    5acc:	df000204 	addi	fp,sp,8
    5ad0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    5ad4:	e0bfff17 	ldw	r2,-4(fp)
    5ad8:	10800a17 	ldw	r2,40(r2)
    5adc:	10800104 	addi	r2,r2,4
    5ae0:	10800037 	ldwio	r2,0(r2)
    5ae4:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    5ae8:	e0bffe17 	ldw	r2,-8(fp)
    5aec:	10bfffec 	andhi	r2,r2,65535
    5af0:	1004d43a 	srli	r2,r2,16
}
    5af4:	e037883a 	mov	sp,fp
    5af8:	df000017 	ldw	fp,0(sp)
    5afc:	dec00104 	addi	sp,sp,4
    5b00:	f800283a 	ret

00005b04 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    5b04:	defffc04 	addi	sp,sp,-16
    5b08:	df000315 	stw	fp,12(sp)
    5b0c:	df000304 	addi	fp,sp,12
    5b10:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    5b14:	e0bffe17 	ldw	r2,-8(fp)
    5b18:	1080800c 	andi	r2,r2,512
    5b1c:	1004d27a 	srli	r2,r2,9
    5b20:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
    5b24:	e0bffd17 	ldw	r2,-12(fp)
    5b28:	1005003a 	cmpeq	r2,r2,zero
    5b2c:	1000031e 	bne	r2,zero,5b3c <alt_up_rs232_check_parity+0x38>
    5b30:	00bfffc4 	movi	r2,-1
    5b34:	e0bfff15 	stw	r2,-4(fp)
    5b38:	00000106 	br	5b40 <alt_up_rs232_check_parity+0x3c>
    5b3c:	e03fff15 	stw	zero,-4(fp)
    5b40:	e0bfff17 	ldw	r2,-4(fp)
}
    5b44:	e037883a 	mov	sp,fp
    5b48:	df000017 	ldw	fp,0(sp)
    5b4c:	dec00104 	addi	sp,sp,4
    5b50:	f800283a 	ret

00005b54 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    5b54:	defffc04 	addi	sp,sp,-16
    5b58:	df000315 	stw	fp,12(sp)
    5b5c:	df000304 	addi	fp,sp,12
    5b60:	e13ffe15 	stw	r4,-8(fp)
    5b64:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    5b68:	e0bffe17 	ldw	r2,-8(fp)
    5b6c:	10800a17 	ldw	r2,40(r2)
    5b70:	10800037 	ldwio	r2,0(r2)
    5b74:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    5b78:	e0bffe17 	ldw	r2,-8(fp)
    5b7c:	10800a17 	ldw	r2,40(r2)
    5b80:	e0ffff03 	ldbu	r3,-4(fp)
    5b84:	10c00035 	stwio	r3,0(r2)
	return 0;
    5b88:	0005883a 	mov	r2,zero
}
    5b8c:	e037883a 	mov	sp,fp
    5b90:	df000017 	ldw	fp,0(sp)
    5b94:	dec00104 	addi	sp,sp,4
    5b98:	f800283a 	ret

00005b9c <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    5b9c:	defffa04 	addi	sp,sp,-24
    5ba0:	dfc00515 	stw	ra,20(sp)
    5ba4:	df000415 	stw	fp,16(sp)
    5ba8:	df000404 	addi	fp,sp,16
    5bac:	e13ffd15 	stw	r4,-12(fp)
    5bb0:	e17ffe15 	stw	r5,-8(fp)
    5bb4:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    5bb8:	e0bffd17 	ldw	r2,-12(fp)
    5bbc:	10800a17 	ldw	r2,40(r2)
    5bc0:	10800037 	ldwio	r2,0(r2)
    5bc4:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    5bc8:	e0bffc17 	ldw	r2,-16(fp)
    5bcc:	1007883a 	mov	r3,r2
    5bd0:	e0bffe17 	ldw	r2,-8(fp)
    5bd4:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    5bd8:	e13ffc17 	ldw	r4,-16(fp)
    5bdc:	0005b040 	call	5b04 <alt_up_rs232_check_parity>
    5be0:	1007883a 	mov	r3,r2
    5be4:	e0bfff17 	ldw	r2,-4(fp)
    5be8:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    5bec:	e0bffc17 	ldw	r2,-16(fp)
    5bf0:	10a0000c 	andi	r2,r2,32768
    5bf4:	1004d3fa 	srli	r2,r2,15
    5bf8:	10bfffc4 	addi	r2,r2,-1
}
    5bfc:	e037883a 	mov	sp,fp
    5c00:	dfc00117 	ldw	ra,4(sp)
    5c04:	df000017 	ldw	fp,0(sp)
    5c08:	dec00204 	addi	sp,sp,8
    5c0c:	f800283a 	ret

00005c10 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    5c10:	defff804 	addi	sp,sp,-32
    5c14:	dfc00715 	stw	ra,28(sp)
    5c18:	df000615 	stw	fp,24(sp)
    5c1c:	df000604 	addi	fp,sp,24
    5c20:	e13ffd15 	stw	r4,-12(fp)
    5c24:	e17ffe15 	stw	r5,-8(fp)
    5c28:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    5c2c:	e0bffd17 	ldw	r2,-12(fp)
    5c30:	10800017 	ldw	r2,0(r2)
    5c34:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    5c38:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    5c3c:	00000c06 	br	5c70 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
    5c40:	e17ffe17 	ldw	r5,-8(fp)
    5c44:	e0bffe17 	ldw	r2,-8(fp)
    5c48:	10800044 	addi	r2,r2,1
    5c4c:	e0bffe15 	stw	r2,-8(fp)
    5c50:	e1bffc04 	addi	r6,fp,-16
    5c54:	e13ffb17 	ldw	r4,-20(fp)
    5c58:	0005b9c0 	call	5b9c <alt_up_rs232_read_data>
    5c5c:	1004c03a 	cmpne	r2,r2,zero
    5c60:	1000091e 	bne	r2,zero,5c88 <alt_up_rs232_read_fd+0x78>
			count++;
    5c64:	e0bffa17 	ldw	r2,-24(fp)
    5c68:	10800044 	addi	r2,r2,1
    5c6c:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    5c70:	e0bfff17 	ldw	r2,-4(fp)
    5c74:	10bfffc4 	addi	r2,r2,-1
    5c78:	e0bfff15 	stw	r2,-4(fp)
    5c7c:	e0bfff17 	ldw	r2,-4(fp)
    5c80:	10bfffd8 	cmpnei	r2,r2,-1
    5c84:	103fee1e 	bne	r2,zero,5c40 <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    5c88:	e0bffa17 	ldw	r2,-24(fp)
}
    5c8c:	e037883a 	mov	sp,fp
    5c90:	dfc00117 	ldw	ra,4(sp)
    5c94:	df000017 	ldw	fp,0(sp)
    5c98:	dec00204 	addi	sp,sp,8
    5c9c:	f800283a 	ret

00005ca0 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    5ca0:	defff904 	addi	sp,sp,-28
    5ca4:	dfc00615 	stw	ra,24(sp)
    5ca8:	df000515 	stw	fp,20(sp)
    5cac:	df000504 	addi	fp,sp,20
    5cb0:	e13ffd15 	stw	r4,-12(fp)
    5cb4:	e17ffe15 	stw	r5,-8(fp)
    5cb8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    5cbc:	e0bffd17 	ldw	r2,-12(fp)
    5cc0:	10800017 	ldw	r2,0(r2)
    5cc4:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    5cc8:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    5ccc:	00000d06 	br	5d04 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    5cd0:	e0bffe17 	ldw	r2,-8(fp)
    5cd4:	10800003 	ldbu	r2,0(r2)
    5cd8:	11403fcc 	andi	r5,r2,255
    5cdc:	e13ffc17 	ldw	r4,-16(fp)
    5ce0:	0005b540 	call	5b54 <alt_up_rs232_write_data>
    5ce4:	1004c03a 	cmpne	r2,r2,zero
    5ce8:	10000c1e 	bne	r2,zero,5d1c <alt_up_rs232_write_fd+0x7c>
		{
			count++;
    5cec:	e0bffb17 	ldw	r2,-20(fp)
    5cf0:	10800044 	addi	r2,r2,1
    5cf4:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
    5cf8:	e0bffe17 	ldw	r2,-8(fp)
    5cfc:	10800044 	addi	r2,r2,1
    5d00:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    5d04:	e0bfff17 	ldw	r2,-4(fp)
    5d08:	10bfffc4 	addi	r2,r2,-1
    5d0c:	e0bfff15 	stw	r2,-4(fp)
    5d10:	e0bfff17 	ldw	r2,-4(fp)
    5d14:	10bfffd8 	cmpnei	r2,r2,-1
    5d18:	103fed1e 	bne	r2,zero,5cd0 <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
    5d1c:	e0bffb17 	ldw	r2,-20(fp)
}
    5d20:	e037883a 	mov	sp,fp
    5d24:	dfc00117 	ldw	ra,4(sp)
    5d28:	df000017 	ldw	fp,0(sp)
    5d2c:	dec00204 	addi	sp,sp,8
    5d30:	f800283a 	ret

00005d34 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    5d34:	defffc04 	addi	sp,sp,-16
    5d38:	dfc00315 	stw	ra,12(sp)
    5d3c:	df000215 	stw	fp,8(sp)
    5d40:	df000204 	addi	fp,sp,8
    5d44:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    5d48:	e13fff17 	ldw	r4,-4(fp)
    5d4c:	01400074 	movhi	r5,1
    5d50:	29650d04 	addi	r5,r5,-27596
    5d54:	00063c40 	call	63c4 <alt_find_dev>
    5d58:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    5d5c:	e0bffe17 	ldw	r2,-8(fp)
}
    5d60:	e037883a 	mov	sp,fp
    5d64:	dfc00117 	ldw	ra,4(sp)
    5d68:	df000017 	ldw	fp,0(sp)
    5d6c:	dec00204 	addi	sp,sp,8
    5d70:	f800283a 	ret

00005d74 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    5d74:	defffc04 	addi	sp,sp,-16
    5d78:	dfc00315 	stw	ra,12(sp)
    5d7c:	df000215 	stw	fp,8(sp)
    5d80:	df000204 	addi	fp,sp,8
    5d84:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
    5d88:	e0bfff17 	ldw	r2,-4(fp)
    5d8c:	10800217 	ldw	r2,8(r2)
    5d90:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
    5d94:	00000c06 	br	5dc8 <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    5d98:	e13ffe17 	ldw	r4,-8(fp)
    5d9c:	01400034 	movhi	r5,0
    5da0:	295d8f04 	addi	r5,r5,30268
    5da4:	00070900 	call	7090 <strcmp>
    5da8:	1004c03a 	cmpne	r2,r2,zero
    5dac:	1000031e 	bne	r2,zero,5dbc <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
    5db0:	e0bffe17 	ldw	r2,-8(fp)
    5db4:	10000005 	stb	zero,0(r2)
			break;
    5db8:	00000a06 	br	5de4 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    5dbc:	e0bffe17 	ldw	r2,-8(fp)
    5dc0:	10800044 	addi	r2,r2,1
    5dc4:	e0bffe15 	stw	r2,-8(fp)
    5dc8:	e0bffe17 	ldw	r2,-8(fp)
    5dcc:	10800003 	ldbu	r2,0(r2)
    5dd0:	10803fcc 	andi	r2,r2,255
    5dd4:	1080201c 	xori	r2,r2,128
    5dd8:	10bfe004 	addi	r2,r2,-128
    5ddc:	1004c03a 	cmpne	r2,r2,zero
    5de0:	103fed1e 	bne	r2,zero,5d98 <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
    5de4:	e037883a 	mov	sp,fp
    5de8:	dfc00117 	ldw	ra,4(sp)
    5dec:	df000017 	ldw	fp,0(sp)
    5df0:	dec00204 	addi	sp,sp,8
    5df4:	f800283a 	ret

00005df8 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    5df8:	defffc04 	addi	sp,sp,-16
    5dfc:	dfc00315 	stw	ra,12(sp)
    5e00:	df000215 	stw	fp,8(sp)
    5e04:	df000204 	addi	fp,sp,8
    5e08:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    5e0c:	e13fff17 	ldw	r4,-4(fp)
    5e10:	01400074 	movhi	r5,1
    5e14:	29650d04 	addi	r5,r5,-27596
    5e18:	00063c40 	call	63c4 <alt_find_dev>
    5e1c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    5e20:	e0bffe17 	ldw	r2,-8(fp)
}
    5e24:	e037883a 	mov	sp,fp
    5e28:	dfc00117 	ldw	ra,4(sp)
    5e2c:	df000017 	ldw	fp,0(sp)
    5e30:	dec00204 	addi	sp,sp,8
    5e34:	f800283a 	ret

00005e38 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    5e38:	defff904 	addi	sp,sp,-28
    5e3c:	df000615 	stw	fp,24(sp)
    5e40:	df000604 	addi	fp,sp,24
    5e44:	e13ffb15 	stw	r4,-20(fp)
    5e48:	e1bffd15 	stw	r6,-12(fp)
    5e4c:	e1fffe15 	stw	r7,-8(fp)
    5e50:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    5e54:	e0bffb17 	ldw	r2,-20(fp)
    5e58:	10c00c17 	ldw	r3,48(r2)
    5e5c:	e0bffd17 	ldw	r2,-12(fp)
    5e60:	10c0042e 	bgeu	r2,r3,5e74 <alt_up_char_buffer_draw+0x3c>
    5e64:	e0bffb17 	ldw	r2,-20(fp)
    5e68:	10c00d17 	ldw	r3,52(r2)
    5e6c:	e0bffe17 	ldw	r2,-8(fp)
    5e70:	10c00336 	bltu	r2,r3,5e80 <alt_up_char_buffer_draw+0x48>
		return -1;
    5e74:	00bfffc4 	movi	r2,-1
    5e78:	e0bfff15 	stw	r2,-4(fp)
    5e7c:	00001d06 	br	5ef4 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
    5e80:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
    5e84:	e0bffb17 	ldw	r2,-20(fp)
    5e88:	10c00f17 	ldw	r3,60(r2)
    5e8c:	e0bffd17 	ldw	r2,-12(fp)
    5e90:	1886703a 	and	r3,r3,r2
    5e94:	e0bffb17 	ldw	r2,-20(fp)
    5e98:	10800e17 	ldw	r2,56(r2)
    5e9c:	1886983a 	sll	r3,r3,r2
    5ea0:	e0bffa17 	ldw	r2,-24(fp)
    5ea4:	10c4b03a 	or	r2,r2,r3
    5ea8:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
    5eac:	e0bffb17 	ldw	r2,-20(fp)
    5eb0:	10c01117 	ldw	r3,68(r2)
    5eb4:	e0bffe17 	ldw	r2,-8(fp)
    5eb8:	1886703a 	and	r3,r3,r2
    5ebc:	e0bffb17 	ldw	r2,-20(fp)
    5ec0:	10801017 	ldw	r2,64(r2)
    5ec4:	1886983a 	sll	r3,r3,r2
    5ec8:	e0bffa17 	ldw	r2,-24(fp)
    5ecc:	10c4b03a 	or	r2,r2,r3
    5ed0:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    5ed4:	e0bffb17 	ldw	r2,-20(fp)
    5ed8:	10800b17 	ldw	r2,44(r2)
    5edc:	1007883a 	mov	r3,r2
    5ee0:	e0bffa17 	ldw	r2,-24(fp)
    5ee4:	1885883a 	add	r2,r3,r2
    5ee8:	e0fffc03 	ldbu	r3,-16(fp)
    5eec:	10c00025 	stbio	r3,0(r2)

	return 0;
    5ef0:	e03fff15 	stw	zero,-4(fp)
    5ef4:	e0bfff17 	ldw	r2,-4(fp)
}
    5ef8:	e037883a 	mov	sp,fp
    5efc:	df000017 	ldw	fp,0(sp)
    5f00:	dec00104 	addi	sp,sp,4
    5f04:	f800283a 	ret

00005f08 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
    5f08:	defff904 	addi	sp,sp,-28
    5f0c:	df000615 	stw	fp,24(sp)
    5f10:	df000604 	addi	fp,sp,24
    5f14:	e13ffb15 	stw	r4,-20(fp)
    5f18:	e17ffc15 	stw	r5,-16(fp)
    5f1c:	e1bffd15 	stw	r6,-12(fp)
    5f20:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    5f24:	e0bffb17 	ldw	r2,-20(fp)
    5f28:	10c00c17 	ldw	r3,48(r2)
    5f2c:	e0bffd17 	ldw	r2,-12(fp)
    5f30:	10c0042e 	bgeu	r2,r3,5f44 <alt_up_char_buffer_string+0x3c>
    5f34:	e0bffb17 	ldw	r2,-20(fp)
    5f38:	10c00d17 	ldw	r3,52(r2)
    5f3c:	e0bffe17 	ldw	r2,-8(fp)
    5f40:	10c00336 	bltu	r2,r3,5f50 <alt_up_char_buffer_string+0x48>
		return -1;
    5f44:	00bfffc4 	movi	r2,-1
    5f48:	e0bfff15 	stw	r2,-4(fp)
    5f4c:	00002e06 	br	6008 <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
    5f50:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
    5f54:	e0bffb17 	ldw	r2,-20(fp)
    5f58:	10801017 	ldw	r2,64(r2)
    5f5c:	1007883a 	mov	r3,r2
    5f60:	e0bffe17 	ldw	r2,-8(fp)
    5f64:	10c6983a 	sll	r3,r2,r3
    5f68:	e0bffd17 	ldw	r2,-12(fp)
    5f6c:	1885883a 	add	r2,r3,r2
    5f70:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
    5f74:	00001c06 	br	5fe8 <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    5f78:	e0bffb17 	ldw	r2,-20(fp)
    5f7c:	10800b17 	ldw	r2,44(r2)
    5f80:	1007883a 	mov	r3,r2
    5f84:	e0bffa17 	ldw	r2,-24(fp)
    5f88:	1889883a 	add	r4,r3,r2
    5f8c:	e0bffc17 	ldw	r2,-16(fp)
    5f90:	10800003 	ldbu	r2,0(r2)
    5f94:	10c03fcc 	andi	r3,r2,255
    5f98:	18c0201c 	xori	r3,r3,128
    5f9c:	18ffe004 	addi	r3,r3,-128
    5fa0:	2005883a 	mov	r2,r4
    5fa4:	10c00025 	stbio	r3,0(r2)
		++ptr;
    5fa8:	e0bffc17 	ldw	r2,-16(fp)
    5fac:	10800044 	addi	r2,r2,1
    5fb0:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
    5fb4:	e0bffd17 	ldw	r2,-12(fp)
    5fb8:	10800044 	addi	r2,r2,1
    5fbc:	e0bffd15 	stw	r2,-12(fp)
    5fc0:	e0bffb17 	ldw	r2,-20(fp)
    5fc4:	10c00c17 	ldw	r3,48(r2)
    5fc8:	e0bffd17 	ldw	r2,-12(fp)
    5fcc:	10c00336 	bltu	r2,r3,5fdc <alt_up_char_buffer_string+0xd4>
			return -1;
    5fd0:	00bfffc4 	movi	r2,-1
    5fd4:	e0bfff15 	stw	r2,-4(fp)
    5fd8:	00000b06 	br	6008 <alt_up_char_buffer_string+0x100>
		++offset;
    5fdc:	e0bffa17 	ldw	r2,-24(fp)
    5fe0:	10800044 	addi	r2,r2,1
    5fe4:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    5fe8:	e0bffc17 	ldw	r2,-16(fp)
    5fec:	10800003 	ldbu	r2,0(r2)
    5ff0:	10803fcc 	andi	r2,r2,255
    5ff4:	1080201c 	xori	r2,r2,128
    5ff8:	10bfe004 	addi	r2,r2,-128
    5ffc:	1004c03a 	cmpne	r2,r2,zero
    6000:	103fdd1e 	bne	r2,zero,5f78 <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
    6004:	e03fff15 	stw	zero,-4(fp)
    6008:	e0bfff17 	ldw	r2,-4(fp)
}
    600c:	e037883a 	mov	sp,fp
    6010:	df000017 	ldw	fp,0(sp)
    6014:	dec00104 	addi	sp,sp,4
    6018:	f800283a 	ret

0000601c <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
    601c:	defffe04 	addi	sp,sp,-8
    6020:	df000115 	stw	fp,4(sp)
    6024:	df000104 	addi	fp,sp,4
    6028:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    602c:	e0bfff17 	ldw	r2,-4(fp)
    6030:	10800a17 	ldw	r2,40(r2)
    6034:	10800084 	addi	r2,r2,2
    6038:	1007883a 	mov	r3,r2
    603c:	00800044 	movi	r2,1
    6040:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    6044:	e0bfff17 	ldw	r2,-4(fp)
    6048:	10800a17 	ldw	r2,40(r2)
    604c:	10800084 	addi	r2,r2,2
    6050:	10800023 	ldbuio	r2,0(r2)
    6054:	1080004c 	andi	r2,r2,1
    6058:	10803fcc 	andi	r2,r2,255
    605c:	1004c03a 	cmpne	r2,r2,zero
    6060:	103ff81e 	bne	r2,zero,6044 <alt_up_char_buffer_clear+0x28>
	return 0;
    6064:	0005883a 	mov	r2,zero
}
    6068:	e037883a 	mov	sp,fp
    606c:	df000017 	ldw	fp,0(sp)
    6070:	dec00104 	addi	sp,sp,4
    6074:	f800283a 	ret

00006078 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    6078:	defff404 	addi	sp,sp,-48
    607c:	df000b15 	stw	fp,44(sp)
    6080:	df000b04 	addi	fp,sp,44
    6084:	e13ffb15 	stw	r4,-20(fp)
    6088:	e17ffc15 	stw	r5,-16(fp)
    608c:	e1bffd15 	stw	r6,-12(fp)
    6090:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    6094:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    6098:	00800074 	movhi	r2,1
    609c:	10ac9c04 	addi	r2,r2,-19856
    60a0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    60a4:	1005003a 	cmpeq	r2,r2,zero
    60a8:	1000411e 	bne	r2,zero,61b0 <alt_alarm_start+0x138>
  {
    if (alarm)
    60ac:	e0bffb17 	ldw	r2,-20(fp)
    60b0:	1005003a 	cmpeq	r2,r2,zero
    60b4:	10003b1e 	bne	r2,zero,61a4 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    60b8:	e0fffb17 	ldw	r3,-20(fp)
    60bc:	e0bffd17 	ldw	r2,-12(fp)
    60c0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    60c4:	e0fffb17 	ldw	r3,-20(fp)
    60c8:	e0bffe17 	ldw	r2,-8(fp)
    60cc:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    60d0:	0005303a 	rdctl	r2,status
    60d4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    60d8:	e0fff817 	ldw	r3,-32(fp)
    60dc:	00bfff84 	movi	r2,-2
    60e0:	1884703a 	and	r2,r3,r2
    60e4:	1001703a 	wrctl	status,r2
  
  return context;
    60e8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    60ec:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    60f0:	00800074 	movhi	r2,1
    60f4:	10ac9d04 	addi	r2,r2,-19852
    60f8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    60fc:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    6100:	e0fffc17 	ldw	r3,-16(fp)
    6104:	e0bff917 	ldw	r2,-28(fp)
    6108:	1885883a 	add	r2,r3,r2
    610c:	10c00044 	addi	r3,r2,1
    6110:	e0bffb17 	ldw	r2,-20(fp)
    6114:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    6118:	e0bffb17 	ldw	r2,-20(fp)
    611c:	10c00217 	ldw	r3,8(r2)
    6120:	e0bff917 	ldw	r2,-28(fp)
    6124:	1880042e 	bgeu	r3,r2,6138 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    6128:	e0fffb17 	ldw	r3,-20(fp)
    612c:	00800044 	movi	r2,1
    6130:	18800405 	stb	r2,16(r3)
    6134:	00000206 	br	6140 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    6138:	e0bffb17 	ldw	r2,-20(fp)
    613c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    6140:	e0fffb17 	ldw	r3,-20(fp)
    6144:	00800074 	movhi	r2,1
    6148:	10a51304 	addi	r2,r2,-27572
    614c:	e0bff615 	stw	r2,-40(fp)
    6150:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    6154:	e0fff717 	ldw	r3,-36(fp)
    6158:	e0bff617 	ldw	r2,-40(fp)
    615c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    6160:	e0bff617 	ldw	r2,-40(fp)
    6164:	10c00017 	ldw	r3,0(r2)
    6168:	e0bff717 	ldw	r2,-36(fp)
    616c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    6170:	e0bff617 	ldw	r2,-40(fp)
    6174:	10c00017 	ldw	r3,0(r2)
    6178:	e0bff717 	ldw	r2,-36(fp)
    617c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    6180:	e0fff617 	ldw	r3,-40(fp)
    6184:	e0bff717 	ldw	r2,-36(fp)
    6188:	18800015 	stw	r2,0(r3)
    618c:	e0bffa17 	ldw	r2,-24(fp)
    6190:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6194:	e0bff517 	ldw	r2,-44(fp)
    6198:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    619c:	e03fff15 	stw	zero,-4(fp)
    61a0:	00000506 	br	61b8 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    61a4:	00bffa84 	movi	r2,-22
    61a8:	e0bfff15 	stw	r2,-4(fp)
    61ac:	00000206 	br	61b8 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    61b0:	00bfde84 	movi	r2,-134
    61b4:	e0bfff15 	stw	r2,-4(fp)
    61b8:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    61bc:	e037883a 	mov	sp,fp
    61c0:	df000017 	ldw	fp,0(sp)
    61c4:	dec00104 	addi	sp,sp,4
    61c8:	f800283a 	ret

000061cc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    61cc:	deffff04 	addi	sp,sp,-4
    61d0:	df000015 	stw	fp,0(sp)
    61d4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    61d8:	e037883a 	mov	sp,fp
    61dc:	df000017 	ldw	fp,0(sp)
    61e0:	dec00104 	addi	sp,sp,4
    61e4:	f800283a 	ret

000061e8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    61e8:	defff904 	addi	sp,sp,-28
    61ec:	dfc00615 	stw	ra,24(sp)
    61f0:	df000515 	stw	fp,20(sp)
    61f4:	df000504 	addi	fp,sp,20
    61f8:	e13ffd15 	stw	r4,-12(fp)
    61fc:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    6200:	e0bffd17 	ldw	r2,-12(fp)
    6204:	1005003a 	cmpeq	r2,r2,zero
    6208:	1000041e 	bne	r2,zero,621c <alt_dev_llist_insert+0x34>
    620c:	e0bffd17 	ldw	r2,-12(fp)
    6210:	10800217 	ldw	r2,8(r2)
    6214:	1004c03a 	cmpne	r2,r2,zero
    6218:	1000071e 	bne	r2,zero,6238 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    621c:	000629c0 	call	629c <alt_get_errno>
    6220:	1007883a 	mov	r3,r2
    6224:	00800584 	movi	r2,22
    6228:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    622c:	00bffa84 	movi	r2,-22
    6230:	e0bfff15 	stw	r2,-4(fp)
    6234:	00001306 	br	6284 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    6238:	e0fffd17 	ldw	r3,-12(fp)
    623c:	e0bffe17 	ldw	r2,-8(fp)
    6240:	e0bffb15 	stw	r2,-20(fp)
    6244:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    6248:	e0fffc17 	ldw	r3,-16(fp)
    624c:	e0bffb17 	ldw	r2,-20(fp)
    6250:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    6254:	e0bffb17 	ldw	r2,-20(fp)
    6258:	10c00017 	ldw	r3,0(r2)
    625c:	e0bffc17 	ldw	r2,-16(fp)
    6260:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    6264:	e0bffb17 	ldw	r2,-20(fp)
    6268:	10c00017 	ldw	r3,0(r2)
    626c:	e0bffc17 	ldw	r2,-16(fp)
    6270:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    6274:	e0fffb17 	ldw	r3,-20(fp)
    6278:	e0bffc17 	ldw	r2,-16(fp)
    627c:	18800015 	stw	r2,0(r3)

  return 0;  
    6280:	e03fff15 	stw	zero,-4(fp)
    6284:	e0bfff17 	ldw	r2,-4(fp)
}
    6288:	e037883a 	mov	sp,fp
    628c:	dfc00117 	ldw	ra,4(sp)
    6290:	df000017 	ldw	fp,0(sp)
    6294:	dec00204 	addi	sp,sp,8
    6298:	f800283a 	ret

0000629c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    629c:	defffd04 	addi	sp,sp,-12
    62a0:	dfc00215 	stw	ra,8(sp)
    62a4:	df000115 	stw	fp,4(sp)
    62a8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    62ac:	00800074 	movhi	r2,1
    62b0:	10a51004 	addi	r2,r2,-27584
    62b4:	10800017 	ldw	r2,0(r2)
    62b8:	1005003a 	cmpeq	r2,r2,zero
    62bc:	1000061e 	bne	r2,zero,62d8 <alt_get_errno+0x3c>
    62c0:	00800074 	movhi	r2,1
    62c4:	10a51004 	addi	r2,r2,-27584
    62c8:	10800017 	ldw	r2,0(r2)
    62cc:	103ee83a 	callr	r2
    62d0:	e0bfff15 	stw	r2,-4(fp)
    62d4:	00000306 	br	62e4 <alt_get_errno+0x48>
    62d8:	00800074 	movhi	r2,1
    62dc:	10ac9704 	addi	r2,r2,-19876
    62e0:	e0bfff15 	stw	r2,-4(fp)
    62e4:	e0bfff17 	ldw	r2,-4(fp)
}
    62e8:	e037883a 	mov	sp,fp
    62ec:	dfc00117 	ldw	ra,4(sp)
    62f0:	df000017 	ldw	fp,0(sp)
    62f4:	dec00204 	addi	sp,sp,8
    62f8:	f800283a 	ret

000062fc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    62fc:	defffd04 	addi	sp,sp,-12
    6300:	dfc00215 	stw	ra,8(sp)
    6304:	df000115 	stw	fp,4(sp)
    6308:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    630c:	00bfff04 	movi	r2,-4
    6310:	00c00034 	movhi	r3,0
    6314:	18dd2604 	addi	r3,r3,29848
    6318:	1885883a 	add	r2,r3,r2
    631c:	e0bfff15 	stw	r2,-4(fp)
    6320:	00000606 	br	633c <_do_ctors+0x40>
        (*ctor) (); 
    6324:	e0bfff17 	ldw	r2,-4(fp)
    6328:	10800017 	ldw	r2,0(r2)
    632c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    6330:	e0bfff17 	ldw	r2,-4(fp)
    6334:	10bfff04 	addi	r2,r2,-4
    6338:	e0bfff15 	stw	r2,-4(fp)
    633c:	e0ffff17 	ldw	r3,-4(fp)
    6340:	00800034 	movhi	r2,0
    6344:	109d2504 	addi	r2,r2,29844
    6348:	18bff62e 	bgeu	r3,r2,6324 <_do_ctors+0x28>
        (*ctor) (); 
}
    634c:	e037883a 	mov	sp,fp
    6350:	dfc00117 	ldw	ra,4(sp)
    6354:	df000017 	ldw	fp,0(sp)
    6358:	dec00204 	addi	sp,sp,8
    635c:	f800283a 	ret

00006360 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    6360:	defffd04 	addi	sp,sp,-12
    6364:	dfc00215 	stw	ra,8(sp)
    6368:	df000115 	stw	fp,4(sp)
    636c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    6370:	00bfff04 	movi	r2,-4
    6374:	00c00034 	movhi	r3,0
    6378:	18dd2604 	addi	r3,r3,29848
    637c:	1885883a 	add	r2,r3,r2
    6380:	e0bfff15 	stw	r2,-4(fp)
    6384:	00000606 	br	63a0 <_do_dtors+0x40>
        (*dtor) (); 
    6388:	e0bfff17 	ldw	r2,-4(fp)
    638c:	10800017 	ldw	r2,0(r2)
    6390:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    6394:	e0bfff17 	ldw	r2,-4(fp)
    6398:	10bfff04 	addi	r2,r2,-4
    639c:	e0bfff15 	stw	r2,-4(fp)
    63a0:	e0ffff17 	ldw	r3,-4(fp)
    63a4:	00800034 	movhi	r2,0
    63a8:	109d2604 	addi	r2,r2,29848
    63ac:	18bff62e 	bgeu	r3,r2,6388 <_do_dtors+0x28>
        (*dtor) (); 
}
    63b0:	e037883a 	mov	sp,fp
    63b4:	dfc00117 	ldw	ra,4(sp)
    63b8:	df000017 	ldw	fp,0(sp)
    63bc:	dec00204 	addi	sp,sp,8
    63c0:	f800283a 	ret

000063c4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    63c4:	defff904 	addi	sp,sp,-28
    63c8:	dfc00615 	stw	ra,24(sp)
    63cc:	df000515 	stw	fp,20(sp)
    63d0:	df000504 	addi	fp,sp,20
    63d4:	e13ffd15 	stw	r4,-12(fp)
    63d8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    63dc:	e0bffe17 	ldw	r2,-8(fp)
    63e0:	10800017 	ldw	r2,0(r2)
    63e4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    63e8:	e13ffd17 	ldw	r4,-12(fp)
    63ec:	00003440 	call	344 <strlen>
    63f0:	10800044 	addi	r2,r2,1
    63f4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    63f8:	00000d06 	br	6430 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    63fc:	e0bffc17 	ldw	r2,-16(fp)
    6400:	11000217 	ldw	r4,8(r2)
    6404:	e1bffb17 	ldw	r6,-20(fp)
    6408:	e17ffd17 	ldw	r5,-12(fp)
    640c:	000701c0 	call	701c <memcmp>
    6410:	1004c03a 	cmpne	r2,r2,zero
    6414:	1000031e 	bne	r2,zero,6424 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    6418:	e0bffc17 	ldw	r2,-16(fp)
    641c:	e0bfff15 	stw	r2,-4(fp)
    6420:	00000706 	br	6440 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    6424:	e0bffc17 	ldw	r2,-16(fp)
    6428:	10800017 	ldw	r2,0(r2)
    642c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    6430:	e0fffe17 	ldw	r3,-8(fp)
    6434:	e0bffc17 	ldw	r2,-16(fp)
    6438:	10fff01e 	bne	r2,r3,63fc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    643c:	e03fff15 	stw	zero,-4(fp)
    6440:	e0bfff17 	ldw	r2,-4(fp)
}
    6444:	e037883a 	mov	sp,fp
    6448:	dfc00117 	ldw	ra,4(sp)
    644c:	df000017 	ldw	fp,0(sp)
    6450:	dec00204 	addi	sp,sp,8
    6454:	f800283a 	ret

00006458 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    6458:	defffe04 	addi	sp,sp,-8
    645c:	dfc00115 	stw	ra,4(sp)
    6460:	df000015 	stw	fp,0(sp)
    6464:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    6468:	0009883a 	mov	r4,zero
    646c:	01440004 	movi	r5,4096
    6470:	0006f400 	call	6f40 <alt_icache_flush>
#endif
}
    6474:	e037883a 	mov	sp,fp
    6478:	dfc00117 	ldw	ra,4(sp)
    647c:	df000017 	ldw	fp,0(sp)
    6480:	dec00204 	addi	sp,sp,8
    6484:	f800283a 	ret

00006488 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    6488:	defff904 	addi	sp,sp,-28
    648c:	dfc00615 	stw	ra,24(sp)
    6490:	df000515 	stw	fp,20(sp)
    6494:	df000504 	addi	fp,sp,20
    6498:	e13ffc15 	stw	r4,-16(fp)
    649c:	e17ffd15 	stw	r5,-12(fp)
    64a0:	e1bffe15 	stw	r6,-8(fp)
    64a4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    64a8:	e13ffd17 	ldw	r4,-12(fp)
    64ac:	e17ffe17 	ldw	r5,-8(fp)
    64b0:	e1bfff17 	ldw	r6,-4(fp)
    64b4:	00068600 	call	6860 <open>
    64b8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    64bc:	e0bffb17 	ldw	r2,-20(fp)
    64c0:	1004803a 	cmplt	r2,r2,zero
    64c4:	10001c1e 	bne	r2,zero,6538 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    64c8:	e0bffb17 	ldw	r2,-20(fp)
    64cc:	00c00034 	movhi	r3,0
    64d0:	18dfa204 	addi	r3,r3,32392
    64d4:	10800324 	muli	r2,r2,12
    64d8:	10c5883a 	add	r2,r2,r3
    64dc:	10c00017 	ldw	r3,0(r2)
    64e0:	e0bffc17 	ldw	r2,-16(fp)
    64e4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    64e8:	e0bffb17 	ldw	r2,-20(fp)
    64ec:	00c00034 	movhi	r3,0
    64f0:	18dfa204 	addi	r3,r3,32392
    64f4:	10800324 	muli	r2,r2,12
    64f8:	10c5883a 	add	r2,r2,r3
    64fc:	10800104 	addi	r2,r2,4
    6500:	10c00017 	ldw	r3,0(r2)
    6504:	e0bffc17 	ldw	r2,-16(fp)
    6508:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    650c:	e0bffb17 	ldw	r2,-20(fp)
    6510:	00c00034 	movhi	r3,0
    6514:	18dfa204 	addi	r3,r3,32392
    6518:	10800324 	muli	r2,r2,12
    651c:	10c5883a 	add	r2,r2,r3
    6520:	10800204 	addi	r2,r2,8
    6524:	10c00017 	ldw	r3,0(r2)
    6528:	e0bffc17 	ldw	r2,-16(fp)
    652c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    6530:	e13ffb17 	ldw	r4,-20(fp)
    6534:	00033e40 	call	33e4 <alt_release_fd>
  }
} 
    6538:	e037883a 	mov	sp,fp
    653c:	dfc00117 	ldw	ra,4(sp)
    6540:	df000017 	ldw	fp,0(sp)
    6544:	dec00204 	addi	sp,sp,8
    6548:	f800283a 	ret

0000654c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    654c:	defffb04 	addi	sp,sp,-20
    6550:	dfc00415 	stw	ra,16(sp)
    6554:	df000315 	stw	fp,12(sp)
    6558:	df000304 	addi	fp,sp,12
    655c:	e13ffd15 	stw	r4,-12(fp)
    6560:	e17ffe15 	stw	r5,-8(fp)
    6564:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    6568:	01000034 	movhi	r4,0
    656c:	211fa504 	addi	r4,r4,32404
    6570:	e17ffd17 	ldw	r5,-12(fp)
    6574:	01800044 	movi	r6,1
    6578:	01c07fc4 	movi	r7,511
    657c:	00064880 	call	6488 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    6580:	01000034 	movhi	r4,0
    6584:	211fa204 	addi	r4,r4,32392
    6588:	e17ffe17 	ldw	r5,-8(fp)
    658c:	000d883a 	mov	r6,zero
    6590:	01c07fc4 	movi	r7,511
    6594:	00064880 	call	6488 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    6598:	01000034 	movhi	r4,0
    659c:	211fa804 	addi	r4,r4,32416
    65a0:	e17fff17 	ldw	r5,-4(fp)
    65a4:	01800044 	movi	r6,1
    65a8:	01c07fc4 	movi	r7,511
    65ac:	00064880 	call	6488 <alt_open_fd>
}  
    65b0:	e037883a 	mov	sp,fp
    65b4:	dfc00117 	ldw	ra,4(sp)
    65b8:	df000017 	ldw	fp,0(sp)
    65bc:	dec00204 	addi	sp,sp,8
    65c0:	f800283a 	ret

000065c4 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    65c4:	deffef04 	addi	sp,sp,-68
    65c8:	df001015 	stw	fp,64(sp)
    65cc:	df001004 	addi	fp,sp,64
    65d0:	e13ffc15 	stw	r4,-16(fp)
    65d4:	e17ffd15 	stw	r5,-12(fp)
    65d8:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
    65dc:	00bffa84 	movi	r2,-22
    65e0:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    65e4:	e0bffc17 	ldw	r2,-16(fp)
    65e8:	10800828 	cmpgeui	r2,r2,32
    65ec:	1000601e 	bne	r2,zero,6770 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    65f0:	0005303a 	rdctl	r2,status
    65f4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    65f8:	e0fff917 	ldw	r3,-28(fp)
    65fc:	00bfff84 	movi	r2,-2
    6600:	1884703a 	and	r2,r3,r2
    6604:	1001703a 	wrctl	status,r2
  
  return context;
    6608:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    660c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
    6610:	e0bffc17 	ldw	r2,-16(fp)
    6614:	00c00074 	movhi	r3,1
    6618:	18eca804 	addi	r3,r3,-19808
    661c:	100490fa 	slli	r2,r2,3
    6620:	10c7883a 	add	r3,r2,r3
    6624:	e0bffe17 	ldw	r2,-8(fp)
    6628:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
    662c:	e0bffc17 	ldw	r2,-16(fp)
    6630:	00c00074 	movhi	r3,1
    6634:	18eca804 	addi	r3,r3,-19808
    6638:	100490fa 	slli	r2,r2,3
    663c:	10c5883a 	add	r2,r2,r3
    6640:	10c00104 	addi	r3,r2,4
    6644:	e0bffd17 	ldw	r2,-12(fp)
    6648:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    664c:	e0bffe17 	ldw	r2,-8(fp)
    6650:	1005003a 	cmpeq	r2,r2,zero
    6654:	1000201e 	bne	r2,zero,66d8 <alt_irq_register+0x114>
    6658:	e0bffc17 	ldw	r2,-16(fp)
    665c:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6660:	0005303a 	rdctl	r2,status
    6664:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6668:	e0fff617 	ldw	r3,-40(fp)
    666c:	00bfff84 	movi	r2,-2
    6670:	1884703a 	and	r2,r3,r2
    6674:	1001703a 	wrctl	status,r2
  
  return context;
    6678:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    667c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    6680:	e0fff717 	ldw	r3,-36(fp)
    6684:	00800044 	movi	r2,1
    6688:	10c4983a 	sll	r2,r2,r3
    668c:	1007883a 	mov	r3,r2
    6690:	00800074 	movhi	r2,1
    6694:	10ac9b04 	addi	r2,r2,-19860
    6698:	10800017 	ldw	r2,0(r2)
    669c:	1886b03a 	or	r3,r3,r2
    66a0:	00800074 	movhi	r2,1
    66a4:	10ac9b04 	addi	r2,r2,-19860
    66a8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    66ac:	00800074 	movhi	r2,1
    66b0:	10ac9b04 	addi	r2,r2,-19860
    66b4:	10800017 	ldw	r2,0(r2)
    66b8:	100170fa 	wrctl	ienable,r2
    66bc:	e0bff817 	ldw	r2,-32(fp)
    66c0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    66c4:	e0bff517 	ldw	r2,-44(fp)
    66c8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    66cc:	0005883a 	mov	r2,zero
    66d0:	e0bfff15 	stw	r2,-4(fp)
    66d4:	00002006 	br	6758 <alt_irq_register+0x194>
    66d8:	e0bffc17 	ldw	r2,-16(fp)
    66dc:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    66e0:	0005303a 	rdctl	r2,status
    66e4:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    66e8:	e0fff217 	ldw	r3,-56(fp)
    66ec:	00bfff84 	movi	r2,-2
    66f0:	1884703a 	and	r2,r3,r2
    66f4:	1001703a 	wrctl	status,r2
  
  return context;
    66f8:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    66fc:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
    6700:	e0fff317 	ldw	r3,-52(fp)
    6704:	00800044 	movi	r2,1
    6708:	10c4983a 	sll	r2,r2,r3
    670c:	0084303a 	nor	r2,zero,r2
    6710:	1007883a 	mov	r3,r2
    6714:	00800074 	movhi	r2,1
    6718:	10ac9b04 	addi	r2,r2,-19860
    671c:	10800017 	ldw	r2,0(r2)
    6720:	1886703a 	and	r3,r3,r2
    6724:	00800074 	movhi	r2,1
    6728:	10ac9b04 	addi	r2,r2,-19860
    672c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    6730:	00800074 	movhi	r2,1
    6734:	10ac9b04 	addi	r2,r2,-19860
    6738:	10800017 	ldw	r2,0(r2)
    673c:	100170fa 	wrctl	ienable,r2
    6740:	e0bff417 	ldw	r2,-48(fp)
    6744:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6748:	e0bff117 	ldw	r2,-60(fp)
    674c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    6750:	0005883a 	mov	r2,zero
    6754:	e0bfff15 	stw	r2,-4(fp)
    6758:	e0bfff17 	ldw	r2,-4(fp)
    675c:	e0bffb15 	stw	r2,-20(fp)
    6760:	e0bffa17 	ldw	r2,-24(fp)
    6764:	e0bff015 	stw	r2,-64(fp)
    6768:	e0bff017 	ldw	r2,-64(fp)
    676c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    6770:	e0bffb17 	ldw	r2,-20(fp)
}
    6774:	e037883a 	mov	sp,fp
    6778:	df000017 	ldw	fp,0(sp)
    677c:	dec00104 	addi	sp,sp,4
    6780:	f800283a 	ret

00006784 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    6784:	defffc04 	addi	sp,sp,-16
    6788:	df000315 	stw	fp,12(sp)
    678c:	df000304 	addi	fp,sp,12
    6790:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    6794:	e0bffe17 	ldw	r2,-8(fp)
    6798:	10800217 	ldw	r2,8(r2)
    679c:	10d00034 	orhi	r3,r2,16384
    67a0:	e0bffe17 	ldw	r2,-8(fp)
    67a4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    67a8:	e03ffd15 	stw	zero,-12(fp)
    67ac:	00002006 	br	6830 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    67b0:	e0bffd17 	ldw	r2,-12(fp)
    67b4:	00c00034 	movhi	r3,0
    67b8:	18dfa204 	addi	r3,r3,32392
    67bc:	10800324 	muli	r2,r2,12
    67c0:	10c5883a 	add	r2,r2,r3
    67c4:	10c00017 	ldw	r3,0(r2)
    67c8:	e0bffe17 	ldw	r2,-8(fp)
    67cc:	10800017 	ldw	r2,0(r2)
    67d0:	1880141e 	bne	r3,r2,6824 <alt_file_locked+0xa0>
    67d4:	e0bffd17 	ldw	r2,-12(fp)
    67d8:	00c00034 	movhi	r3,0
    67dc:	18dfa204 	addi	r3,r3,32392
    67e0:	10800324 	muli	r2,r2,12
    67e4:	10c5883a 	add	r2,r2,r3
    67e8:	10800204 	addi	r2,r2,8
    67ec:	10800017 	ldw	r2,0(r2)
    67f0:	1004403a 	cmpge	r2,r2,zero
    67f4:	10000b1e 	bne	r2,zero,6824 <alt_file_locked+0xa0>
    67f8:	e0bffd17 	ldw	r2,-12(fp)
    67fc:	10800324 	muli	r2,r2,12
    6800:	1007883a 	mov	r3,r2
    6804:	00800034 	movhi	r2,0
    6808:	109fa204 	addi	r2,r2,32392
    680c:	1887883a 	add	r3,r3,r2
    6810:	e0bffe17 	ldw	r2,-8(fp)
    6814:	18800326 	beq	r3,r2,6824 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    6818:	00bffcc4 	movi	r2,-13
    681c:	e0bfff15 	stw	r2,-4(fp)
    6820:	00000a06 	br	684c <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    6824:	e0bffd17 	ldw	r2,-12(fp)
    6828:	10800044 	addi	r2,r2,1
    682c:	e0bffd15 	stw	r2,-12(fp)
    6830:	00800074 	movhi	r2,1
    6834:	10a50f04 	addi	r2,r2,-27588
    6838:	10800017 	ldw	r2,0(r2)
    683c:	1007883a 	mov	r3,r2
    6840:	e0bffd17 	ldw	r2,-12(fp)
    6844:	18bfda2e 	bgeu	r3,r2,67b0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    6848:	e03fff15 	stw	zero,-4(fp)
    684c:	e0bfff17 	ldw	r2,-4(fp)
}
    6850:	e037883a 	mov	sp,fp
    6854:	df000017 	ldw	fp,0(sp)
    6858:	dec00104 	addi	sp,sp,4
    685c:	f800283a 	ret

00006860 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    6860:	defff404 	addi	sp,sp,-48
    6864:	dfc00b15 	stw	ra,44(sp)
    6868:	df000a15 	stw	fp,40(sp)
    686c:	df000a04 	addi	fp,sp,40
    6870:	e13ffb15 	stw	r4,-20(fp)
    6874:	e17ffc15 	stw	r5,-16(fp)
    6878:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    687c:	00bfffc4 	movi	r2,-1
    6880:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    6884:	00bffb44 	movi	r2,-19
    6888:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    688c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    6890:	e13ffb17 	ldw	r4,-20(fp)
    6894:	01400074 	movhi	r5,1
    6898:	29650d04 	addi	r5,r5,-27596
    689c:	00063c40 	call	63c4 <alt_find_dev>
    68a0:	e0bffa15 	stw	r2,-24(fp)
    68a4:	e0bffa17 	ldw	r2,-24(fp)
    68a8:	1004c03a 	cmpne	r2,r2,zero
    68ac:	1000051e 	bne	r2,zero,68c4 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    68b0:	e13ffb17 	ldw	r4,-20(fp)
    68b4:	0006d680 	call	6d68 <alt_find_file>
    68b8:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    68bc:	00800044 	movi	r2,1
    68c0:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    68c4:	e0bffa17 	ldw	r2,-24(fp)
    68c8:	1005003a 	cmpeq	r2,r2,zero
    68cc:	1000301e 	bne	r2,zero,6990 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    68d0:	e13ffa17 	ldw	r4,-24(fp)
    68d4:	0006e880 	call	6e88 <alt_get_fd>
    68d8:	e0bff815 	stw	r2,-32(fp)
    68dc:	e0bff817 	ldw	r2,-32(fp)
    68e0:	1004403a 	cmpge	r2,r2,zero
    68e4:	1000031e 	bne	r2,zero,68f4 <open+0x94>
    {
      status = index;
    68e8:	e0bff817 	ldw	r2,-32(fp)
    68ec:	e0bff715 	stw	r2,-36(fp)
    68f0:	00002906 	br	6998 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    68f4:	e0bff817 	ldw	r2,-32(fp)
    68f8:	10800324 	muli	r2,r2,12
    68fc:	1007883a 	mov	r3,r2
    6900:	00800034 	movhi	r2,0
    6904:	109fa204 	addi	r2,r2,32392
    6908:	1885883a 	add	r2,r3,r2
    690c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    6910:	e0fffc17 	ldw	r3,-16(fp)
    6914:	00900034 	movhi	r2,16384
    6918:	10bfffc4 	addi	r2,r2,-1
    691c:	1886703a 	and	r3,r3,r2
    6920:	e0bff917 	ldw	r2,-28(fp)
    6924:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    6928:	e0bff617 	ldw	r2,-40(fp)
    692c:	1004c03a 	cmpne	r2,r2,zero
    6930:	1000061e 	bne	r2,zero,694c <open+0xec>
    6934:	e13ff917 	ldw	r4,-28(fp)
    6938:	00067840 	call	6784 <alt_file_locked>
    693c:	e0bff715 	stw	r2,-36(fp)
    6940:	e0bff717 	ldw	r2,-36(fp)
    6944:	1004803a 	cmplt	r2,r2,zero
    6948:	1000131e 	bne	r2,zero,6998 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    694c:	e0bffa17 	ldw	r2,-24(fp)
    6950:	10800317 	ldw	r2,12(r2)
    6954:	1005003a 	cmpeq	r2,r2,zero
    6958:	1000091e 	bne	r2,zero,6980 <open+0x120>
    695c:	e0bffa17 	ldw	r2,-24(fp)
    6960:	10800317 	ldw	r2,12(r2)
    6964:	e13ff917 	ldw	r4,-28(fp)
    6968:	e17ffb17 	ldw	r5,-20(fp)
    696c:	e1bffc17 	ldw	r6,-16(fp)
    6970:	e1fffd17 	ldw	r7,-12(fp)
    6974:	103ee83a 	callr	r2
    6978:	e0bfff15 	stw	r2,-4(fp)
    697c:	00000106 	br	6984 <open+0x124>
    6980:	e03fff15 	stw	zero,-4(fp)
    6984:	e0bfff17 	ldw	r2,-4(fp)
    6988:	e0bff715 	stw	r2,-36(fp)
    698c:	00000206 	br	6998 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    6990:	00bffb44 	movi	r2,-19
    6994:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    6998:	e0bff717 	ldw	r2,-36(fp)
    699c:	1004403a 	cmpge	r2,r2,zero
    69a0:	1000091e 	bne	r2,zero,69c8 <open+0x168>
  {
    alt_release_fd (index);  
    69a4:	e13ff817 	ldw	r4,-32(fp)
    69a8:	00033e40 	call	33e4 <alt_release_fd>
    ALT_ERRNO = -status;
    69ac:	00069e80 	call	69e8 <alt_get_errno>
    69b0:	e0fff717 	ldw	r3,-36(fp)
    69b4:	00c7c83a 	sub	r3,zero,r3
    69b8:	10c00015 	stw	r3,0(r2)
    return -1;
    69bc:	00bfffc4 	movi	r2,-1
    69c0:	e0bffe15 	stw	r2,-8(fp)
    69c4:	00000206 	br	69d0 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    69c8:	e0bff817 	ldw	r2,-32(fp)
    69cc:	e0bffe15 	stw	r2,-8(fp)
    69d0:	e0bffe17 	ldw	r2,-8(fp)
}
    69d4:	e037883a 	mov	sp,fp
    69d8:	dfc00117 	ldw	ra,4(sp)
    69dc:	df000017 	ldw	fp,0(sp)
    69e0:	dec00204 	addi	sp,sp,8
    69e4:	f800283a 	ret

000069e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    69e8:	defffd04 	addi	sp,sp,-12
    69ec:	dfc00215 	stw	ra,8(sp)
    69f0:	df000115 	stw	fp,4(sp)
    69f4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    69f8:	00800074 	movhi	r2,1
    69fc:	10a51004 	addi	r2,r2,-27584
    6a00:	10800017 	ldw	r2,0(r2)
    6a04:	1005003a 	cmpeq	r2,r2,zero
    6a08:	1000061e 	bne	r2,zero,6a24 <alt_get_errno+0x3c>
    6a0c:	00800074 	movhi	r2,1
    6a10:	10a51004 	addi	r2,r2,-27584
    6a14:	10800017 	ldw	r2,0(r2)
    6a18:	103ee83a 	callr	r2
    6a1c:	e0bfff15 	stw	r2,-4(fp)
    6a20:	00000306 	br	6a30 <alt_get_errno+0x48>
    6a24:	00800074 	movhi	r2,1
    6a28:	10ac9704 	addi	r2,r2,-19876
    6a2c:	e0bfff15 	stw	r2,-4(fp)
    6a30:	e0bfff17 	ldw	r2,-4(fp)
}
    6a34:	e037883a 	mov	sp,fp
    6a38:	dfc00117 	ldw	ra,4(sp)
    6a3c:	df000017 	ldw	fp,0(sp)
    6a40:	dec00204 	addi	sp,sp,8
    6a44:	f800283a 	ret

00006a48 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    6a48:	defffa04 	addi	sp,sp,-24
    6a4c:	df000515 	stw	fp,20(sp)
    6a50:	df000504 	addi	fp,sp,20
    6a54:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6a58:	0005303a 	rdctl	r2,status
    6a5c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6a60:	e0fffd17 	ldw	r3,-12(fp)
    6a64:	00bfff84 	movi	r2,-2
    6a68:	1884703a 	and	r2,r3,r2
    6a6c:	1001703a 	wrctl	status,r2
  
  return context;
    6a70:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    6a74:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    6a78:	e0bfff17 	ldw	r2,-4(fp)
    6a7c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    6a80:	e0bffc17 	ldw	r2,-16(fp)
    6a84:	10c00017 	ldw	r3,0(r2)
    6a88:	e0bffc17 	ldw	r2,-16(fp)
    6a8c:	10800117 	ldw	r2,4(r2)
    6a90:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    6a94:	e0bffc17 	ldw	r2,-16(fp)
    6a98:	10c00117 	ldw	r3,4(r2)
    6a9c:	e0bffc17 	ldw	r2,-16(fp)
    6aa0:	10800017 	ldw	r2,0(r2)
    6aa4:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    6aa8:	e0fffc17 	ldw	r3,-16(fp)
    6aac:	e0bffc17 	ldw	r2,-16(fp)
    6ab0:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    6ab4:	e0fffc17 	ldw	r3,-16(fp)
    6ab8:	e0bffc17 	ldw	r2,-16(fp)
    6abc:	18800015 	stw	r2,0(r3)
    6ac0:	e0bffe17 	ldw	r2,-8(fp)
    6ac4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6ac8:	e0bffb17 	ldw	r2,-20(fp)
    6acc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    6ad0:	e037883a 	mov	sp,fp
    6ad4:	df000017 	ldw	fp,0(sp)
    6ad8:	dec00104 	addi	sp,sp,4
    6adc:	f800283a 	ret

00006ae0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    6ae0:	defffb04 	addi	sp,sp,-20
    6ae4:	dfc00415 	stw	ra,16(sp)
    6ae8:	df000315 	stw	fp,12(sp)
    6aec:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    6af0:	d0a00c17 	ldw	r2,-32720(gp)
    6af4:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    6af8:	d0a79617 	ldw	r2,-25000(gp)
    6afc:	10800044 	addi	r2,r2,1
    6b00:	d0a79615 	stw	r2,-25000(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    6b04:	00003106 	br	6bcc <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    6b08:	e0bffe17 	ldw	r2,-8(fp)
    6b0c:	10800017 	ldw	r2,0(r2)
    6b10:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    6b14:	e0bffe17 	ldw	r2,-8(fp)
    6b18:	10800403 	ldbu	r2,16(r2)
    6b1c:	10803fcc 	andi	r2,r2,255
    6b20:	1005003a 	cmpeq	r2,r2,zero
    6b24:	1000051e 	bne	r2,zero,6b3c <alt_tick+0x5c>
    6b28:	d0a79617 	ldw	r2,-25000(gp)
    6b2c:	1004c03a 	cmpne	r2,r2,zero
    6b30:	1000021e 	bne	r2,zero,6b3c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    6b34:	e0bffe17 	ldw	r2,-8(fp)
    6b38:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    6b3c:	e0bffe17 	ldw	r2,-8(fp)
    6b40:	10c00217 	ldw	r3,8(r2)
    6b44:	d0a79617 	ldw	r2,-25000(gp)
    6b48:	10c01e36 	bltu	r2,r3,6bc4 <alt_tick+0xe4>
    6b4c:	e0bffe17 	ldw	r2,-8(fp)
    6b50:	10800403 	ldbu	r2,16(r2)
    6b54:	10803fcc 	andi	r2,r2,255
    6b58:	1004c03a 	cmpne	r2,r2,zero
    6b5c:	1000191e 	bne	r2,zero,6bc4 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    6b60:	e0bffe17 	ldw	r2,-8(fp)
    6b64:	10c00317 	ldw	r3,12(r2)
    6b68:	e0bffe17 	ldw	r2,-8(fp)
    6b6c:	11000517 	ldw	r4,20(r2)
    6b70:	183ee83a 	callr	r3
    6b74:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    6b78:	e0bffd17 	ldw	r2,-12(fp)
    6b7c:	1004c03a 	cmpne	r2,r2,zero
    6b80:	1000031e 	bne	r2,zero,6b90 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    6b84:	e13ffe17 	ldw	r4,-8(fp)
    6b88:	0006a480 	call	6a48 <alt_alarm_stop>
    6b8c:	00000d06 	br	6bc4 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    6b90:	e0bffe17 	ldw	r2,-8(fp)
    6b94:	10c00217 	ldw	r3,8(r2)
    6b98:	e0bffd17 	ldw	r2,-12(fp)
    6b9c:	1887883a 	add	r3,r3,r2
    6ba0:	e0bffe17 	ldw	r2,-8(fp)
    6ba4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    6ba8:	e0bffe17 	ldw	r2,-8(fp)
    6bac:	10c00217 	ldw	r3,8(r2)
    6bb0:	d0a79617 	ldw	r2,-25000(gp)
    6bb4:	1880032e 	bgeu	r3,r2,6bc4 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    6bb8:	e0fffe17 	ldw	r3,-8(fp)
    6bbc:	00800044 	movi	r2,1
    6bc0:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    6bc4:	e0bfff17 	ldw	r2,-4(fp)
    6bc8:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    6bcc:	d0e00c04 	addi	r3,gp,-32720
    6bd0:	e0bffe17 	ldw	r2,-8(fp)
    6bd4:	10ffcc1e 	bne	r2,r3,6b08 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    6bd8:	e037883a 	mov	sp,fp
    6bdc:	dfc00117 	ldw	ra,4(sp)
    6be0:	df000017 	ldw	fp,0(sp)
    6be4:	dec00204 	addi	sp,sp,8
    6be8:	f800283a 	ret

00006bec <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    6bec:	defffd04 	addi	sp,sp,-12
    6bf0:	dfc00215 	stw	ra,8(sp)
    6bf4:	df000115 	stw	fp,4(sp)
    6bf8:	df000104 	addi	fp,sp,4
    6bfc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    6c00:	e13fff17 	ldw	r4,-4(fp)
    6c04:	0006c3c0 	call	6c3c <alt_busy_sleep>
}
    6c08:	e037883a 	mov	sp,fp
    6c0c:	dfc00117 	ldw	ra,4(sp)
    6c10:	df000017 	ldw	fp,0(sp)
    6c14:	dec00204 	addi	sp,sp,8
    6c18:	f800283a 	ret

00006c1c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    6c1c:	deffff04 	addi	sp,sp,-4
    6c20:	df000015 	stw	fp,0(sp)
    6c24:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    6c28:	000170fa 	wrctl	ienable,zero
}
    6c2c:	e037883a 	mov	sp,fp
    6c30:	df000017 	ldw	fp,0(sp)
    6c34:	dec00104 	addi	sp,sp,4
    6c38:	f800283a 	ret

00006c3c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    6c3c:	defffb04 	addi	sp,sp,-20
    6c40:	df000415 	stw	fp,16(sp)
    6c44:	df000404 	addi	fp,sp,16
    6c48:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    6c4c:	008000c4 	movi	r2,3
    6c50:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
    6c54:	e0fffc17 	ldw	r3,-16(fp)
    6c58:	008003f4 	movhi	r2,15
    6c5c:	10909004 	addi	r2,r2,16960
    6c60:	1887383a 	mul	r3,r3,r2
    6c64:	0080bef4 	movhi	r2,763
    6c68:	10bc2004 	addi	r2,r2,-3968
    6c6c:	10c7203a 	divu	r3,r2,r3
    6c70:	00a00034 	movhi	r2,32768
    6c74:	10bfffc4 	addi	r2,r2,-1
    6c78:	10c7203a 	divu	r3,r2,r3
    6c7c:	e0bfff17 	ldw	r2,-4(fp)
    6c80:	10c5203a 	divu	r2,r2,r3
    6c84:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    6c88:	e0bffd17 	ldw	r2,-12(fp)
    6c8c:	1005003a 	cmpeq	r2,r2,zero
    6c90:	1000251e 	bne	r2,zero,6d28 <alt_busy_sleep+0xec>
  {
    for(i=0;i<big_loops;i++)
    6c94:	e03ffe15 	stw	zero,-8(fp)
    6c98:	00001406 	br	6cec <alt_busy_sleep+0xb0>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    6c9c:	00a00034 	movhi	r2,32768
    6ca0:	10bfffc4 	addi	r2,r2,-1
    6ca4:	10bfffc4 	addi	r2,r2,-1
    6ca8:	103ffe1e 	bne	r2,zero,6ca4 <alt_busy_sleep+0x68>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    6cac:	e0fffc17 	ldw	r3,-16(fp)
    6cb0:	008003f4 	movhi	r2,15
    6cb4:	10909004 	addi	r2,r2,16960
    6cb8:	1887383a 	mul	r3,r3,r2
    6cbc:	0080bef4 	movhi	r2,763
    6cc0:	10bc2004 	addi	r2,r2,-3968
    6cc4:	10c7203a 	divu	r3,r2,r3
    6cc8:	00a00034 	movhi	r2,32768
    6ccc:	10bfffc4 	addi	r2,r2,-1
    6cd0:	10c7203a 	divu	r3,r2,r3
    6cd4:	e0bfff17 	ldw	r2,-4(fp)
    6cd8:	10c5c83a 	sub	r2,r2,r3
    6cdc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    6ce0:	e0bffe17 	ldw	r2,-8(fp)
    6ce4:	10800044 	addi	r2,r2,1
    6ce8:	e0bffe15 	stw	r2,-8(fp)
    6cec:	e0fffe17 	ldw	r3,-8(fp)
    6cf0:	e0bffd17 	ldw	r2,-12(fp)
    6cf4:	18bfe916 	blt	r3,r2,6c9c <alt_busy_sleep+0x60>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    6cf8:	e0fffc17 	ldw	r3,-16(fp)
    6cfc:	008003f4 	movhi	r2,15
    6d00:	10909004 	addi	r2,r2,16960
    6d04:	1887383a 	mul	r3,r3,r2
    6d08:	0080bef4 	movhi	r2,763
    6d0c:	10bc2004 	addi	r2,r2,-3968
    6d10:	10c7203a 	divu	r3,r2,r3
    6d14:	e0bfff17 	ldw	r2,-4(fp)
    6d18:	1885383a 	mul	r2,r3,r2
    6d1c:	10bfffc4 	addi	r2,r2,-1
    6d20:	103ffe1e 	bne	r2,zero,6d1c <alt_busy_sleep+0xe0>
    6d24:	00000b06 	br	6d54 <alt_busy_sleep+0x118>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    6d28:	e0fffc17 	ldw	r3,-16(fp)
    6d2c:	008003f4 	movhi	r2,15
    6d30:	10909004 	addi	r2,r2,16960
    6d34:	1887383a 	mul	r3,r3,r2
    6d38:	0080bef4 	movhi	r2,763
    6d3c:	10bc2004 	addi	r2,r2,-3968
    6d40:	10c7203a 	divu	r3,r2,r3
    6d44:	e0bfff17 	ldw	r2,-4(fp)
    6d48:	1885383a 	mul	r2,r3,r2
    6d4c:	10bfffc4 	addi	r2,r2,-1
    6d50:	00bffe16 	blt	zero,r2,6d4c <alt_busy_sleep+0x110>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    6d54:	0005883a 	mov	r2,zero
}
    6d58:	e037883a 	mov	sp,fp
    6d5c:	df000017 	ldw	fp,0(sp)
    6d60:	dec00104 	addi	sp,sp,4
    6d64:	f800283a 	ret

00006d68 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    6d68:	defffa04 	addi	sp,sp,-24
    6d6c:	dfc00515 	stw	ra,20(sp)
    6d70:	df000415 	stw	fp,16(sp)
    6d74:	df000404 	addi	fp,sp,16
    6d78:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    6d7c:	00800074 	movhi	r2,1
    6d80:	10a50b04 	addi	r2,r2,-27604
    6d84:	10800017 	ldw	r2,0(r2)
    6d88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    6d8c:	00003306 	br	6e5c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    6d90:	e0bffd17 	ldw	r2,-12(fp)
    6d94:	11000217 	ldw	r4,8(r2)
    6d98:	00003440 	call	344 <strlen>
    6d9c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    6da0:	e0bffd17 	ldw	r2,-12(fp)
    6da4:	10c00217 	ldw	r3,8(r2)
    6da8:	e0bffc17 	ldw	r2,-16(fp)
    6dac:	1885883a 	add	r2,r3,r2
    6db0:	10bfffc4 	addi	r2,r2,-1
    6db4:	10800003 	ldbu	r2,0(r2)
    6db8:	10803fcc 	andi	r2,r2,255
    6dbc:	1080201c 	xori	r2,r2,128
    6dc0:	10bfe004 	addi	r2,r2,-128
    6dc4:	10800bd8 	cmpnei	r2,r2,47
    6dc8:	1000031e 	bne	r2,zero,6dd8 <alt_find_file+0x70>
    {
      len -= 1;
    6dcc:	e0bffc17 	ldw	r2,-16(fp)
    6dd0:	10bfffc4 	addi	r2,r2,-1
    6dd4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    6dd8:	e0bffc17 	ldw	r2,-16(fp)
    6ddc:	1007883a 	mov	r3,r2
    6de0:	e0bffe17 	ldw	r2,-8(fp)
    6de4:	1885883a 	add	r2,r3,r2
    6de8:	10800003 	ldbu	r2,0(r2)
    6dec:	10803fcc 	andi	r2,r2,255
    6df0:	1080201c 	xori	r2,r2,128
    6df4:	10bfe004 	addi	r2,r2,-128
    6df8:	10800be0 	cmpeqi	r2,r2,47
    6dfc:	10000a1e 	bne	r2,zero,6e28 <alt_find_file+0xc0>
    6e00:	e0bffc17 	ldw	r2,-16(fp)
    6e04:	1007883a 	mov	r3,r2
    6e08:	e0bffe17 	ldw	r2,-8(fp)
    6e0c:	1885883a 	add	r2,r3,r2
    6e10:	10800003 	ldbu	r2,0(r2)
    6e14:	10803fcc 	andi	r2,r2,255
    6e18:	1080201c 	xori	r2,r2,128
    6e1c:	10bfe004 	addi	r2,r2,-128
    6e20:	1004c03a 	cmpne	r2,r2,zero
    6e24:	10000a1e 	bne	r2,zero,6e50 <alt_find_file+0xe8>
    6e28:	e0bffd17 	ldw	r2,-12(fp)
    6e2c:	11000217 	ldw	r4,8(r2)
    6e30:	e1bffc17 	ldw	r6,-16(fp)
    6e34:	e17ffe17 	ldw	r5,-8(fp)
    6e38:	000701c0 	call	701c <memcmp>
    6e3c:	1004c03a 	cmpne	r2,r2,zero
    6e40:	1000031e 	bne	r2,zero,6e50 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    6e44:	e0bffd17 	ldw	r2,-12(fp)
    6e48:	e0bfff15 	stw	r2,-4(fp)
    6e4c:	00000806 	br	6e70 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    6e50:	e0bffd17 	ldw	r2,-12(fp)
    6e54:	10800017 	ldw	r2,0(r2)
    6e58:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    6e5c:	00c00074 	movhi	r3,1
    6e60:	18e50b04 	addi	r3,r3,-27604
    6e64:	e0bffd17 	ldw	r2,-12(fp)
    6e68:	10ffc91e 	bne	r2,r3,6d90 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    6e6c:	e03fff15 	stw	zero,-4(fp)
    6e70:	e0bfff17 	ldw	r2,-4(fp)
}
    6e74:	e037883a 	mov	sp,fp
    6e78:	dfc00117 	ldw	ra,4(sp)
    6e7c:	df000017 	ldw	fp,0(sp)
    6e80:	dec00204 	addi	sp,sp,8
    6e84:	f800283a 	ret

00006e88 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    6e88:	defffc04 	addi	sp,sp,-16
    6e8c:	df000315 	stw	fp,12(sp)
    6e90:	df000304 	addi	fp,sp,12
    6e94:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    6e98:	00bffa04 	movi	r2,-24
    6e9c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    6ea0:	e03ffe15 	stw	zero,-8(fp)
    6ea4:	00001e06 	br	6f20 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    6ea8:	e0bffe17 	ldw	r2,-8(fp)
    6eac:	00c00034 	movhi	r3,0
    6eb0:	18dfa204 	addi	r3,r3,32392
    6eb4:	10800324 	muli	r2,r2,12
    6eb8:	10c5883a 	add	r2,r2,r3
    6ebc:	10800017 	ldw	r2,0(r2)
    6ec0:	1004c03a 	cmpne	r2,r2,zero
    6ec4:	1000131e 	bne	r2,zero,6f14 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    6ec8:	e0bffe17 	ldw	r2,-8(fp)
    6ecc:	00c00034 	movhi	r3,0
    6ed0:	18dfa204 	addi	r3,r3,32392
    6ed4:	10800324 	muli	r2,r2,12
    6ed8:	10c7883a 	add	r3,r2,r3
    6edc:	e0bfff17 	ldw	r2,-4(fp)
    6ee0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    6ee4:	00800074 	movhi	r2,1
    6ee8:	10a50f04 	addi	r2,r2,-27588
    6eec:	10c00017 	ldw	r3,0(r2)
    6ef0:	e0bffe17 	ldw	r2,-8(fp)
    6ef4:	1880040e 	bge	r3,r2,6f08 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    6ef8:	00c00074 	movhi	r3,1
    6efc:	18e50f04 	addi	r3,r3,-27588
    6f00:	e0bffe17 	ldw	r2,-8(fp)
    6f04:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    6f08:	e0bffe17 	ldw	r2,-8(fp)
    6f0c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    6f10:	00000606 	br	6f2c <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    6f14:	e0bffe17 	ldw	r2,-8(fp)
    6f18:	10800044 	addi	r2,r2,1
    6f1c:	e0bffe15 	stw	r2,-8(fp)
    6f20:	e0bffe17 	ldw	r2,-8(fp)
    6f24:	10800810 	cmplti	r2,r2,32
    6f28:	103fdf1e 	bne	r2,zero,6ea8 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    6f2c:	e0bffd17 	ldw	r2,-12(fp)
}
    6f30:	e037883a 	mov	sp,fp
    6f34:	df000017 	ldw	fp,0(sp)
    6f38:	dec00104 	addi	sp,sp,4
    6f3c:	f800283a 	ret

00006f40 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    6f40:	defffb04 	addi	sp,sp,-20
    6f44:	df000415 	stw	fp,16(sp)
    6f48:	df000404 	addi	fp,sp,16
    6f4c:	e13ffe15 	stw	r4,-8(fp)
    6f50:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    6f54:	e0bfff17 	ldw	r2,-4(fp)
    6f58:	10840070 	cmpltui	r2,r2,4097
    6f5c:	1000021e 	bne	r2,zero,6f68 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    6f60:	00840004 	movi	r2,4096
    6f64:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    6f68:	e0fffe17 	ldw	r3,-8(fp)
    6f6c:	e0bfff17 	ldw	r2,-4(fp)
    6f70:	1885883a 	add	r2,r3,r2
    6f74:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    6f78:	e0bffe17 	ldw	r2,-8(fp)
    6f7c:	e0bffd15 	stw	r2,-12(fp)
    6f80:	00000506 	br	6f98 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    6f84:	e0bffd17 	ldw	r2,-12(fp)
    6f88:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    6f8c:	e0bffd17 	ldw	r2,-12(fp)
    6f90:	10800804 	addi	r2,r2,32
    6f94:	e0bffd15 	stw	r2,-12(fp)
    6f98:	e0fffd17 	ldw	r3,-12(fp)
    6f9c:	e0bffc17 	ldw	r2,-16(fp)
    6fa0:	18bff836 	bltu	r3,r2,6f84 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    6fa4:	e0bffe17 	ldw	r2,-8(fp)
    6fa8:	108007cc 	andi	r2,r2,31
    6fac:	1005003a 	cmpeq	r2,r2,zero
    6fb0:	1000021e 	bne	r2,zero,6fbc <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    6fb4:	e0bffd17 	ldw	r2,-12(fp)
    6fb8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    6fbc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    6fc0:	e037883a 	mov	sp,fp
    6fc4:	df000017 	ldw	fp,0(sp)
    6fc8:	dec00104 	addi	sp,sp,4
    6fcc:	f800283a 	ret

00006fd0 <atexit>:
    6fd0:	200b883a 	mov	r5,r4
    6fd4:	000d883a 	mov	r6,zero
    6fd8:	0009883a 	mov	r4,zero
    6fdc:	000f883a 	mov	r7,zero
    6fe0:	000714c1 	jmpi	714c <__register_exitproc>

00006fe4 <exit>:
    6fe4:	defffe04 	addi	sp,sp,-8
    6fe8:	000b883a 	mov	r5,zero
    6fec:	dc000015 	stw	r16,0(sp)
    6ff0:	dfc00115 	stw	ra,4(sp)
    6ff4:	2021883a 	mov	r16,r4
    6ff8:	00072840 	call	7284 <__call_exitprocs>
    6ffc:	00800074 	movhi	r2,1
    7000:	10a50804 	addi	r2,r2,-27616
    7004:	11000017 	ldw	r4,0(r2)
    7008:	20800f17 	ldw	r2,60(r4)
    700c:	10000126 	beq	r2,zero,7014 <exit+0x30>
    7010:	103ee83a 	callr	r2
    7014:	8009883a 	mov	r4,r16
    7018:	00074740 	call	7474 <_exit>

0000701c <memcmp>:
    701c:	00c000c4 	movi	r3,3
    7020:	1980032e 	bgeu	r3,r6,7030 <memcmp+0x14>
    7024:	2144b03a 	or	r2,r4,r5
    7028:	10c4703a 	and	r2,r2,r3
    702c:	10000f26 	beq	r2,zero,706c <memcmp+0x50>
    7030:	31ffffc4 	addi	r7,r6,-1
    7034:	3000061e 	bne	r6,zero,7050 <memcmp+0x34>
    7038:	00000a06 	br	7064 <memcmp+0x48>
    703c:	39ffffc4 	addi	r7,r7,-1
    7040:	00bfffc4 	movi	r2,-1
    7044:	21000044 	addi	r4,r4,1
    7048:	29400044 	addi	r5,r5,1
    704c:	38800526 	beq	r7,r2,7064 <memcmp+0x48>
    7050:	20c00003 	ldbu	r3,0(r4)
    7054:	28800003 	ldbu	r2,0(r5)
    7058:	18bff826 	beq	r3,r2,703c <memcmp+0x20>
    705c:	1885c83a 	sub	r2,r3,r2
    7060:	f800283a 	ret
    7064:	0005883a 	mov	r2,zero
    7068:	f800283a 	ret
    706c:	180f883a 	mov	r7,r3
    7070:	20c00017 	ldw	r3,0(r4)
    7074:	28800017 	ldw	r2,0(r5)
    7078:	18bfed1e 	bne	r3,r2,7030 <memcmp+0x14>
    707c:	31bfff04 	addi	r6,r6,-4
    7080:	21000104 	addi	r4,r4,4
    7084:	29400104 	addi	r5,r5,4
    7088:	39bff936 	bltu	r7,r6,7070 <memcmp+0x54>
    708c:	003fe806 	br	7030 <memcmp+0x14>

00007090 <strcmp>:
    7090:	2144b03a 	or	r2,r4,r5
    7094:	108000cc 	andi	r2,r2,3
    7098:	10001d1e 	bne	r2,zero,7110 <strcmp+0x80>
    709c:	200f883a 	mov	r7,r4
    70a0:	28800017 	ldw	r2,0(r5)
    70a4:	21000017 	ldw	r4,0(r4)
    70a8:	280d883a 	mov	r6,r5
    70ac:	2080161e 	bne	r4,r2,7108 <strcmp+0x78>
    70b0:	023fbff4 	movhi	r8,65279
    70b4:	423fbfc4 	addi	r8,r8,-257
    70b8:	2207883a 	add	r3,r4,r8
    70bc:	01602074 	movhi	r5,32897
    70c0:	29602004 	addi	r5,r5,-32640
    70c4:	1946703a 	and	r3,r3,r5
    70c8:	0104303a 	nor	r2,zero,r4
    70cc:	10c4703a 	and	r2,r2,r3
    70d0:	10001c1e 	bne	r2,zero,7144 <strcmp+0xb4>
    70d4:	4013883a 	mov	r9,r8
    70d8:	2811883a 	mov	r8,r5
    70dc:	00000106 	br	70e4 <strcmp+0x54>
    70e0:	1800181e 	bne	r3,zero,7144 <strcmp+0xb4>
    70e4:	39c00104 	addi	r7,r7,4
    70e8:	39000017 	ldw	r4,0(r7)
    70ec:	31800104 	addi	r6,r6,4
    70f0:	31400017 	ldw	r5,0(r6)
    70f4:	2245883a 	add	r2,r4,r9
    70f8:	1204703a 	and	r2,r2,r8
    70fc:	0106303a 	nor	r3,zero,r4
    7100:	1886703a 	and	r3,r3,r2
    7104:	217ff626 	beq	r4,r5,70e0 <strcmp+0x50>
    7108:	3809883a 	mov	r4,r7
    710c:	300b883a 	mov	r5,r6
    7110:	20c00007 	ldb	r3,0(r4)
    7114:	1800051e 	bne	r3,zero,712c <strcmp+0x9c>
    7118:	00000606 	br	7134 <strcmp+0xa4>
    711c:	21000044 	addi	r4,r4,1
    7120:	20c00007 	ldb	r3,0(r4)
    7124:	29400044 	addi	r5,r5,1
    7128:	18000226 	beq	r3,zero,7134 <strcmp+0xa4>
    712c:	28800007 	ldb	r2,0(r5)
    7130:	18bffa26 	beq	r3,r2,711c <strcmp+0x8c>
    7134:	20c00003 	ldbu	r3,0(r4)
    7138:	28800003 	ldbu	r2,0(r5)
    713c:	1885c83a 	sub	r2,r3,r2
    7140:	f800283a 	ret
    7144:	0005883a 	mov	r2,zero
    7148:	f800283a 	ret

0000714c <__register_exitproc>:
    714c:	defffa04 	addi	sp,sp,-24
    7150:	00800074 	movhi	r2,1
    7154:	10a50804 	addi	r2,r2,-27616
    7158:	dc000015 	stw	r16,0(sp)
    715c:	14000017 	ldw	r16,0(r2)
    7160:	dd000415 	stw	r20,16(sp)
    7164:	2829883a 	mov	r20,r5
    7168:	81405217 	ldw	r5,328(r16)
    716c:	dcc00315 	stw	r19,12(sp)
    7170:	dc800215 	stw	r18,8(sp)
    7174:	dc400115 	stw	r17,4(sp)
    7178:	dfc00515 	stw	ra,20(sp)
    717c:	2023883a 	mov	r17,r4
    7180:	3027883a 	mov	r19,r6
    7184:	3825883a 	mov	r18,r7
    7188:	28002526 	beq	r5,zero,7220 <__register_exitproc+0xd4>
    718c:	29000117 	ldw	r4,4(r5)
    7190:	008007c4 	movi	r2,31
    7194:	11002716 	blt	r2,r4,7234 <__register_exitproc+0xe8>
    7198:	8800101e 	bne	r17,zero,71dc <__register_exitproc+0x90>
    719c:	2105883a 	add	r2,r4,r4
    71a0:	1085883a 	add	r2,r2,r2
    71a4:	20c00044 	addi	r3,r4,1
    71a8:	1145883a 	add	r2,r2,r5
    71ac:	0009883a 	mov	r4,zero
    71b0:	15000215 	stw	r20,8(r2)
    71b4:	28c00115 	stw	r3,4(r5)
    71b8:	2005883a 	mov	r2,r4
    71bc:	dfc00517 	ldw	ra,20(sp)
    71c0:	dd000417 	ldw	r20,16(sp)
    71c4:	dcc00317 	ldw	r19,12(sp)
    71c8:	dc800217 	ldw	r18,8(sp)
    71cc:	dc400117 	ldw	r17,4(sp)
    71d0:	dc000017 	ldw	r16,0(sp)
    71d4:	dec00604 	addi	sp,sp,24
    71d8:	f800283a 	ret
    71dc:	29802204 	addi	r6,r5,136
    71e0:	00800044 	movi	r2,1
    71e4:	110e983a 	sll	r7,r2,r4
    71e8:	30c04017 	ldw	r3,256(r6)
    71ec:	2105883a 	add	r2,r4,r4
    71f0:	1085883a 	add	r2,r2,r2
    71f4:	1185883a 	add	r2,r2,r6
    71f8:	19c6b03a 	or	r3,r3,r7
    71fc:	14802015 	stw	r18,128(r2)
    7200:	14c00015 	stw	r19,0(r2)
    7204:	00800084 	movi	r2,2
    7208:	30c04015 	stw	r3,256(r6)
    720c:	88bfe31e 	bne	r17,r2,719c <__register_exitproc+0x50>
    7210:	30804117 	ldw	r2,260(r6)
    7214:	11c4b03a 	or	r2,r2,r7
    7218:	30804115 	stw	r2,260(r6)
    721c:	003fdf06 	br	719c <__register_exitproc+0x50>
    7220:	00800074 	movhi	r2,1
    7224:	10ace804 	addi	r2,r2,-19552
    7228:	100b883a 	mov	r5,r2
    722c:	80805215 	stw	r2,328(r16)
    7230:	003fd606 	br	718c <__register_exitproc+0x40>
    7234:	00800034 	movhi	r2,0
    7238:	10800004 	addi	r2,r2,0
    723c:	1000021e 	bne	r2,zero,7248 <__register_exitproc+0xfc>
    7240:	013fffc4 	movi	r4,-1
    7244:	003fdc06 	br	71b8 <__register_exitproc+0x6c>
    7248:	01006404 	movi	r4,400
    724c:	103ee83a 	callr	r2
    7250:	1007883a 	mov	r3,r2
    7254:	103ffa26 	beq	r2,zero,7240 <__register_exitproc+0xf4>
    7258:	80805217 	ldw	r2,328(r16)
    725c:	180b883a 	mov	r5,r3
    7260:	18000115 	stw	zero,4(r3)
    7264:	18800015 	stw	r2,0(r3)
    7268:	80c05215 	stw	r3,328(r16)
    726c:	18006215 	stw	zero,392(r3)
    7270:	18006315 	stw	zero,396(r3)
    7274:	0009883a 	mov	r4,zero
    7278:	883fc826 	beq	r17,zero,719c <__register_exitproc+0x50>
    727c:	003fd706 	br	71dc <__register_exitproc+0x90>

00007280 <register_fini>:
    7280:	f800283a 	ret

00007284 <__call_exitprocs>:
    7284:	00800074 	movhi	r2,1
    7288:	10a50804 	addi	r2,r2,-27616
    728c:	10800017 	ldw	r2,0(r2)
    7290:	defff304 	addi	sp,sp,-52
    7294:	df000b15 	stw	fp,44(sp)
    7298:	d8800115 	stw	r2,4(sp)
    729c:	00800034 	movhi	r2,0
    72a0:	10800004 	addi	r2,r2,0
    72a4:	1005003a 	cmpeq	r2,r2,zero
    72a8:	d8800215 	stw	r2,8(sp)
    72ac:	d8800117 	ldw	r2,4(sp)
    72b0:	dd400815 	stw	r21,32(sp)
    72b4:	dd000715 	stw	r20,28(sp)
    72b8:	10805204 	addi	r2,r2,328
    72bc:	dfc00c15 	stw	ra,48(sp)
    72c0:	ddc00a15 	stw	r23,40(sp)
    72c4:	dd800915 	stw	r22,36(sp)
    72c8:	dcc00615 	stw	r19,24(sp)
    72cc:	dc800515 	stw	r18,20(sp)
    72d0:	dc400415 	stw	r17,16(sp)
    72d4:	dc000315 	stw	r16,12(sp)
    72d8:	282b883a 	mov	r21,r5
    72dc:	2039883a 	mov	fp,r4
    72e0:	d8800015 	stw	r2,0(sp)
    72e4:	2829003a 	cmpeq	r20,r5,zero
    72e8:	d8800117 	ldw	r2,4(sp)
    72ec:	14405217 	ldw	r17,328(r2)
    72f0:	88001026 	beq	r17,zero,7334 <__call_exitprocs+0xb0>
    72f4:	ddc00017 	ldw	r23,0(sp)
    72f8:	88800117 	ldw	r2,4(r17)
    72fc:	8c802204 	addi	r18,r17,136
    7300:	143fffc4 	addi	r16,r2,-1
    7304:	80000916 	blt	r16,zero,732c <__call_exitprocs+0xa8>
    7308:	05bfffc4 	movi	r22,-1
    730c:	a000151e 	bne	r20,zero,7364 <__call_exitprocs+0xe0>
    7310:	8409883a 	add	r4,r16,r16
    7314:	2105883a 	add	r2,r4,r4
    7318:	1485883a 	add	r2,r2,r18
    731c:	10c02017 	ldw	r3,128(r2)
    7320:	a8c01126 	beq	r21,r3,7368 <__call_exitprocs+0xe4>
    7324:	843fffc4 	addi	r16,r16,-1
    7328:	85bff81e 	bne	r16,r22,730c <__call_exitprocs+0x88>
    732c:	d8800217 	ldw	r2,8(sp)
    7330:	10003126 	beq	r2,zero,73f8 <__call_exitprocs+0x174>
    7334:	dfc00c17 	ldw	ra,48(sp)
    7338:	df000b17 	ldw	fp,44(sp)
    733c:	ddc00a17 	ldw	r23,40(sp)
    7340:	dd800917 	ldw	r22,36(sp)
    7344:	dd400817 	ldw	r21,32(sp)
    7348:	dd000717 	ldw	r20,28(sp)
    734c:	dcc00617 	ldw	r19,24(sp)
    7350:	dc800517 	ldw	r18,20(sp)
    7354:	dc400417 	ldw	r17,16(sp)
    7358:	dc000317 	ldw	r16,12(sp)
    735c:	dec00d04 	addi	sp,sp,52
    7360:	f800283a 	ret
    7364:	8409883a 	add	r4,r16,r16
    7368:	88c00117 	ldw	r3,4(r17)
    736c:	2105883a 	add	r2,r4,r4
    7370:	1445883a 	add	r2,r2,r17
    7374:	18ffffc4 	addi	r3,r3,-1
    7378:	11800217 	ldw	r6,8(r2)
    737c:	1c001526 	beq	r3,r16,73d4 <__call_exitprocs+0x150>
    7380:	10000215 	stw	zero,8(r2)
    7384:	303fe726 	beq	r6,zero,7324 <__call_exitprocs+0xa0>
    7388:	00c00044 	movi	r3,1
    738c:	1c06983a 	sll	r3,r3,r16
    7390:	90804017 	ldw	r2,256(r18)
    7394:	8cc00117 	ldw	r19,4(r17)
    7398:	1884703a 	and	r2,r3,r2
    739c:	10001426 	beq	r2,zero,73f0 <__call_exitprocs+0x16c>
    73a0:	90804117 	ldw	r2,260(r18)
    73a4:	1884703a 	and	r2,r3,r2
    73a8:	10000c1e 	bne	r2,zero,73dc <__call_exitprocs+0x158>
    73ac:	2105883a 	add	r2,r4,r4
    73b0:	1485883a 	add	r2,r2,r18
    73b4:	11400017 	ldw	r5,0(r2)
    73b8:	e009883a 	mov	r4,fp
    73bc:	303ee83a 	callr	r6
    73c0:	88800117 	ldw	r2,4(r17)
    73c4:	98bfc81e 	bne	r19,r2,72e8 <__call_exitprocs+0x64>
    73c8:	b8800017 	ldw	r2,0(r23)
    73cc:	147fd526 	beq	r2,r17,7324 <__call_exitprocs+0xa0>
    73d0:	003fc506 	br	72e8 <__call_exitprocs+0x64>
    73d4:	8c000115 	stw	r16,4(r17)
    73d8:	003fea06 	br	7384 <__call_exitprocs+0x100>
    73dc:	2105883a 	add	r2,r4,r4
    73e0:	1485883a 	add	r2,r2,r18
    73e4:	11000017 	ldw	r4,0(r2)
    73e8:	303ee83a 	callr	r6
    73ec:	003ff406 	br	73c0 <__call_exitprocs+0x13c>
    73f0:	303ee83a 	callr	r6
    73f4:	003ff206 	br	73c0 <__call_exitprocs+0x13c>
    73f8:	88800117 	ldw	r2,4(r17)
    73fc:	1000081e 	bne	r2,zero,7420 <__call_exitprocs+0x19c>
    7400:	89000017 	ldw	r4,0(r17)
    7404:	20000726 	beq	r4,zero,7424 <__call_exitprocs+0x1a0>
    7408:	b9000015 	stw	r4,0(r23)
    740c:	8809883a 	mov	r4,r17
    7410:	00000000 	call	0 <__reset>
    7414:	bc400017 	ldw	r17,0(r23)
    7418:	883fb71e 	bne	r17,zero,72f8 <__call_exitprocs+0x74>
    741c:	003fc506 	br	7334 <__call_exitprocs+0xb0>
    7420:	89000017 	ldw	r4,0(r17)
    7424:	882f883a 	mov	r23,r17
    7428:	2023883a 	mov	r17,r4
    742c:	883fb21e 	bne	r17,zero,72f8 <__call_exitprocs+0x74>
    7430:	003fc006 	br	7334 <__call_exitprocs+0xb0>

00007434 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    7434:	defffd04 	addi	sp,sp,-12
    7438:	df000215 	stw	fp,8(sp)
    743c:	df000204 	addi	fp,sp,8
    7440:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    7444:	e0bfff17 	ldw	r2,-4(fp)
    7448:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    744c:	e0bffe17 	ldw	r2,-8(fp)
    7450:	1005003a 	cmpeq	r2,r2,zero
    7454:	1000021e 	bne	r2,zero,7460 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    7458:	002af070 	cmpltui	zero,zero,43969
    745c:	00000106 	br	7464 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    7460:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    7464:	e037883a 	mov	sp,fp
    7468:	df000017 	ldw	fp,0(sp)
    746c:	dec00104 	addi	sp,sp,4
    7470:	f800283a 	ret

00007474 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    7474:	defffd04 	addi	sp,sp,-12
    7478:	dfc00215 	stw	ra,8(sp)
    747c:	df000115 	stw	fp,4(sp)
    7480:	df000104 	addi	fp,sp,4
    7484:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    7488:	e13fff17 	ldw	r4,-4(fp)
    748c:	00074340 	call	7434 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    7490:	003fff06 	br	7490 <_exit+0x1c>
    7494:	00007280 	call	728 <__sfvwrite_r+0x370>
