
CS4405Project.elf:     file format elf32-littlenios2
CS4405Project.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000048e4 memsz 0x000048e4 flags r-x
    LOAD off    0x00005904 vaddr 0x00004904 paddr 0x000062f0 align 2**12
         filesz 0x000019ec memsz 0x000019ec flags rw-
    LOAD off    0x00007cdc vaddr 0x00007cdc paddr 0x00007cdc align 2**12
         filesz 0x00000000 memsz 0x000002ac flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004594  000001b8  000001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001b8  0000474c  0000474c  0000574c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000019ec  00004904  000062f0  00005904  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ac  00007cdc  00007cdc  00007cdc  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000072f0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000718  00000000  00000000  00007318  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001116  00000000  00000000  00007a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000e2f6  00000000  00000000  00008b46  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003046  00000000  00000000  00016e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000901c  00000000  00000000  00019e82  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000011ec  00000000  00000000  00022ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000de3  00000000  00000000  0002408c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001b1b  00000000  00000000  00024e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0002698c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  000269e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00029570  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00029573  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00029576  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00029577  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00029578  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0002957c  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00029580  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00029584  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0002958d  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00029596  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0002959f  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000069  00000000  00000000  000295aa  2**0
                  CONTENTS, READONLY
 29 .jdi          00004aa3  00000000  00000000  00029613  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00108489  00000000  00000000  0002e0b6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b8 l    d  .text	00000000 .text
0000474c l    d  .rodata	00000000 .rodata
00004904 l    d  .rwdata	00000000 .rwdata
00007cdc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 os.c
00000000 l    df *ABS*	00000000 os_fifo.c
00000000 l    df *ABS*	00000000 os_init.c
00000000 l    df *ABS*	00000000 os_memory.c
00000000 l    df *ABS*	00000000 os_processmanage.c
00000000 l    df *ABS*	00000000 os_semaphore.c
00000000 l    df *ABS*	00000000 alt_load.c
00000560 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00004904 l     O .rwdata	00001060 JTAG_UART
00005964 l     O .rwdata	00000030 AV_Config
00005994 l     O .rwdata	00000030 Audio
000059c4 l     O .rwdata	0000002c Char_LCD_16x2
000059f0 l     O .rwdata	0000003c Ethernet
00005a2c l     O .rwdata	0000002c IrDA_UART
00005a58 l     O .rwdata	0000002c Expansion_JP1
00005a84 l     O .rwdata	0000002c Expansion_JP2
00005ab0 l     O .rwdata	0000002c Green_LEDs
00005adc l     O .rwdata	0000002c HEX3_HEX0
00005b08 l     O .rwdata	0000002c HEX7_HEX4
00005b34 l     O .rwdata	0000002c Pushbuttons
00005b60 l     O .rwdata	0000002c Red_LEDs
00005b8c l     O .rwdata	0000002c Slider_Switches
00005bb8 l     O .rwdata	00000038 PS2_Port
00005bf0 l     O .rwdata	0000002c Serial_Port
00005c1c l     O .rwdata	00000034 USB
00005c50 l     O .rwdata	00000048 VGA_Char_Buffer
00005c98 l     O .rwdata	00000054 VGA_Pixel_Buffer
00005cec l     O .rwdata	0000002c SD_Card
00000a6c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00000ca4 l     F .text	0000022c altera_avalon_jtag_uart_irq
00000ed0 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000154c l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ethernet.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ethernet_low_level_driver.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00003280 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000032fc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000033dc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000035c8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000038c4 l     F .text	000000dc alt_file_locked
00003b28 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00005ec0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00004534 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
000046e8 l     F .text	00000040 alt_sim_halt
000005cc g     F .text	0000006c alt_main
00007cf8 g     O .bss	00000100 alt_irq
000024e0 g     F .text	00000058 alt_up_ps2_disable_read_interrupt
000062f0 g       *ABS*	00000000 __flash_rwdata_start
000016c4 g     F .text	00000034 alt_up_character_lcd_send_cmd
00002ec0 g     F .text	00000114 alt_up_char_buffer_string
000022f8 g     F .text	00000034 read_CE_bit
0000268c g     F .text	000000b0 alt_up_ps2_read_data_byte_timeout
00002bc8 g     F .text	00000090 alt_up_rs232_read_fd
00002df0 g     F .text	000000d0 alt_up_char_buffer_draw
0000047c g     F .text	00000024 OS_InitSem
000003f4 g     F .text	00000030 OS_Create
00000000  w      *UND*	00000000 __errno
00001648 g     F .text	0000007c get_DDRAM_addr
00000000 g     F .entry	0000001c __reset
00000240 g     F .text	00000024 OS_Write
00000020 g       *ABS*	00000000 __flash_exceptions_start
00007cf4 g     O .bss	00000004 errno
00007ce0 g     O .bss	00000004 alt_argv
000062c0 g     O .rwdata	00000004 running
0000e2c0 g       *ABS*	00000000 _gp
00003d8c g     F .text	00000030 usleep
00005d40 g     O .rwdata	00000180 alt_fd_list
00003504 g     F .text	00000094 alt_find_dev
00004230 g     F .text	000000a0 memcpy
0000185c g     F .text	0000004c alt_up_character_lcd_write_fd
00002fd4 g     F .text	0000005c alt_up_char_buffer_clear
0000368c g     F .text	00000078 alt_io_redirect
0000474c g       *ABS*	00000000 __DTOR_END__
000021c4 g     F .text	00000090 alt_up_irda_write_fd
00002b54 g     F .text	00000074 alt_up_rs232_read_data
00001fac g     F .text	0000003c alt_up_irda_get_used_space_in_read_FIFO
000010e8 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00001d04 g     F .text	00000044 alt_up_ethernet_reg_write
00000224 g     F .text	0000001c OS_InitFiFo
00001f54 g     F .text	00000058 alt_up_irda_disable_read_interrupt
000040e0 g     F .text	00000090 alt_icache_flush
000062d4 g     O .rwdata	00000004 alt_max_fd
00002abc g     F .text	00000050 alt_up_rs232_check_parity
00001b78 g     F .text	00000110 alt_up_ethernet_init
0000232c g     F .text	00000034 read_num_bytes_available
00003704 g     F .text	000001c0 alt_irq_register
00002294 g     F .text	00000034 read_RI_bit
000062ec g     O .rwdata	00000004 _global_impure_ptr
00007f88 g       *ABS*	00000000 __bss_end
00003c80 g     F .text	0000010c alt_tick
0000045c g     F .text	00000020 OS_GetParam
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
00002394 g     F .text	0000002c read_data_byte
00003be8 g     F .text	00000098 alt_alarm_stop
00000440 g     F .text	0000001c OS_Yield
00000398 g     F .text	0000001c OS_InitMemory
000022c8 g     F .text	00000030 read_RE_bit
00007ce8 g     O .bss	00000004 alt_irq_active
00001fe8 g     F .text	00000040 alt_up_irda_get_available_space_in_write_FIFO
000000ec g     F .exceptions	000000cc alt_irq_handler
00005d18 g     O .rwdata	00000028 alt_dev_null
00001b44 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00002538 g     F .text	00000078 alt_up_ps2_write_data_byte
000032e0 g     F .text	0000001c alt_dcache_flush_all
000062f0 g       *ABS*	00000000 __ram_rwdata_end
000062cc g     O .rwdata	00000008 alt_dev_list
00004904 g       *ABS*	00000000 __ram_rodata_end
00002c58 g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00007f88 g       *ABS*	00000000 end
000028ac g     F .text	000000a8 alt_up_ps2_write_fd
00002028 g     F .text	00000050 alt_up_irda_check_parity
00002d2c g     F .text	00000084 alt_up_char_buffer_init
00000bec g     F .text	000000b8 altera_avalon_jtag_uart_init
00004748 g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
000015c0 g     F .text	00000088 alt_avalon_timer_sc_init
0000130c g     F .text	00000240 altera_avalon_jtag_uart_write
0000176c g     F .text	00000078 alt_up_character_lcd_write
00004538 g     F .text	000001b0 __call_exitprocs
000001b8 g     F .text	0000003c _start
00007cec g     O .bss	00000004 _alt_tick_rate
00007cf0 g     O .bss	00000004 _alt_nticks
0000066c g     F .text	00000400 alt_sys_init
000019d0 g     F .text	000000b0 alt_up_character_lcd_shift_display
00004400 g     F .text	00000134 __register_exitproc
000027b8 g     F .text	00000058 alt_up_ps2_clear_fifo
00002a7c g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
00001a80 g     F .text	00000090 alt_up_character_lcd_erase_pos
00000f80 g     F .text	00000074 altera_avalon_jtag_uart_close
00004904 g       *ABS*	00000000 __ram_rwdata_start
0000474c g       *ABS*	00000000 __ram_rodata_start
00000aa4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00004028 g     F .text	000000b8 alt_get_fd
00000424 g     F .text	0000001c OS_Terminate
00000288 g     F .text	000000c8 OS_Init
00003ddc g     F .text	0000012c alt_busy_sleep
000041bc g     F .text	00000074 memcmp
00000b54 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00007f88 g       *ABS*	00000000 __alt_stack_base
00000b9c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00001f00 g     F .text	00000054 alt_up_irda_enable_read_interrupt
000029e8 g     F .text	00000058 alt_up_rs232_disable_read_interrupt
00003f08 g     F .text	00000120 alt_find_file
00003328 g     F .text	000000b4 alt_dev_llist_insert
00007cdc g       *ABS*	00000000 __bss_start
000001f4 g     F .text	00000030 main
00007ce4 g     O .bss	00000004 alt_envp
00002db0 g     F .text	00000040 alt_up_char_buffer_open_dev
00000afc g     F .text	00000058 altera_avalon_jtag_uart_write_fd
000004a0 g     F .text	00000020 OS_Wait
00001920 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0000273c g     F .text	0000007c alt_up_ps2_read_data_byte
00007df8 g     O .bss	00000190 _atexit0
000062d8 g     O .rwdata	00000004 alt_errno
00002078 g     F .text	00000048 alt_up_irda_write_data
00002954 g     F .text	00000040 alt_up_ps2_open_dev
0000172c g     F .text	00000040 alt_up_character_lcd_open_dev
0000248c g     F .text	00000054 alt_up_ps2_enable_read_interrupt
0000474c g       *ABS*	00000000 __CTOR_END__
000016f8 g     F .text	00000034 alt_up_character_lcd_init
000042d0 g     F .text	000000bc strcmp
0000474c g       *ABS*	00000000 __flash_rodata_start
0000474c g       *ABS*	00000000 __DTOR_LIST__
00002cec g     F .text	00000040 alt_up_rs232_open_dev
00000638 g     F .text	00000034 alt_irq_init
00003b88 g     F .text	00000060 alt_release_fd
00002360 g     F .text	00000034 read_data_valid
00001b10 g     F .text	00000034 alt_up_character_lcd_cursor_off
00002620 g     F .text	0000006c alt_up_ps2_write_data_byte_with_ack
00004170 g     F .text	00000014 atexit
000062e8 g     O .rwdata	00000004 _impure_ptr
00007cdc g     O .bss	00000004 alt_argc
000034a0 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
000062c4 g     O .rwdata	00000008 alt_fs_list
00002994 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
000003d4 g     F .text	00000020 OS_Free
00002b0c g     F .text	00000048 alt_up_rs232_write_data
00001d48 g     F .text	000000e0 alt_up_ethernet_phy_reg_read
00000020 g       *ABS*	00000000 __ram_exceptions_start
000003b4 g     F .text	00000020 OS_Malloc
00000264 g     F .text	00000024 OS_Read
000062f0 g       *ABS*	00000000 _edata
00007f88 g       *ABS*	00000000 _end
000001b8 g       *ABS*	00000000 __ram_exceptions_end
00000ff4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00000378 g     F .text	00000020 OS_Abort
00003dbc g     F .text	00000020 altera_nios2_qsys_irq_init
00004184 g     F .text	00000038 exit
000020c0 g     F .text	00000074 alt_up_irda_read_data
000023c0 g     F .text	000000cc alt_up_ps2_init
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000017e4 g     F .text	00000078 alt_up_character_lcd_string
00002254 g     F .text	00000040 alt_up_irda_open_dev
00004728 g     F .text	00000020 _exit
00003030 g     F .text	00000154 alt_alarm_start
000025b0 g     F .text	00000070 alt_up_ps2_wait_for_ack
0000438c g     F .text	00000074 strlen
00001c88 g     F .text	00000040 alt_up_ethernet_open_dev
000039a0 g     F .text	00000188 open
000004c0 g     F .text	00000020 OS_Signal
00003598 g     F .text	00000030 alt_icache_flush_all
00001e28 g     F .text	000000d8 alt_up_ethernet_phy_reg_write
000018a8 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
000062dc g     O .rwdata	00000004 alt_priority_mask
00002810 g     F .text	0000009c alt_up_ps2_read_fd
00002134 g     F .text	00000090 alt_up_irda_read_fd
000062e0 g     O .rwdata	00000008 alt_alarm_list
0000343c g     F .text	00000064 _do_ctors
00002a40 g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
00003184 g     F .text	000000fc close
000004e0 g     F .text	00000080 alt_load
00001cc8 g     F .text	0000003c alt_up_ethernet_reg_read
00000350 g     F .text	00000028 OS_Start
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406e14 	ori	at,at,440
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000171e 	bne	r2,zero,188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00034 	movhi	r3,0
 134:	18df3e04 	addi	r3,r3,31992
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11800017 	ldw	r6,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00034 	movhi	r3,0
 14c:	18df3e04 	addi	r3,r3,31992
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	e17ffd17 	ldw	r5,-12(fp)
 164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 168:	0005313a 	rdctl	r2,ipending
 16c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 178:	e0bfff17 	ldw	r2,-4(fp)
 17c:	1004c03a 	cmpne	r2,r2,zero
 180:	103fe21e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 184:	00000706 	br	1a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 188:	e0bffe17 	ldw	r2,-8(fp)
 18c:	1085883a 	add	r2,r2,r2
 190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 194:	e0bffd17 	ldw	r2,-12(fp)
 198:	10800044 	addi	r2,r2,1
 19c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a0:	003fdd06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a4:	e037883a 	mov	sp,fp
 1a8:	dfc00117 	ldw	ra,4(sp)
 1ac:	df000017 	ldw	fp,0(sp)
 1b0:	dec00204 	addi	sp,sp,8
 1b4:	f800283a 	ret

Disassembly of section .text:

000001b8 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b8:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1bc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1c0:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     1c4:	d6b8b014 	ori	gp,gp,58048
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c8:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1cc:	109f3714 	ori	r2,r2,31964

    movhi r3, %hi(__bss_end)
     1d0:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1d4:	18dfe214 	ori	r3,r3,32648

    beq r2, r3, 1f
     1d8:	10c00326 	beq	r2,r3,1e8 <_start+0x30>

0:
    stw zero, (r2)
     1dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e4:	10fffd36 	bltu	r2,r3,1dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e8:	00004e00 	call	4e0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1ec:	00005cc0 	call	5cc <alt_main>

000001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f0:	003fff06 	br	1f0 <alt_after_alt_main>

000001f4 <main>:

#include <stdio.h>
#include "os.h"

int main()
{
     1f4:	defffe04 	addi	sp,sp,-8
     1f8:	dfc00115 	stw	ra,4(sp)
     1fc:	df000015 	stw	fp,0(sp)
     200:	d839883a 	mov	fp,sp
	// called first to init the OS...
	OS_Init();
     204:	00002880 	call	288 <OS_Init>

	// here we can only call OS_Create(), OS_InitSem(), and OS_InitFiFo()
	//TODO

	// Boot the OS
	OS_Start(); 
     208:	00003500 	call	350 <OS_Start>

	return 0;
     20c:	0005883a 	mov	r2,zero
}
     210:	e037883a 	mov	sp,fp
     214:	dfc00117 	ldw	ra,4(sp)
     218:	df000017 	ldw	fp,0(sp)
     21c:	dec00204 	addi	sp,sp,8
     220:	f800283a 	ret

00000224 <OS_InitFiFo>:
 *      Author: m6gpn
 */

#include "os.h"

FIFO  OS_InitFiFo(){}
     224:	deffff04 	addi	sp,sp,-4
     228:	df000015 	stw	fp,0(sp)
     22c:	d839883a 	mov	fp,sp
     230:	e037883a 	mov	sp,fp
     234:	df000017 	ldw	fp,0(sp)
     238:	dec00104 	addi	sp,sp,4
     23c:	f800283a 	ret

00000240 <OS_Write>:
void  OS_Write( FIFO f, int val ){}
     240:	defffd04 	addi	sp,sp,-12
     244:	df000215 	stw	fp,8(sp)
     248:	df000204 	addi	fp,sp,8
     24c:	e13ffe15 	stw	r4,-8(fp)
     250:	e17fff15 	stw	r5,-4(fp)
     254:	e037883a 	mov	sp,fp
     258:	df000017 	ldw	fp,0(sp)
     25c:	dec00104 	addi	sp,sp,4
     260:	f800283a 	ret

00000264 <OS_Read>:
BOOL  OS_Read( FIFO f, int *val ){}
     264:	defffd04 	addi	sp,sp,-12
     268:	df000215 	stw	fp,8(sp)
     26c:	df000204 	addi	fp,sp,8
     270:	e13ffe15 	stw	r4,-8(fp)
     274:	e17fff15 	stw	r5,-4(fp)
     278:	e037883a 	mov	sp,fp
     27c:	df000017 	ldw	fp,0(sp)
     280:	dec00104 	addi	sp,sp,4
     284:	f800283a 	ret

00000288 <OS_Init>:

#include "os.h"

int running = TRUE;

void OS_Init(){
     288:	defffa04 	addi	sp,sp,-24
     28c:	df000515 	stw	fp,20(sp)
     290:	df000504 	addi	fp,sp,20
     294:	d807883a 	mov	r3,sp
     298:	d805883a 	mov	r2,sp
     29c:	1009883a 	mov	r4,r2
	// Initialize PPP and PPPMax[]
	int PPPLen = MAXPROCESS;
     2a0:	00800404 	movi	r2,16
     2a4:	e0bffb15 	stw	r2,-20(fp)
	int PPP[PPPLen];
     2a8:	e0bffb17 	ldw	r2,-20(fp)
     2ac:	1085883a 	add	r2,r2,r2
     2b0:	1085883a 	add	r2,r2,r2
     2b4:	108000c4 	addi	r2,r2,3
     2b8:	108000c4 	addi	r2,r2,3
     2bc:	1004d0ba 	srli	r2,r2,2
     2c0:	1085883a 	add	r2,r2,r2
     2c4:	1085883a 	add	r2,r2,r2
     2c8:	d8b7c83a 	sub	sp,sp,r2
     2cc:	e6ffff15 	stw	sp,-4(fp)
     2d0:	e17fff17 	ldw	r5,-4(fp)
     2d4:	288000c4 	addi	r2,r5,3
     2d8:	1004d0ba 	srli	r2,r2,2
     2dc:	1085883a 	add	r2,r2,r2
     2e0:	1085883a 	add	r2,r2,r2
     2e4:	e0bfff15 	stw	r2,-4(fp)
     2e8:	e0bfff17 	ldw	r2,-4(fp)
     2ec:	e0bffd15 	stw	r2,-12(fp)
	int PPPMax[PPPLen];
     2f0:	e0bffb17 	ldw	r2,-20(fp)
     2f4:	1085883a 	add	r2,r2,r2
     2f8:	1085883a 	add	r2,r2,r2
     2fc:	108000c4 	addi	r2,r2,3
     300:	108000c4 	addi	r2,r2,3
     304:	1004d0ba 	srli	r2,r2,2
     308:	1085883a 	add	r2,r2,r2
     30c:	1085883a 	add	r2,r2,r2
     310:	d8b7c83a 	sub	sp,sp,r2
     314:	e6fffe15 	stw	sp,-8(fp)
     318:	e17ffe17 	ldw	r5,-8(fp)
     31c:	288000c4 	addi	r2,r5,3
     320:	1004d0ba 	srli	r2,r2,2
     324:	1085883a 	add	r2,r2,r2
     328:	1085883a 	add	r2,r2,r2
     32c:	e0bffe15 	stw	r2,-8(fp)
     330:	e0bffe17 	ldw	r2,-8(fp)
     334:	e0bffc15 	stw	r2,-16(fp)
     338:	2037883a 	mov	sp,r4

} // end of init();
     33c:	1837883a 	mov	sp,r3
     340:	e037883a 	mov	sp,fp
     344:	df000017 	ldw	fp,0(sp)
     348:	dec00104 	addi	sp,sp,4
     34c:	f800283a 	ret

00000350 <OS_Start>:

void OS_Start(){
     350:	deffff04 	addi	sp,sp,-4
     354:	df000015 	stw	fp,0(sp)
     358:	d839883a 	mov	fp,sp

	while (running){
     35c:	d0a00017 	ldw	r2,-32768(gp)
     360:	1004c03a 	cmpne	r2,r2,zero
     364:	103ffd1e 	bne	r2,zero,35c <OS_Start+0xc>
		//OS is running do os stuff here.
	}
}
     368:	e037883a 	mov	sp,fp
     36c:	df000017 	ldw	fp,0(sp)
     370:	dec00104 	addi	sp,sp,4
     374:	f800283a 	ret

00000378 <OS_Abort>:

void OS_Abort(){
     378:	deffff04 	addi	sp,sp,-4
     37c:	df000015 	stw	fp,0(sp)
     380:	d839883a 	mov	fp,sp
	//will make the OS exit.
	running = FALSE;
     384:	d0200015 	stw	zero,-32768(gp)
}
     388:	e037883a 	mov	sp,fp
     38c:	df000017 	ldw	fp,0(sp)
     390:	dec00104 	addi	sp,sp,4
     394:	f800283a 	ret

00000398 <OS_InitMemory>:


#include "os.h"


void   OS_InitMemory(){}
     398:	deffff04 	addi	sp,sp,-4
     39c:	df000015 	stw	fp,0(sp)
     3a0:	d839883a 	mov	fp,sp
     3a4:	e037883a 	mov	sp,fp
     3a8:	df000017 	ldw	fp,0(sp)
     3ac:	dec00104 	addi	sp,sp,4
     3b0:	f800283a 	ret

000003b4 <OS_Malloc>:
MEMORY OS_Malloc( int val ){}
     3b4:	defffe04 	addi	sp,sp,-8
     3b8:	df000115 	stw	fp,4(sp)
     3bc:	df000104 	addi	fp,sp,4
     3c0:	e13fff15 	stw	r4,-4(fp)
     3c4:	e037883a 	mov	sp,fp
     3c8:	df000017 	ldw	fp,0(sp)
     3cc:	dec00104 	addi	sp,sp,4
     3d0:	f800283a 	ret

000003d4 <OS_Free>:
BOOL   OS_Free( MEMORY m ){}
     3d4:	defffe04 	addi	sp,sp,-8
     3d8:	df000115 	stw	fp,4(sp)
     3dc:	df000104 	addi	fp,sp,4
     3e0:	e13fff15 	stw	r4,-4(fp)
     3e4:	e037883a 	mov	sp,fp
     3e8:	df000017 	ldw	fp,0(sp)
     3ec:	dec00104 	addi	sp,sp,4
     3f0:	f800283a 	ret

000003f4 <OS_Create>:


#include "os.h"


PID  OS_Create(void (*f)(void), int arg, unsigned int level, unsigned int n){
     3f4:	defffb04 	addi	sp,sp,-20
     3f8:	df000415 	stw	fp,16(sp)
     3fc:	df000404 	addi	fp,sp,16
     400:	e13ffc15 	stw	r4,-16(fp)
     404:	e17ffd15 	stw	r5,-12(fp)
     408:	e1bffe15 	stw	r6,-8(fp)
     40c:	e1ffff15 	stw	r7,-4(fp)
	return 0;
     410:	0005883a 	mov	r2,zero
}
     414:	e037883a 	mov	sp,fp
     418:	df000017 	ldw	fp,0(sp)
     41c:	dec00104 	addi	sp,sp,4
     420:	f800283a 	ret

00000424 <OS_Terminate>:
void OS_Terminate(void){}
     424:	deffff04 	addi	sp,sp,-4
     428:	df000015 	stw	fp,0(sp)
     42c:	d839883a 	mov	fp,sp
     430:	e037883a 	mov	sp,fp
     434:	df000017 	ldw	fp,0(sp)
     438:	dec00104 	addi	sp,sp,4
     43c:	f800283a 	ret

00000440 <OS_Yield>:
void OS_Yield(void){}
     440:	deffff04 	addi	sp,sp,-4
     444:	df000015 	stw	fp,0(sp)
     448:	d839883a 	mov	fp,sp
     44c:	e037883a 	mov	sp,fp
     450:	df000017 	ldw	fp,0(sp)
     454:	dec00104 	addi	sp,sp,4
     458:	f800283a 	ret

0000045c <OS_GetParam>:

int  OS_GetParam(void){
     45c:	deffff04 	addi	sp,sp,-4
     460:	df000015 	stw	fp,0(sp)
     464:	d839883a 	mov	fp,sp
	return 0;
     468:	0005883a 	mov	r2,zero
}
     46c:	e037883a 	mov	sp,fp
     470:	df000017 	ldw	fp,0(sp)
     474:	dec00104 	addi	sp,sp,4
     478:	f800283a 	ret

0000047c <OS_InitSem>:
 */


#include "os.h"

void OS_InitSem(int s, int n){}
     47c:	defffd04 	addi	sp,sp,-12
     480:	df000215 	stw	fp,8(sp)
     484:	df000204 	addi	fp,sp,8
     488:	e13ffe15 	stw	r4,-8(fp)
     48c:	e17fff15 	stw	r5,-4(fp)
     490:	e037883a 	mov	sp,fp
     494:	df000017 	ldw	fp,0(sp)
     498:	dec00104 	addi	sp,sp,4
     49c:	f800283a 	ret

000004a0 <OS_Wait>:
void OS_Wait(int s){}
     4a0:	defffe04 	addi	sp,sp,-8
     4a4:	df000115 	stw	fp,4(sp)
     4a8:	df000104 	addi	fp,sp,4
     4ac:	e13fff15 	stw	r4,-4(fp)
     4b0:	e037883a 	mov	sp,fp
     4b4:	df000017 	ldw	fp,0(sp)
     4b8:	dec00104 	addi	sp,sp,4
     4bc:	f800283a 	ret

000004c0 <OS_Signal>:
void OS_Signal(int s){}
     4c0:	defffe04 	addi	sp,sp,-8
     4c4:	df000115 	stw	fp,4(sp)
     4c8:	df000104 	addi	fp,sp,4
     4cc:	e13fff15 	stw	r4,-4(fp)
     4d0:	e037883a 	mov	sp,fp
     4d4:	df000017 	ldw	fp,0(sp)
     4d8:	dec00104 	addi	sp,sp,4
     4dc:	f800283a 	ret

000004e0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     4e0:	defffe04 	addi	sp,sp,-8
     4e4:	dfc00115 	stw	ra,4(sp)
     4e8:	df000015 	stw	fp,0(sp)
     4ec:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     4f0:	01000034 	movhi	r4,0
     4f4:	2118bc04 	addi	r4,r4,25328
     4f8:	01400034 	movhi	r5,0
     4fc:	29524104 	addi	r5,r5,18692
     500:	01800034 	movhi	r6,0
     504:	3198bc04 	addi	r6,r6,25328
     508:	00005600 	call	560 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     50c:	01000034 	movhi	r4,0
     510:	21000804 	addi	r4,r4,32
     514:	01400034 	movhi	r5,0
     518:	29400804 	addi	r5,r5,32
     51c:	01800034 	movhi	r6,0
     520:	31806e04 	addi	r6,r6,440
     524:	00005600 	call	560 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     528:	01000034 	movhi	r4,0
     52c:	2111d304 	addi	r4,r4,18252
     530:	01400034 	movhi	r5,0
     534:	2951d304 	addi	r5,r5,18252
     538:	01800034 	movhi	r6,0
     53c:	31924104 	addi	r6,r6,18692
     540:	00005600 	call	560 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     544:	00032e00 	call	32e0 <alt_dcache_flush_all>
  alt_icache_flush_all();
     548:	00035980 	call	3598 <alt_icache_flush_all>
}
     54c:	e037883a 	mov	sp,fp
     550:	dfc00117 	ldw	ra,4(sp)
     554:	df000017 	ldw	fp,0(sp)
     558:	dec00204 	addi	sp,sp,8
     55c:	f800283a 	ret

00000560 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     560:	defffc04 	addi	sp,sp,-16
     564:	df000315 	stw	fp,12(sp)
     568:	df000304 	addi	fp,sp,12
     56c:	e13ffd15 	stw	r4,-12(fp)
     570:	e17ffe15 	stw	r5,-8(fp)
     574:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
     578:	e0fffe17 	ldw	r3,-8(fp)
     57c:	e0bffd17 	ldw	r2,-12(fp)
     580:	18800e26 	beq	r3,r2,5bc <alt_load_section+0x5c>
  {
    while( to != end )
     584:	00000a06 	br	5b0 <alt_load_section+0x50>
    {
      *to++ = *from++;
     588:	e0bffd17 	ldw	r2,-12(fp)
     58c:	10c00017 	ldw	r3,0(r2)
     590:	e0bffe17 	ldw	r2,-8(fp)
     594:	10c00015 	stw	r3,0(r2)
     598:	e0bffe17 	ldw	r2,-8(fp)
     59c:	10800104 	addi	r2,r2,4
     5a0:	e0bffe15 	stw	r2,-8(fp)
     5a4:	e0bffd17 	ldw	r2,-12(fp)
     5a8:	10800104 	addi	r2,r2,4
     5ac:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     5b0:	e0fffe17 	ldw	r3,-8(fp)
     5b4:	e0bfff17 	ldw	r2,-4(fp)
     5b8:	18bff31e 	bne	r3,r2,588 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
     5bc:	e037883a 	mov	sp,fp
     5c0:	df000017 	ldw	fp,0(sp)
     5c4:	dec00104 	addi	sp,sp,4
     5c8:	f800283a 	ret

000005cc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     5cc:	defffd04 	addi	sp,sp,-12
     5d0:	dfc00215 	stw	ra,8(sp)
     5d4:	df000115 	stw	fp,4(sp)
     5d8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     5dc:	0009883a 	mov	r4,zero
     5e0:	00006380 	call	638 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     5e4:	000066c0 	call	66c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     5e8:	01000034 	movhi	r4,0
     5ec:	2111d304 	addi	r4,r4,18252
     5f0:	01400034 	movhi	r5,0
     5f4:	2951d304 	addi	r5,r5,18252
     5f8:	01800034 	movhi	r6,0
     5fc:	3191d304 	addi	r6,r6,18252
     600:	000368c0 	call	368c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
     604:	000343c0 	call	343c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
     608:	01000034 	movhi	r4,0
     60c:	210d2804 	addi	r4,r4,13472
     610:	00041700 	call	4170 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     614:	d1268717 	ldw	r4,-26084(gp)
     618:	d1668817 	ldw	r5,-26080(gp)
     61c:	d1a68917 	ldw	r6,-26076(gp)
     620:	00001f40 	call	1f4 <main>
     624:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
     628:	01000044 	movi	r4,1
     62c:	00031840 	call	3184 <close>
  exit (result);
     630:	e13fff17 	ldw	r4,-4(fp)
     634:	00041840 	call	4184 <exit>

00000638 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     638:	defffd04 	addi	sp,sp,-12
     63c:	dfc00215 	stw	ra,8(sp)
     640:	df000115 	stw	fp,4(sp)
     644:	df000104 	addi	fp,sp,4
     648:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
     64c:	0003dbc0 	call	3dbc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     650:	00800044 	movi	r2,1
     654:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     658:	e037883a 	mov	sp,fp
     65c:	dfc00117 	ldw	ra,4(sp)
     660:	df000017 	ldw	fp,0(sp)
     664:	dec00204 	addi	sp,sp,8
     668:	f800283a 	ret

0000066c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     66c:	defffd04 	addi	sp,sp,-12
     670:	dfc00215 	stw	ra,8(sp)
     674:	df000115 	stw	fp,4(sp)
     678:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
     67c:	01040034 	movhi	r4,4096
     680:	21080004 	addi	r4,r4,8192
     684:	000b883a 	mov	r5,zero
     688:	000d883a 	mov	r6,zero
     68c:	01c00204 	movi	r7,8
     690:	00015c00 	call	15c0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
     694:	01000034 	movhi	r4,0
     698:	21124b04 	addi	r4,r4,18732
     69c:	000b883a 	mov	r5,zero
     6a0:	01800204 	movi	r6,8
     6a4:	0000bec0 	call	bec <altera_avalon_jtag_uart_init>
     6a8:	01000034 	movhi	r4,0
     6ac:	21124104 	addi	r4,r4,18692
     6b0:	0000a6c0 	call	a6c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
     6b4:	01000034 	movhi	r4,0
     6b8:	21165904 	addi	r4,r4,22884
     6bc:	0000a6c0 	call	a6c <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
     6c0:	01000034 	movhi	r4,0
     6c4:	21166504 	addi	r4,r4,22932
     6c8:	0000a6c0 	call	a6c <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
     6cc:	01000034 	movhi	r4,0
     6d0:	21167104 	addi	r4,r4,22980
     6d4:	00016f80 	call	16f8 <alt_up_character_lcd_init>
     6d8:	01000034 	movhi	r4,0
     6dc:	21167104 	addi	r4,r4,22980
     6e0:	0000a6c0 	call	a6c <alt_dev_reg>
    ALTERA_UP_AVALON_ETHERNET_INIT ( ETHERNET, Ethernet);
     6e4:	01000034 	movhi	r4,0
     6e8:	21167c04 	addi	r4,r4,23024
     6ec:	0001b780 	call	1b78 <alt_up_ethernet_init>
     6f0:	01000034 	movhi	r4,0
     6f4:	21167c04 	addi	r4,r4,23024
     6f8:	0000a6c0 	call	a6c <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA_UART, IrDA_UART);
     6fc:	01000034 	movhi	r4,0
     700:	21168b04 	addi	r4,r4,23084
     704:	0000a6c0 	call	a6c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP1, Expansion_JP1);
     708:	01000034 	movhi	r4,0
     70c:	21169604 	addi	r4,r4,23128
     710:	0000a6c0 	call	a6c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP2, Expansion_JP2);
     714:	01000034 	movhi	r4,0
     718:	2116a104 	addi	r4,r4,23172
     71c:	0000a6c0 	call	a6c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
     720:	01000034 	movhi	r4,0
     724:	2116ac04 	addi	r4,r4,23216
     728:	0000a6c0 	call	a6c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
     72c:	01000034 	movhi	r4,0
     730:	2116b704 	addi	r4,r4,23260
     734:	0000a6c0 	call	a6c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
     738:	01000034 	movhi	r4,0
     73c:	2116c204 	addi	r4,r4,23304
     740:	0000a6c0 	call	a6c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
     744:	01000034 	movhi	r4,0
     748:	2116cd04 	addi	r4,r4,23348
     74c:	0000a6c0 	call	a6c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
     750:	01000034 	movhi	r4,0
     754:	2116d804 	addi	r4,r4,23392
     758:	0000a6c0 	call	a6c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
     75c:	01000034 	movhi	r4,0
     760:	2116e304 	addi	r4,r4,23436
     764:	0000a6c0 	call	a6c <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
     768:	01000034 	movhi	r4,0
     76c:	2116ee04 	addi	r4,r4,23480
     770:	00023c00 	call	23c0 <alt_up_ps2_init>
     774:	01000034 	movhi	r4,0
     778:	2116ee04 	addi	r4,r4,23480
     77c:	0000a6c0 	call	a6c <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
     780:	01000034 	movhi	r4,0
     784:	2116fc04 	addi	r4,r4,23536
     788:	0000a6c0 	call	a6c <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
     78c:	01000034 	movhi	r4,0
     790:	21170704 	addi	r4,r4,23580
     794:	0000a6c0 	call	a6c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_CHAR_BUFFER, VGA_Char_Buffer);
     798:	00800034 	movhi	r2,0
     79c:	10971404 	addi	r2,r2,23632
     7a0:	10800a17 	ldw	r2,40(r2)
     7a4:	10800104 	addi	r2,r2,4
     7a8:	10800017 	ldw	r2,0(r2)
     7ac:	10ffffcc 	andi	r3,r2,65535
     7b0:	00800034 	movhi	r2,0
     7b4:	10971404 	addi	r2,r2,23632
     7b8:	10c00c15 	stw	r3,48(r2)
     7bc:	00800034 	movhi	r2,0
     7c0:	10971404 	addi	r2,r2,23632
     7c4:	10800a17 	ldw	r2,40(r2)
     7c8:	10800104 	addi	r2,r2,4
     7cc:	10800017 	ldw	r2,0(r2)
     7d0:	1005d43a 	srai	r2,r2,16
     7d4:	10ffffcc 	andi	r3,r2,65535
     7d8:	00800034 	movhi	r2,0
     7dc:	10971404 	addi	r2,r2,23632
     7e0:	10c00d15 	stw	r3,52(r2)
     7e4:	00800034 	movhi	r2,0
     7e8:	10971404 	addi	r2,r2,23632
     7ec:	10800c17 	ldw	r2,48(r2)
     7f0:	10801068 	cmpgeui	r2,r2,65
     7f4:	1000081e 	bne	r2,zero,818 <alt_sys_init+0x1ac>
     7f8:	00c00034 	movhi	r3,0
     7fc:	18d71404 	addi	r3,r3,23632
     800:	00800fc4 	movi	r2,63
     804:	18800f15 	stw	r2,60(r3)
     808:	00c00034 	movhi	r3,0
     80c:	18d71404 	addi	r3,r3,23632
     810:	00800184 	movi	r2,6
     814:	18801015 	stw	r2,64(r3)
     818:	00800034 	movhi	r2,0
     81c:	10971404 	addi	r2,r2,23632
     820:	10800d17 	ldw	r2,52(r2)
     824:	10800868 	cmpgeui	r2,r2,33
     828:	1000041e 	bne	r2,zero,83c <alt_sys_init+0x1d0>
     82c:	00c00034 	movhi	r3,0
     830:	18d71404 	addi	r3,r3,23632
     834:	008007c4 	movi	r2,31
     838:	18801115 	stw	r2,68(r3)
     83c:	01000034 	movhi	r4,0
     840:	21171404 	addi	r4,r4,23632
     844:	0002d2c0 	call	2d2c <alt_up_char_buffer_init>
     848:	01000034 	movhi	r4,0
     84c:	21171404 	addi	r4,r4,23632
     850:	0000a6c0 	call	a6c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_PIXEL_BUFFER, VGA_Pixel_Buffer);
     854:	00800034 	movhi	r2,0
     858:	10972604 	addi	r2,r2,23704
     85c:	10800a17 	ldw	r2,40(r2)
     860:	10800017 	ldw	r2,0(r2)
     864:	1007883a 	mov	r3,r2
     868:	00800034 	movhi	r2,0
     86c:	10972604 	addi	r2,r2,23704
     870:	10c00b15 	stw	r3,44(r2)
     874:	00800034 	movhi	r2,0
     878:	10972604 	addi	r2,r2,23704
     87c:	10800a17 	ldw	r2,40(r2)
     880:	10800104 	addi	r2,r2,4
     884:	10800017 	ldw	r2,0(r2)
     888:	1007883a 	mov	r3,r2
     88c:	00800034 	movhi	r2,0
     890:	10972604 	addi	r2,r2,23704
     894:	10c00c15 	stw	r3,48(r2)
     898:	00800034 	movhi	r2,0
     89c:	10972604 	addi	r2,r2,23704
     8a0:	10800a17 	ldw	r2,40(r2)
     8a4:	10800204 	addi	r2,r2,8
     8a8:	10800017 	ldw	r2,0(r2)
     8ac:	10ffffcc 	andi	r3,r2,65535
     8b0:	00800034 	movhi	r2,0
     8b4:	10972604 	addi	r2,r2,23704
     8b8:	10c00f15 	stw	r3,60(r2)
     8bc:	00800034 	movhi	r2,0
     8c0:	10972604 	addi	r2,r2,23704
     8c4:	10800a17 	ldw	r2,40(r2)
     8c8:	10800204 	addi	r2,r2,8
     8cc:	10800017 	ldw	r2,0(r2)
     8d0:	1005d43a 	srai	r2,r2,16
     8d4:	10ffffcc 	andi	r3,r2,65535
     8d8:	00800034 	movhi	r2,0
     8dc:	10972604 	addi	r2,r2,23704
     8e0:	10c01015 	stw	r3,64(r2)
     8e4:	00800034 	movhi	r2,0
     8e8:	10972604 	addi	r2,r2,23704
     8ec:	10800a17 	ldw	r2,40(r2)
     8f0:	10800304 	addi	r2,r2,12
     8f4:	10800017 	ldw	r2,0(r2)
     8f8:	1005d07a 	srai	r2,r2,1
     8fc:	10c0004c 	andi	r3,r2,1
     900:	00800034 	movhi	r2,0
     904:	10972604 	addi	r2,r2,23704
     908:	10c00d15 	stw	r3,52(r2)
     90c:	00800034 	movhi	r2,0
     910:	10972604 	addi	r2,r2,23704
     914:	10800a17 	ldw	r2,40(r2)
     918:	10800304 	addi	r2,r2,12
     91c:	10800017 	ldw	r2,0(r2)
     920:	1005d13a 	srai	r2,r2,4
     924:	10c003cc 	andi	r3,r2,15
     928:	00800034 	movhi	r2,0
     92c:	10972604 	addi	r2,r2,23704
     930:	10c00e15 	stw	r3,56(r2)
     934:	00800034 	movhi	r2,0
     938:	10972604 	addi	r2,r2,23704
     93c:	10800a17 	ldw	r2,40(r2)
     940:	10800304 	addi	r2,r2,12
     944:	10800017 	ldw	r2,0(r2)
     948:	1005d43a 	srai	r2,r2,16
     94c:	1007883a 	mov	r3,r2
     950:	00bfffc4 	movi	r2,-1
     954:	1884703a 	and	r2,r3,r2
     958:	e0bfff45 	stb	r2,-3(fp)
     95c:	00800034 	movhi	r2,0
     960:	10972604 	addi	r2,r2,23704
     964:	10800a17 	ldw	r2,40(r2)
     968:	10800304 	addi	r2,r2,12
     96c:	10800017 	ldw	r2,0(r2)
     970:	1005d63a 	srai	r2,r2,24
     974:	1007883a 	mov	r3,r2
     978:	00bfffc4 	movi	r2,-1
     97c:	1884703a 	and	r2,r3,r2
     980:	e0bfff05 	stb	r2,-4(fp)
     984:	00800034 	movhi	r2,0
     988:	10972604 	addi	r2,r2,23704
     98c:	10800e17 	ldw	r2,56(r2)
     990:	10800058 	cmpnei	r2,r2,1
     994:	1000041e 	bne	r2,zero,9a8 <alt_sys_init+0x33c>
     998:	00800034 	movhi	r2,0
     99c:	10972604 	addi	r2,r2,23704
     9a0:	10001115 	stw	zero,68(r2)
     9a4:	00000e06 	br	9e0 <alt_sys_init+0x374>
     9a8:	00800034 	movhi	r2,0
     9ac:	10972604 	addi	r2,r2,23704
     9b0:	10800e17 	ldw	r2,56(r2)
     9b4:	10800098 	cmpnei	r2,r2,2
     9b8:	1000051e 	bne	r2,zero,9d0 <alt_sys_init+0x364>
     9bc:	00c00034 	movhi	r3,0
     9c0:	18d72604 	addi	r3,r3,23704
     9c4:	00800044 	movi	r2,1
     9c8:	18801115 	stw	r2,68(r3)
     9cc:	00000406 	br	9e0 <alt_sys_init+0x374>
     9d0:	00c00034 	movhi	r3,0
     9d4:	18d72604 	addi	r3,r3,23704
     9d8:	00800084 	movi	r2,2
     9dc:	18801115 	stw	r2,68(r3)
     9e0:	e0ffff43 	ldbu	r3,-3(fp)
     9e4:	00800804 	movi	r2,32
     9e8:	10c7c83a 	sub	r3,r2,r3
     9ec:	00bfffc4 	movi	r2,-1
     9f0:	10c6d83a 	srl	r3,r2,r3
     9f4:	00800034 	movhi	r2,0
     9f8:	10972604 	addi	r2,r2,23704
     9fc:	10c01215 	stw	r3,72(r2)
     a00:	e0ffff43 	ldbu	r3,-3(fp)
     a04:	00800034 	movhi	r2,0
     a08:	10972604 	addi	r2,r2,23704
     a0c:	10801117 	ldw	r2,68(r2)
     a10:	1887883a 	add	r3,r3,r2
     a14:	00800034 	movhi	r2,0
     a18:	10972604 	addi	r2,r2,23704
     a1c:	10c01315 	stw	r3,76(r2)
     a20:	e0ffff03 	ldbu	r3,-4(fp)
     a24:	00800804 	movi	r2,32
     a28:	10c7c83a 	sub	r3,r2,r3
     a2c:	00bfffc4 	movi	r2,-1
     a30:	10c6d83a 	srl	r3,r2,r3
     a34:	00800034 	movhi	r2,0
     a38:	10972604 	addi	r2,r2,23704
     a3c:	10c01415 	stw	r3,80(r2)
     a40:	01000034 	movhi	r4,0
     a44:	21172604 	addi	r4,r4,23704
     a48:	0000a6c0 	call	a6c <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
     a4c:	01000034 	movhi	r4,0
     a50:	21173b04 	addi	r4,r4,23788
     a54:	0000a6c0 	call	a6c <alt_dev_reg>
}
     a58:	e037883a 	mov	sp,fp
     a5c:	dfc00117 	ldw	ra,4(sp)
     a60:	df000017 	ldw	fp,0(sp)
     a64:	dec00204 	addi	sp,sp,8
     a68:	f800283a 	ret

00000a6c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
     a6c:	defffd04 	addi	sp,sp,-12
     a70:	dfc00215 	stw	ra,8(sp)
     a74:	df000115 	stw	fp,4(sp)
     a78:	df000104 	addi	fp,sp,4
     a7c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     a80:	e13fff17 	ldw	r4,-4(fp)
     a84:	01400034 	movhi	r5,0
     a88:	2958b304 	addi	r5,r5,25292
     a8c:	00033280 	call	3328 <alt_dev_llist_insert>
}
     a90:	e037883a 	mov	sp,fp
     a94:	dfc00117 	ldw	ra,4(sp)
     a98:	df000017 	ldw	fp,0(sp)
     a9c:	dec00204 	addi	sp,sp,8
     aa0:	f800283a 	ret

00000aa4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     aa4:	defffa04 	addi	sp,sp,-24
     aa8:	dfc00515 	stw	ra,20(sp)
     aac:	df000415 	stw	fp,16(sp)
     ab0:	df000404 	addi	fp,sp,16
     ab4:	e13ffd15 	stw	r4,-12(fp)
     ab8:	e17ffe15 	stw	r5,-8(fp)
     abc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     ac0:	e0bffd17 	ldw	r2,-12(fp)
     ac4:	10800017 	ldw	r2,0(r2)
     ac8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     acc:	e0bffc17 	ldw	r2,-16(fp)
     ad0:	11000a04 	addi	r4,r2,40
     ad4:	e0bffd17 	ldw	r2,-12(fp)
     ad8:	11c00217 	ldw	r7,8(r2)
     adc:	e17ffe17 	ldw	r5,-8(fp)
     ae0:	e1bfff17 	ldw	r6,-4(fp)
     ae4:	00010e80 	call	10e8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     ae8:	e037883a 	mov	sp,fp
     aec:	dfc00117 	ldw	ra,4(sp)
     af0:	df000017 	ldw	fp,0(sp)
     af4:	dec00204 	addi	sp,sp,8
     af8:	f800283a 	ret

00000afc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     afc:	defffa04 	addi	sp,sp,-24
     b00:	dfc00515 	stw	ra,20(sp)
     b04:	df000415 	stw	fp,16(sp)
     b08:	df000404 	addi	fp,sp,16
     b0c:	e13ffd15 	stw	r4,-12(fp)
     b10:	e17ffe15 	stw	r5,-8(fp)
     b14:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     b18:	e0bffd17 	ldw	r2,-12(fp)
     b1c:	10800017 	ldw	r2,0(r2)
     b20:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     b24:	e0bffc17 	ldw	r2,-16(fp)
     b28:	11000a04 	addi	r4,r2,40
     b2c:	e0bffd17 	ldw	r2,-12(fp)
     b30:	11c00217 	ldw	r7,8(r2)
     b34:	e17ffe17 	ldw	r5,-8(fp)
     b38:	e1bfff17 	ldw	r6,-4(fp)
     b3c:	000130c0 	call	130c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
     b40:	e037883a 	mov	sp,fp
     b44:	dfc00117 	ldw	ra,4(sp)
     b48:	df000017 	ldw	fp,0(sp)
     b4c:	dec00204 	addi	sp,sp,8
     b50:	f800283a 	ret

00000b54 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     b54:	defffc04 	addi	sp,sp,-16
     b58:	dfc00315 	stw	ra,12(sp)
     b5c:	df000215 	stw	fp,8(sp)
     b60:	df000204 	addi	fp,sp,8
     b64:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     b68:	e0bfff17 	ldw	r2,-4(fp)
     b6c:	10800017 	ldw	r2,0(r2)
     b70:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
     b74:	e0bffe17 	ldw	r2,-8(fp)
     b78:	11000a04 	addi	r4,r2,40
     b7c:	e0bfff17 	ldw	r2,-4(fp)
     b80:	11400217 	ldw	r5,8(r2)
     b84:	0000f800 	call	f80 <altera_avalon_jtag_uart_close>
}
     b88:	e037883a 	mov	sp,fp
     b8c:	dfc00117 	ldw	ra,4(sp)
     b90:	df000017 	ldw	fp,0(sp)
     b94:	dec00204 	addi	sp,sp,8
     b98:	f800283a 	ret

00000b9c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     b9c:	defffa04 	addi	sp,sp,-24
     ba0:	dfc00515 	stw	ra,20(sp)
     ba4:	df000415 	stw	fp,16(sp)
     ba8:	df000404 	addi	fp,sp,16
     bac:	e13ffd15 	stw	r4,-12(fp)
     bb0:	e17ffe15 	stw	r5,-8(fp)
     bb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
     bb8:	e0bffd17 	ldw	r2,-12(fp)
     bbc:	10800017 	ldw	r2,0(r2)
     bc0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     bc4:	e0bffc17 	ldw	r2,-16(fp)
     bc8:	11000a04 	addi	r4,r2,40
     bcc:	e17ffe17 	ldw	r5,-8(fp)
     bd0:	e1bfff17 	ldw	r6,-4(fp)
     bd4:	0000ff40 	call	ff4 <altera_avalon_jtag_uart_ioctl>
}
     bd8:	e037883a 	mov	sp,fp
     bdc:	dfc00117 	ldw	ra,4(sp)
     be0:	df000017 	ldw	fp,0(sp)
     be4:	dec00204 	addi	sp,sp,8
     be8:	f800283a 	ret

00000bec <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
     bec:	defffb04 	addi	sp,sp,-20
     bf0:	dfc00415 	stw	ra,16(sp)
     bf4:	df000315 	stw	fp,12(sp)
     bf8:	df000304 	addi	fp,sp,12
     bfc:	e13ffd15 	stw	r4,-12(fp)
     c00:	e17ffe15 	stw	r5,-8(fp)
     c04:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     c08:	e0fffd17 	ldw	r3,-12(fp)
     c0c:	00800044 	movi	r2,1
     c10:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
     c14:	e0bffd17 	ldw	r2,-12(fp)
     c18:	10800017 	ldw	r2,0(r2)
     c1c:	11000104 	addi	r4,r2,4
     c20:	e0bffd17 	ldw	r2,-12(fp)
     c24:	10800817 	ldw	r2,32(r2)
     c28:	1007883a 	mov	r3,r2
     c2c:	2005883a 	mov	r2,r4
     c30:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
     c34:	e13fff17 	ldw	r4,-4(fp)
     c38:	e17ffd17 	ldw	r5,-12(fp)
     c3c:	01800034 	movhi	r6,0
     c40:	31832904 	addi	r6,r6,3236
     c44:	00037040 	call	3704 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
     c48:	e0bffd17 	ldw	r2,-12(fp)
     c4c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
     c50:	e0bffd17 	ldw	r2,-12(fp)
     c54:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     c58:	00800034 	movhi	r2,0
     c5c:	109f3b04 	addi	r2,r2,31980
     c60:	10800017 	ldw	r2,0(r2)
     c64:	100b883a 	mov	r5,r2
     c68:	01800034 	movhi	r6,0
     c6c:	3183b404 	addi	r6,r6,3792
     c70:	e1fffd17 	ldw	r7,-12(fp)
     c74:	00030300 	call	3030 <alt_alarm_start>
     c78:	1004403a 	cmpge	r2,r2,zero
     c7c:	1000041e 	bne	r2,zero,c90 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
     c80:	e0fffd17 	ldw	r3,-12(fp)
     c84:	00a00034 	movhi	r2,32768
     c88:	10bfffc4 	addi	r2,r2,-1
     c8c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
     c90:	e037883a 	mov	sp,fp
     c94:	dfc00117 	ldw	ra,4(sp)
     c98:	df000017 	ldw	fp,0(sp)
     c9c:	dec00204 	addi	sp,sp,8
     ca0:	f800283a 	ret

00000ca4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
     ca4:	defff704 	addi	sp,sp,-36
     ca8:	df000815 	stw	fp,32(sp)
     cac:	df000804 	addi	fp,sp,32
     cb0:	e13ffe15 	stw	r4,-8(fp)
     cb4:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
     cb8:	e0bffe17 	ldw	r2,-8(fp)
     cbc:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
     cc0:	e0bffd17 	ldw	r2,-12(fp)
     cc4:	10800017 	ldw	r2,0(r2)
     cc8:	e0bffc15 	stw	r2,-16(fp)
     ccc:	00000006 	br	cd0 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     cd0:	e0bffc17 	ldw	r2,-16(fp)
     cd4:	10800104 	addi	r2,r2,4
     cd8:	10800037 	ldwio	r2,0(r2)
     cdc:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
     ce0:	e0bffb17 	ldw	r2,-20(fp)
     ce4:	1080c00c 	andi	r2,r2,768
     ce8:	1005003a 	cmpeq	r2,r2,zero
     cec:	1000741e 	bne	r2,zero,ec0 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
     cf0:	e0bffb17 	ldw	r2,-20(fp)
     cf4:	1080400c 	andi	r2,r2,256
     cf8:	1005003a 	cmpeq	r2,r2,zero
     cfc:	1000351e 	bne	r2,zero,dd4 <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
     d00:	00800074 	movhi	r2,1
     d04:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     d08:	e0bffd17 	ldw	r2,-12(fp)
     d0c:	10800a17 	ldw	r2,40(r2)
     d10:	10800044 	addi	r2,r2,1
     d14:	1081ffcc 	andi	r2,r2,2047
     d18:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
     d1c:	e0bffd17 	ldw	r2,-12(fp)
     d20:	10c00b17 	ldw	r3,44(r2)
     d24:	e0bff917 	ldw	r2,-28(fp)
     d28:	18801626 	beq	r3,r2,d84 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     d2c:	e0bffc17 	ldw	r2,-16(fp)
     d30:	10800037 	ldwio	r2,0(r2)
     d34:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
     d38:	e0bffa17 	ldw	r2,-24(fp)
     d3c:	10a0000c 	andi	r2,r2,32768
     d40:	1005003a 	cmpeq	r2,r2,zero
     d44:	10000f1e 	bne	r2,zero,d84 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     d48:	e0bffd17 	ldw	r2,-12(fp)
     d4c:	10c00a17 	ldw	r3,40(r2)
     d50:	e0bffa17 	ldw	r2,-24(fp)
     d54:	1009883a 	mov	r4,r2
     d58:	e0bffd17 	ldw	r2,-12(fp)
     d5c:	1885883a 	add	r2,r3,r2
     d60:	10800e04 	addi	r2,r2,56
     d64:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     d68:	e0bffd17 	ldw	r2,-12(fp)
     d6c:	10800a17 	ldw	r2,40(r2)
     d70:	10800044 	addi	r2,r2,1
     d74:	10c1ffcc 	andi	r3,r2,2047
     d78:	e0bffd17 	ldw	r2,-12(fp)
     d7c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
     d80:	003fe106 	br	d08 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
     d84:	e0bffa17 	ldw	r2,-24(fp)
     d88:	10bfffec 	andhi	r2,r2,65535
     d8c:	1005003a 	cmpeq	r2,r2,zero
     d90:	1000101e 	bne	r2,zero,dd4 <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     d94:	e0bffd17 	ldw	r2,-12(fp)
     d98:	10c00817 	ldw	r3,32(r2)
     d9c:	00bfff84 	movi	r2,-2
     da0:	1886703a 	and	r3,r3,r2
     da4:	e0bffd17 	ldw	r2,-12(fp)
     da8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
     dac:	e0bffc17 	ldw	r2,-16(fp)
     db0:	11000104 	addi	r4,r2,4
     db4:	e0bffd17 	ldw	r2,-12(fp)
     db8:	10800817 	ldw	r2,32(r2)
     dbc:	1007883a 	mov	r3,r2
     dc0:	2005883a 	mov	r2,r4
     dc4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     dc8:	e0bffc17 	ldw	r2,-16(fp)
     dcc:	10800104 	addi	r2,r2,4
     dd0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
     dd4:	e0bffb17 	ldw	r2,-20(fp)
     dd8:	1080800c 	andi	r2,r2,512
     ddc:	1005003a 	cmpeq	r2,r2,zero
     de0:	103fbb1e 	bne	r2,zero,cd0 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     de4:	e0bffb17 	ldw	r2,-20(fp)
     de8:	10bfffec 	andhi	r2,r2,65535
     dec:	1004d43a 	srli	r2,r2,16
     df0:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
     df4:	00001506 	br	e4c <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
     df8:	e13ffc17 	ldw	r4,-16(fp)
     dfc:	e0bffd17 	ldw	r2,-12(fp)
     e00:	10c00d17 	ldw	r3,52(r2)
     e04:	e0bffd17 	ldw	r2,-12(fp)
     e08:	1885883a 	add	r2,r3,r2
     e0c:	10820e04 	addi	r2,r2,2104
     e10:	10800003 	ldbu	r2,0(r2)
     e14:	10c03fcc 	andi	r3,r2,255
     e18:	18c0201c 	xori	r3,r3,128
     e1c:	18ffe004 	addi	r3,r3,-128
     e20:	2005883a 	mov	r2,r4
     e24:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     e28:	e0bffd17 	ldw	r2,-12(fp)
     e2c:	10800d17 	ldw	r2,52(r2)
     e30:	10800044 	addi	r2,r2,1
     e34:	10c1ffcc 	andi	r3,r2,2047
     e38:	e0bffd17 	ldw	r2,-12(fp)
     e3c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
     e40:	e0bff817 	ldw	r2,-32(fp)
     e44:	10bfffc4 	addi	r2,r2,-1
     e48:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
     e4c:	e0bff817 	ldw	r2,-32(fp)
     e50:	1005003a 	cmpeq	r2,r2,zero
     e54:	1000051e 	bne	r2,zero,e6c <altera_avalon_jtag_uart_irq+0x1c8>
     e58:	e0bffd17 	ldw	r2,-12(fp)
     e5c:	10c00d17 	ldw	r3,52(r2)
     e60:	e0bffd17 	ldw	r2,-12(fp)
     e64:	10800c17 	ldw	r2,48(r2)
     e68:	18bfe31e 	bne	r3,r2,df8 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
     e6c:	e0bff817 	ldw	r2,-32(fp)
     e70:	1005003a 	cmpeq	r2,r2,zero
     e74:	103f961e 	bne	r2,zero,cd0 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     e78:	e0bffd17 	ldw	r2,-12(fp)
     e7c:	10c00817 	ldw	r3,32(r2)
     e80:	00bfff44 	movi	r2,-3
     e84:	1886703a 	and	r3,r3,r2
     e88:	e0bffd17 	ldw	r2,-12(fp)
     e8c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     e90:	e0bffd17 	ldw	r2,-12(fp)
     e94:	10800017 	ldw	r2,0(r2)
     e98:	11000104 	addi	r4,r2,4
     e9c:	e0bffd17 	ldw	r2,-12(fp)
     ea0:	10800817 	ldw	r2,32(r2)
     ea4:	1007883a 	mov	r3,r2
     ea8:	2005883a 	mov	r2,r4
     eac:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     eb0:	e0bffc17 	ldw	r2,-16(fp)
     eb4:	10800104 	addi	r2,r2,4
     eb8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
     ebc:	003f8406 	br	cd0 <altera_avalon_jtag_uart_irq+0x2c>
}
     ec0:	e037883a 	mov	sp,fp
     ec4:	df000017 	ldw	fp,0(sp)
     ec8:	dec00104 	addi	sp,sp,4
     ecc:	f800283a 	ret

00000ed0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
     ed0:	defffc04 	addi	sp,sp,-16
     ed4:	df000315 	stw	fp,12(sp)
     ed8:	df000304 	addi	fp,sp,12
     edc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
     ee0:	e0bfff17 	ldw	r2,-4(fp)
     ee4:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
     ee8:	e0bffe17 	ldw	r2,-8(fp)
     eec:	10800017 	ldw	r2,0(r2)
     ef0:	10800104 	addi	r2,r2,4
     ef4:	10800037 	ldwio	r2,0(r2)
     ef8:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
     efc:	e0bffd17 	ldw	r2,-12(fp)
     f00:	1081000c 	andi	r2,r2,1024
     f04:	1005003a 	cmpeq	r2,r2,zero
     f08:	10000c1e 	bne	r2,zero,f3c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
     f0c:	e0bffe17 	ldw	r2,-8(fp)
     f10:	10800017 	ldw	r2,0(r2)
     f14:	11000104 	addi	r4,r2,4
     f18:	e0bffe17 	ldw	r2,-8(fp)
     f1c:	10800817 	ldw	r2,32(r2)
     f20:	10810014 	ori	r2,r2,1024
     f24:	1007883a 	mov	r3,r2
     f28:	2005883a 	mov	r2,r4
     f2c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
     f30:	e0bffe17 	ldw	r2,-8(fp)
     f34:	10000915 	stw	zero,36(r2)
     f38:	00000a06 	br	f64 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
     f3c:	e0bffe17 	ldw	r2,-8(fp)
     f40:	10c00917 	ldw	r3,36(r2)
     f44:	00a00034 	movhi	r2,32768
     f48:	10bfff04 	addi	r2,r2,-4
     f4c:	10c00536 	bltu	r2,r3,f64 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
     f50:	e0bffe17 	ldw	r2,-8(fp)
     f54:	10800917 	ldw	r2,36(r2)
     f58:	10c00044 	addi	r3,r2,1
     f5c:	e0bffe17 	ldw	r2,-8(fp)
     f60:	10c00915 	stw	r3,36(r2)
     f64:	00800034 	movhi	r2,0
     f68:	109f3b04 	addi	r2,r2,31980
     f6c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
     f70:	e037883a 	mov	sp,fp
     f74:	df000017 	ldw	fp,0(sp)
     f78:	dec00104 	addi	sp,sp,4
     f7c:	f800283a 	ret

00000f80 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
     f80:	defffc04 	addi	sp,sp,-16
     f84:	df000315 	stw	fp,12(sp)
     f88:	df000304 	addi	fp,sp,12
     f8c:	e13ffd15 	stw	r4,-12(fp)
     f90:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     f94:	00000706 	br	fb4 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
     f98:	e0bffe17 	ldw	r2,-8(fp)
     f9c:	1090000c 	andi	r2,r2,16384
     fa0:	1005003a 	cmpeq	r2,r2,zero
     fa4:	1000031e 	bne	r2,zero,fb4 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
     fa8:	00bffd44 	movi	r2,-11
     fac:	e0bfff15 	stw	r2,-4(fp)
     fb0:	00000b06 	br	fe0 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     fb4:	e0bffd17 	ldw	r2,-12(fp)
     fb8:	10c00d17 	ldw	r3,52(r2)
     fbc:	e0bffd17 	ldw	r2,-12(fp)
     fc0:	10800c17 	ldw	r2,48(r2)
     fc4:	18800526 	beq	r3,r2,fdc <altera_avalon_jtag_uart_close+0x5c>
     fc8:	e0bffd17 	ldw	r2,-12(fp)
     fcc:	10c00917 	ldw	r3,36(r2)
     fd0:	e0bffd17 	ldw	r2,-12(fp)
     fd4:	10800117 	ldw	r2,4(r2)
     fd8:	18bfef36 	bltu	r3,r2,f98 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
     fdc:	e03fff15 	stw	zero,-4(fp)
     fe0:	e0bfff17 	ldw	r2,-4(fp)
}
     fe4:	e037883a 	mov	sp,fp
     fe8:	df000017 	ldw	fp,0(sp)
     fec:	dec00104 	addi	sp,sp,4
     ff0:	f800283a 	ret

00000ff4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
     ff4:	defff804 	addi	sp,sp,-32
     ff8:	df000715 	stw	fp,28(sp)
     ffc:	df000704 	addi	fp,sp,28
    1000:	e13ffb15 	stw	r4,-20(fp)
    1004:	e17ffc15 	stw	r5,-16(fp)
    1008:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    100c:	00bff9c4 	movi	r2,-25
    1010:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    1014:	e0bffc17 	ldw	r2,-16(fp)
    1018:	e0bfff15 	stw	r2,-4(fp)
    101c:	e0ffff17 	ldw	r3,-4(fp)
    1020:	189a8060 	cmpeqi	r2,r3,27137
    1024:	1000041e 	bne	r2,zero,1038 <altera_avalon_jtag_uart_ioctl+0x44>
    1028:	e0ffff17 	ldw	r3,-4(fp)
    102c:	189a80a0 	cmpeqi	r2,r3,27138
    1030:	10001b1e 	bne	r2,zero,10a0 <altera_avalon_jtag_uart_ioctl+0xac>
    1034:	00002706 	br	10d4 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    1038:	e0bffb17 	ldw	r2,-20(fp)
    103c:	10c00117 	ldw	r3,4(r2)
    1040:	00a00034 	movhi	r2,32768
    1044:	10bfffc4 	addi	r2,r2,-1
    1048:	18802226 	beq	r3,r2,10d4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    104c:	e0bffd17 	ldw	r2,-12(fp)
    1050:	10800017 	ldw	r2,0(r2)
    1054:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    1058:	e0bff917 	ldw	r2,-28(fp)
    105c:	10800090 	cmplti	r2,r2,2
    1060:	1000071e 	bne	r2,zero,1080 <altera_avalon_jtag_uart_ioctl+0x8c>
    1064:	e0fff917 	ldw	r3,-28(fp)
    1068:	00a00034 	movhi	r2,32768
    106c:	10bfffc4 	addi	r2,r2,-1
    1070:	18800326 	beq	r3,r2,1080 <altera_avalon_jtag_uart_ioctl+0x8c>
    1074:	e0bff917 	ldw	r2,-28(fp)
    1078:	e0bffe15 	stw	r2,-8(fp)
    107c:	00000306 	br	108c <altera_avalon_jtag_uart_ioctl+0x98>
    1080:	00e00034 	movhi	r3,32768
    1084:	18ffff84 	addi	r3,r3,-2
    1088:	e0fffe15 	stw	r3,-8(fp)
    108c:	e0bffb17 	ldw	r2,-20(fp)
    1090:	e0fffe17 	ldw	r3,-8(fp)
    1094:	10c00115 	stw	r3,4(r2)
      rc = 0;
    1098:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    109c:	00000d06 	br	10d4 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    10a0:	e0bffb17 	ldw	r2,-20(fp)
    10a4:	10c00117 	ldw	r3,4(r2)
    10a8:	00a00034 	movhi	r2,32768
    10ac:	10bfffc4 	addi	r2,r2,-1
    10b0:	18800826 	beq	r3,r2,10d4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    10b4:	e13ffd17 	ldw	r4,-12(fp)
    10b8:	e0bffb17 	ldw	r2,-20(fp)
    10bc:	10c00917 	ldw	r3,36(r2)
    10c0:	e0bffb17 	ldw	r2,-20(fp)
    10c4:	10800117 	ldw	r2,4(r2)
    10c8:	1885803a 	cmpltu	r2,r3,r2
    10cc:	20800015 	stw	r2,0(r4)
      rc = 0;
    10d0:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    10d4:	e0bffa17 	ldw	r2,-24(fp)
}
    10d8:	e037883a 	mov	sp,fp
    10dc:	df000017 	ldw	fp,0(sp)
    10e0:	dec00104 	addi	sp,sp,4
    10e4:	f800283a 	ret

000010e8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    10e8:	defff204 	addi	sp,sp,-56
    10ec:	dfc00d15 	stw	ra,52(sp)
    10f0:	df000c15 	stw	fp,48(sp)
    10f4:	df000c04 	addi	fp,sp,48
    10f8:	e13ffb15 	stw	r4,-20(fp)
    10fc:	e17ffc15 	stw	r5,-16(fp)
    1100:	e1bffd15 	stw	r6,-12(fp)
    1104:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    1108:	e0bffc17 	ldw	r2,-16(fp)
    110c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    1110:	00004806 	br	1234 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    1114:	e0bffb17 	ldw	r2,-20(fp)
    1118:	10800a17 	ldw	r2,40(r2)
    111c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    1120:	e0bffb17 	ldw	r2,-20(fp)
    1124:	10800b17 	ldw	r2,44(r2)
    1128:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    112c:	e0fff717 	ldw	r3,-36(fp)
    1130:	e0bff617 	ldw	r2,-40(fp)
    1134:	18800536 	bltu	r3,r2,114c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    1138:	e0bff717 	ldw	r2,-36(fp)
    113c:	e0fff617 	ldw	r3,-40(fp)
    1140:	10c5c83a 	sub	r2,r2,r3
    1144:	e0bff815 	stw	r2,-32(fp)
    1148:	00000406 	br	115c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    114c:	00820004 	movi	r2,2048
    1150:	e0fff617 	ldw	r3,-40(fp)
    1154:	10c5c83a 	sub	r2,r2,r3
    1158:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    115c:	e0bff817 	ldw	r2,-32(fp)
    1160:	1005003a 	cmpeq	r2,r2,zero
    1164:	10001f1e 	bne	r2,zero,11e4 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    1168:	e0fffd17 	ldw	r3,-12(fp)
    116c:	e0bff817 	ldw	r2,-32(fp)
    1170:	1880022e 	bgeu	r3,r2,117c <altera_avalon_jtag_uart_read+0x94>
        n = space;
    1174:	e0bffd17 	ldw	r2,-12(fp)
    1178:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    117c:	e0bffb17 	ldw	r2,-20(fp)
    1180:	10c00e04 	addi	r3,r2,56
    1184:	e0bff617 	ldw	r2,-40(fp)
    1188:	1887883a 	add	r3,r3,r2
    118c:	e0bffa17 	ldw	r2,-24(fp)
    1190:	1009883a 	mov	r4,r2
    1194:	180b883a 	mov	r5,r3
    1198:	e1bff817 	ldw	r6,-32(fp)
    119c:	00042300 	call	4230 <memcpy>
      ptr   += n;
    11a0:	e0fff817 	ldw	r3,-32(fp)
    11a4:	e0bffa17 	ldw	r2,-24(fp)
    11a8:	10c5883a 	add	r2,r2,r3
    11ac:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    11b0:	e0fffd17 	ldw	r3,-12(fp)
    11b4:	e0bff817 	ldw	r2,-32(fp)
    11b8:	1885c83a 	sub	r2,r3,r2
    11bc:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    11c0:	e0fff617 	ldw	r3,-40(fp)
    11c4:	e0bff817 	ldw	r2,-32(fp)
    11c8:	1885883a 	add	r2,r3,r2
    11cc:	10c1ffcc 	andi	r3,r2,2047
    11d0:	e0bffb17 	ldw	r2,-20(fp)
    11d4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    11d8:	e0bffd17 	ldw	r2,-12(fp)
    11dc:	10800048 	cmpgei	r2,r2,1
    11e0:	103fcc1e 	bne	r2,zero,1114 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    11e4:	e0fffa17 	ldw	r3,-24(fp)
    11e8:	e0bffc17 	ldw	r2,-16(fp)
    11ec:	1880141e 	bne	r3,r2,1240 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    11f0:	e0bffe17 	ldw	r2,-8(fp)
    11f4:	1090000c 	andi	r2,r2,16384
    11f8:	1004c03a 	cmpne	r2,r2,zero
    11fc:	1000101e 	bne	r2,zero,1240 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    1200:	e0bffb17 	ldw	r2,-20(fp)
    1204:	10c00a17 	ldw	r3,40(r2)
    1208:	e0bff717 	ldw	r2,-36(fp)
    120c:	1880051e 	bne	r3,r2,1224 <altera_avalon_jtag_uart_read+0x13c>
    1210:	e0bffb17 	ldw	r2,-20(fp)
    1214:	10c00917 	ldw	r3,36(r2)
    1218:	e0bffb17 	ldw	r2,-20(fp)
    121c:	10800117 	ldw	r2,4(r2)
    1220:	18bff736 	bltu	r3,r2,1200 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    1224:	e0bffb17 	ldw	r2,-20(fp)
    1228:	10c00a17 	ldw	r3,40(r2)
    122c:	e0bff717 	ldw	r2,-36(fp)
    1230:	18800326 	beq	r3,r2,1240 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    1234:	e0bffd17 	ldw	r2,-12(fp)
    1238:	10800048 	cmpgei	r2,r2,1
    123c:	103fb51e 	bne	r2,zero,1114 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    1240:	e0fffa17 	ldw	r3,-24(fp)
    1244:	e0bffc17 	ldw	r2,-16(fp)
    1248:	18801926 	beq	r3,r2,12b0 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    124c:	0005303a 	rdctl	r2,status
    1250:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1254:	e0fff517 	ldw	r3,-44(fp)
    1258:	00bfff84 	movi	r2,-2
    125c:	1884703a 	and	r2,r3,r2
    1260:	1001703a 	wrctl	status,r2
  
  return context;
    1264:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    1268:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    126c:	e0bffb17 	ldw	r2,-20(fp)
    1270:	10800817 	ldw	r2,32(r2)
    1274:	10c00054 	ori	r3,r2,1
    1278:	e0bffb17 	ldw	r2,-20(fp)
    127c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1280:	e0bffb17 	ldw	r2,-20(fp)
    1284:	10800017 	ldw	r2,0(r2)
    1288:	11000104 	addi	r4,r2,4
    128c:	e0bffb17 	ldw	r2,-20(fp)
    1290:	10800817 	ldw	r2,32(r2)
    1294:	1007883a 	mov	r3,r2
    1298:	2005883a 	mov	r2,r4
    129c:	10c00035 	stwio	r3,0(r2)
    12a0:	e0bff917 	ldw	r2,-28(fp)
    12a4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    12a8:	e0bff417 	ldw	r2,-48(fp)
    12ac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    12b0:	e0fffa17 	ldw	r3,-24(fp)
    12b4:	e0bffc17 	ldw	r2,-16(fp)
    12b8:	18800526 	beq	r3,r2,12d0 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    12bc:	e0fffa17 	ldw	r3,-24(fp)
    12c0:	e0bffc17 	ldw	r2,-16(fp)
    12c4:	1887c83a 	sub	r3,r3,r2
    12c8:	e0ffff15 	stw	r3,-4(fp)
    12cc:	00000906 	br	12f4 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    12d0:	e0bffe17 	ldw	r2,-8(fp)
    12d4:	1090000c 	andi	r2,r2,16384
    12d8:	1005003a 	cmpeq	r2,r2,zero
    12dc:	1000031e 	bne	r2,zero,12ec <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    12e0:	00bffd44 	movi	r2,-11
    12e4:	e0bfff15 	stw	r2,-4(fp)
    12e8:	00000206 	br	12f4 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    12ec:	00bffec4 	movi	r2,-5
    12f0:	e0bfff15 	stw	r2,-4(fp)
    12f4:	e0bfff17 	ldw	r2,-4(fp)
}
    12f8:	e037883a 	mov	sp,fp
    12fc:	dfc00117 	ldw	ra,4(sp)
    1300:	df000017 	ldw	fp,0(sp)
    1304:	dec00204 	addi	sp,sp,8
    1308:	f800283a 	ret

0000130c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    130c:	defff204 	addi	sp,sp,-56
    1310:	dfc00d15 	stw	ra,52(sp)
    1314:	df000c15 	stw	fp,48(sp)
    1318:	df000c04 	addi	fp,sp,48
    131c:	e13ffb15 	stw	r4,-20(fp)
    1320:	e17ffc15 	stw	r5,-16(fp)
    1324:	e1bffd15 	stw	r6,-12(fp)
    1328:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    132c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    1330:	e0bffc17 	ldw	r2,-16(fp)
    1334:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1338:	00003a06 	br	1424 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    133c:	e0bffb17 	ldw	r2,-20(fp)
    1340:	10800c17 	ldw	r2,48(r2)
    1344:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    1348:	e0bffb17 	ldw	r2,-20(fp)
    134c:	10800d17 	ldw	r2,52(r2)
    1350:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    1354:	e0fffa17 	ldw	r3,-24(fp)
    1358:	e0bff917 	ldw	r2,-28(fp)
    135c:	1880062e 	bgeu	r3,r2,1378 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    1360:	e0fff917 	ldw	r3,-28(fp)
    1364:	e0bffa17 	ldw	r2,-24(fp)
    1368:	1885c83a 	sub	r2,r3,r2
    136c:	10bfffc4 	addi	r2,r2,-1
    1370:	e0bff815 	stw	r2,-32(fp)
    1374:	00000c06 	br	13a8 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    1378:	e0bff917 	ldw	r2,-28(fp)
    137c:	1005003a 	cmpeq	r2,r2,zero
    1380:	1000051e 	bne	r2,zero,1398 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    1384:	00820004 	movi	r2,2048
    1388:	e0fffa17 	ldw	r3,-24(fp)
    138c:	10c5c83a 	sub	r2,r2,r3
    1390:	e0bff815 	stw	r2,-32(fp)
    1394:	00000406 	br	13a8 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    1398:	0081ffc4 	movi	r2,2047
    139c:	e0fffa17 	ldw	r3,-24(fp)
    13a0:	10c5c83a 	sub	r2,r2,r3
    13a4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    13a8:	e0bff817 	ldw	r2,-32(fp)
    13ac:	1005003a 	cmpeq	r2,r2,zero
    13b0:	10001f1e 	bne	r2,zero,1430 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    13b4:	e0fffd17 	ldw	r3,-12(fp)
    13b8:	e0bff817 	ldw	r2,-32(fp)
    13bc:	1880022e 	bgeu	r3,r2,13c8 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    13c0:	e0bffd17 	ldw	r2,-12(fp)
    13c4:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    13c8:	e0bffb17 	ldw	r2,-20(fp)
    13cc:	10c20e04 	addi	r3,r2,2104
    13d0:	e0bffa17 	ldw	r2,-24(fp)
    13d4:	1885883a 	add	r2,r3,r2
    13d8:	e0fffc17 	ldw	r3,-16(fp)
    13dc:	1009883a 	mov	r4,r2
    13e0:	180b883a 	mov	r5,r3
    13e4:	e1bff817 	ldw	r6,-32(fp)
    13e8:	00042300 	call	4230 <memcpy>
      ptr   += n;
    13ec:	e0fff817 	ldw	r3,-32(fp)
    13f0:	e0bffc17 	ldw	r2,-16(fp)
    13f4:	10c5883a 	add	r2,r2,r3
    13f8:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    13fc:	e0fffd17 	ldw	r3,-12(fp)
    1400:	e0bff817 	ldw	r2,-32(fp)
    1404:	1885c83a 	sub	r2,r3,r2
    1408:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    140c:	e0fffa17 	ldw	r3,-24(fp)
    1410:	e0bff817 	ldw	r2,-32(fp)
    1414:	1885883a 	add	r2,r3,r2
    1418:	10c1ffcc 	andi	r3,r2,2047
    141c:	e0bffb17 	ldw	r2,-20(fp)
    1420:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1424:	e0bffd17 	ldw	r2,-12(fp)
    1428:	10800048 	cmpgei	r2,r2,1
    142c:	103fc31e 	bne	r2,zero,133c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1430:	0005303a 	rdctl	r2,status
    1434:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1438:	e0fff517 	ldw	r3,-44(fp)
    143c:	00bfff84 	movi	r2,-2
    1440:	1884703a 	and	r2,r3,r2
    1444:	1001703a 	wrctl	status,r2
  
  return context;
    1448:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    144c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1450:	e0bffb17 	ldw	r2,-20(fp)
    1454:	10800817 	ldw	r2,32(r2)
    1458:	10c00094 	ori	r3,r2,2
    145c:	e0bffb17 	ldw	r2,-20(fp)
    1460:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1464:	e0bffb17 	ldw	r2,-20(fp)
    1468:	10800017 	ldw	r2,0(r2)
    146c:	11000104 	addi	r4,r2,4
    1470:	e0bffb17 	ldw	r2,-20(fp)
    1474:	10800817 	ldw	r2,32(r2)
    1478:	1007883a 	mov	r3,r2
    147c:	2005883a 	mov	r2,r4
    1480:	10c00035 	stwio	r3,0(r2)
    1484:	e0bff717 	ldw	r2,-36(fp)
    1488:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    148c:	e0bff417 	ldw	r2,-48(fp)
    1490:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    1494:	e0bffd17 	ldw	r2,-12(fp)
    1498:	10800050 	cmplti	r2,r2,1
    149c:	1000111e 	bne	r2,zero,14e4 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    14a0:	e0bffe17 	ldw	r2,-8(fp)
    14a4:	1090000c 	andi	r2,r2,16384
    14a8:	1004c03a 	cmpne	r2,r2,zero
    14ac:	1000101e 	bne	r2,zero,14f0 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    14b0:	e0bffb17 	ldw	r2,-20(fp)
    14b4:	10c00d17 	ldw	r3,52(r2)
    14b8:	e0bff917 	ldw	r2,-28(fp)
    14bc:	1880051e 	bne	r3,r2,14d4 <altera_avalon_jtag_uart_write+0x1c8>
    14c0:	e0bffb17 	ldw	r2,-20(fp)
    14c4:	10c00917 	ldw	r3,36(r2)
    14c8:	e0bffb17 	ldw	r2,-20(fp)
    14cc:	10800117 	ldw	r2,4(r2)
    14d0:	18bff736 	bltu	r3,r2,14b0 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    14d4:	e0bffb17 	ldw	r2,-20(fp)
    14d8:	10c00d17 	ldw	r3,52(r2)
    14dc:	e0bff917 	ldw	r2,-28(fp)
    14e0:	18800326 	beq	r3,r2,14f0 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
    14e4:	e0bffd17 	ldw	r2,-12(fp)
    14e8:	10800048 	cmpgei	r2,r2,1
    14ec:	103fcd1e 	bne	r2,zero,1424 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    14f0:	e0fffc17 	ldw	r3,-16(fp)
    14f4:	e0bff617 	ldw	r2,-40(fp)
    14f8:	18800526 	beq	r3,r2,1510 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    14fc:	e0fffc17 	ldw	r3,-16(fp)
    1500:	e0bff617 	ldw	r2,-40(fp)
    1504:	1887c83a 	sub	r3,r3,r2
    1508:	e0ffff15 	stw	r3,-4(fp)
    150c:	00000906 	br	1534 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    1510:	e0bffe17 	ldw	r2,-8(fp)
    1514:	1090000c 	andi	r2,r2,16384
    1518:	1005003a 	cmpeq	r2,r2,zero
    151c:	1000031e 	bne	r2,zero,152c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    1520:	00bffd44 	movi	r2,-11
    1524:	e0bfff15 	stw	r2,-4(fp)
    1528:	00000206 	br	1534 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    152c:	00bffec4 	movi	r2,-5
    1530:	e0bfff15 	stw	r2,-4(fp)
    1534:	e0bfff17 	ldw	r2,-4(fp)
}
    1538:	e037883a 	mov	sp,fp
    153c:	dfc00117 	ldw	ra,4(sp)
    1540:	df000017 	ldw	fp,0(sp)
    1544:	dec00204 	addi	sp,sp,8
    1548:	f800283a 	ret

0000154c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    154c:	defff904 	addi	sp,sp,-28
    1550:	dfc00615 	stw	ra,24(sp)
    1554:	df000515 	stw	fp,20(sp)
    1558:	df000504 	addi	fp,sp,20
    155c:	e13ffe15 	stw	r4,-8(fp)
    1560:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    1564:	e0bffe17 	ldw	r2,-8(fp)
    1568:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    156c:	e0bffe17 	ldw	r2,-8(fp)
    1570:	10800104 	addi	r2,r2,4
    1574:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1578:	0005303a 	rdctl	r2,status
    157c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1580:	e0fffc17 	ldw	r3,-16(fp)
    1584:	00bfff84 	movi	r2,-2
    1588:	1884703a 	and	r2,r3,r2
    158c:	1001703a 	wrctl	status,r2
  
  return context;
    1590:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    1594:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
    1598:	0003c800 	call	3c80 <alt_tick>
    159c:	e0bffd17 	ldw	r2,-12(fp)
    15a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    15a4:	e0bffb17 	ldw	r2,-20(fp)
    15a8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    15ac:	e037883a 	mov	sp,fp
    15b0:	dfc00117 	ldw	ra,4(sp)
    15b4:	df000017 	ldw	fp,0(sp)
    15b8:	dec00204 	addi	sp,sp,8
    15bc:	f800283a 	ret

000015c0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    15c0:	defff904 	addi	sp,sp,-28
    15c4:	dfc00615 	stw	ra,24(sp)
    15c8:	df000515 	stw	fp,20(sp)
    15cc:	df000504 	addi	fp,sp,20
    15d0:	e13ffc15 	stw	r4,-16(fp)
    15d4:	e17ffd15 	stw	r5,-12(fp)
    15d8:	e1bffe15 	stw	r6,-8(fp)
    15dc:	e1ffff15 	stw	r7,-4(fp)
    15e0:	e0bfff17 	ldw	r2,-4(fp)
    15e4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    15e8:	00800034 	movhi	r2,0
    15ec:	109f3b04 	addi	r2,r2,31980
    15f0:	10800017 	ldw	r2,0(r2)
    15f4:	1004c03a 	cmpne	r2,r2,zero
    15f8:	1000041e 	bne	r2,zero,160c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    15fc:	00c00034 	movhi	r3,0
    1600:	18df3b04 	addi	r3,r3,31980
    1604:	e0bffb17 	ldw	r2,-20(fp)
    1608:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    160c:	e0bffc17 	ldw	r2,-16(fp)
    1610:	10800104 	addi	r2,r2,4
    1614:	1007883a 	mov	r3,r2
    1618:	008001c4 	movi	r2,7
    161c:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    1620:	e13ffe17 	ldw	r4,-8(fp)
    1624:	e17ffc17 	ldw	r5,-16(fp)
    1628:	01800034 	movhi	r6,0
    162c:	31855304 	addi	r6,r6,5452
    1630:	00037040 	call	3704 <alt_irq_register>
#endif  
}
    1634:	e037883a 	mov	sp,fp
    1638:	dfc00117 	ldw	ra,4(sp)
    163c:	df000017 	ldw	fp,0(sp)
    1640:	dec00204 	addi	sp,sp,8
    1644:	f800283a 	ret

00001648 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    1648:	defffc04 	addi	sp,sp,-16
    164c:	df000315 	stw	fp,12(sp)
    1650:	df000304 	addi	fp,sp,12
    1654:	e13ffe15 	stw	r4,-8(fp)
    1658:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    165c:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
    1660:	e0bfff17 	ldw	r2,-4(fp)
    1664:	1004c03a 	cmpne	r2,r2,zero
    1668:	1000061e 	bne	r2,zero,1684 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
    166c:	e0bffe17 	ldw	r2,-8(fp)
    1670:	1007883a 	mov	r3,r2
    1674:	e0bffd03 	ldbu	r2,-12(fp)
    1678:	10c4b03a 	or	r2,r2,r3
    167c:	e0bffd05 	stb	r2,-12(fp)
    1680:	00000806 	br	16a4 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
    1684:	e0bffe17 	ldw	r2,-8(fp)
    1688:	1007883a 	mov	r3,r2
    168c:	e0bffd03 	ldbu	r2,-12(fp)
    1690:	10c4b03a 	or	r2,r2,r3
    1694:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
    1698:	e0bffd03 	ldbu	r2,-12(fp)
    169c:	10801014 	ori	r2,r2,64
    16a0:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    16a4:	e0fffd03 	ldbu	r3,-12(fp)
    16a8:	00bfe004 	movi	r2,-128
    16ac:	1884b03a 	or	r2,r3,r2
    16b0:	10803fcc 	andi	r2,r2,255
}
    16b4:	e037883a 	mov	sp,fp
    16b8:	df000017 	ldw	fp,0(sp)
    16bc:	dec00104 	addi	sp,sp,4
    16c0:	f800283a 	ret

000016c4 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    16c4:	defffd04 	addi	sp,sp,-12
    16c8:	df000215 	stw	fp,8(sp)
    16cc:	df000204 	addi	fp,sp,8
    16d0:	e13ffe15 	stw	r4,-8(fp)
    16d4:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    16d8:	e0bffe17 	ldw	r2,-8(fp)
    16dc:	10800a17 	ldw	r2,40(r2)
    16e0:	e0ffff03 	ldbu	r3,-4(fp)
    16e4:	10c00025 	stbio	r3,0(r2)
}
    16e8:	e037883a 	mov	sp,fp
    16ec:	df000017 	ldw	fp,0(sp)
    16f0:	dec00104 	addi	sp,sp,4
    16f4:	f800283a 	ret

000016f8 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    16f8:	defffe04 	addi	sp,sp,-8
    16fc:	df000115 	stw	fp,4(sp)
    1700:	df000104 	addi	fp,sp,4
    1704:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    1708:	e0bfff17 	ldw	r2,-4(fp)
    170c:	10800a17 	ldw	r2,40(r2)
    1710:	1007883a 	mov	r3,r2
    1714:	00800044 	movi	r2,1
    1718:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    171c:	e037883a 	mov	sp,fp
    1720:	df000017 	ldw	fp,0(sp)
    1724:	dec00104 	addi	sp,sp,4
    1728:	f800283a 	ret

0000172c <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    172c:	defffc04 	addi	sp,sp,-16
    1730:	dfc00315 	stw	ra,12(sp)
    1734:	df000215 	stw	fp,8(sp)
    1738:	df000204 	addi	fp,sp,8
    173c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    1740:	e13fff17 	ldw	r4,-4(fp)
    1744:	01400034 	movhi	r5,0
    1748:	2958b304 	addi	r5,r5,25292
    174c:	00035040 	call	3504 <alt_find_dev>
    1750:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    1754:	e0bffe17 	ldw	r2,-8(fp)
}
    1758:	e037883a 	mov	sp,fp
    175c:	dfc00117 	ldw	ra,4(sp)
    1760:	df000017 	ldw	fp,0(sp)
    1764:	dec00204 	addi	sp,sp,8
    1768:	f800283a 	ret

0000176c <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    176c:	defffb04 	addi	sp,sp,-20
    1770:	df000415 	stw	fp,16(sp)
    1774:	df000404 	addi	fp,sp,16
    1778:	e13ffd15 	stw	r4,-12(fp)
    177c:	e17ffe15 	stw	r5,-8(fp)
    1780:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    1784:	e03ffc15 	stw	zero,-16(fp)
    1788:	00000f06 	br	17c8 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    178c:	e0bffd17 	ldw	r2,-12(fp)
    1790:	10800a17 	ldw	r2,40(r2)
    1794:	11000044 	addi	r4,r2,1
    1798:	e0fffc17 	ldw	r3,-16(fp)
    179c:	e0bffe17 	ldw	r2,-8(fp)
    17a0:	1885883a 	add	r2,r3,r2
    17a4:	10800003 	ldbu	r2,0(r2)
    17a8:	10c03fcc 	andi	r3,r2,255
    17ac:	18c0201c 	xori	r3,r3,128
    17b0:	18ffe004 	addi	r3,r3,-128
    17b4:	2005883a 	mov	r2,r4
    17b8:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    17bc:	e0bffc17 	ldw	r2,-16(fp)
    17c0:	10800044 	addi	r2,r2,1
    17c4:	e0bffc15 	stw	r2,-16(fp)
    17c8:	e0fffc17 	ldw	r3,-16(fp)
    17cc:	e0bfff17 	ldw	r2,-4(fp)
    17d0:	18bfee36 	bltu	r3,r2,178c <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    17d4:	e037883a 	mov	sp,fp
    17d8:	df000017 	ldw	fp,0(sp)
    17dc:	dec00104 	addi	sp,sp,4
    17e0:	f800283a 	ret

000017e4 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    17e4:	defffd04 	addi	sp,sp,-12
    17e8:	df000215 	stw	fp,8(sp)
    17ec:	df000204 	addi	fp,sp,8
    17f0:	e13ffe15 	stw	r4,-8(fp)
    17f4:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
    17f8:	00000d06 	br	1830 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    17fc:	e0bffe17 	ldw	r2,-8(fp)
    1800:	10800a17 	ldw	r2,40(r2)
    1804:	11000044 	addi	r4,r2,1
    1808:	e0bfff17 	ldw	r2,-4(fp)
    180c:	10800003 	ldbu	r2,0(r2)
    1810:	10c03fcc 	andi	r3,r2,255
    1814:	18c0201c 	xori	r3,r3,128
    1818:	18ffe004 	addi	r3,r3,-128
    181c:	2005883a 	mov	r2,r4
    1820:	10c00025 	stbio	r3,0(r2)
		++ptr;
    1824:	e0bfff17 	ldw	r2,-4(fp)
    1828:	10800044 	addi	r2,r2,1
    182c:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    1830:	e0bfff17 	ldw	r2,-4(fp)
    1834:	10800003 	ldbu	r2,0(r2)
    1838:	10803fcc 	andi	r2,r2,255
    183c:	1080201c 	xori	r2,r2,128
    1840:	10bfe004 	addi	r2,r2,-128
    1844:	1004c03a 	cmpne	r2,r2,zero
    1848:	103fec1e 	bne	r2,zero,17fc <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    184c:	e037883a 	mov	sp,fp
    1850:	df000017 	ldw	fp,0(sp)
    1854:	dec00104 	addi	sp,sp,4
    1858:	f800283a 	ret

0000185c <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    185c:	defffb04 	addi	sp,sp,-20
    1860:	dfc00415 	stw	ra,16(sp)
    1864:	df000315 	stw	fp,12(sp)
    1868:	df000304 	addi	fp,sp,12
    186c:	e13ffd15 	stw	r4,-12(fp)
    1870:	e17ffe15 	stw	r5,-8(fp)
    1874:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    1878:	e0bffd17 	ldw	r2,-12(fp)
    187c:	10800017 	ldw	r2,0(r2)
    1880:	1009883a 	mov	r4,r2
    1884:	e1bfff17 	ldw	r6,-4(fp)
    1888:	e17ffe17 	ldw	r5,-8(fp)
    188c:	000176c0 	call	176c <alt_up_character_lcd_write>
	return 0;
    1890:	0005883a 	mov	r2,zero
}
    1894:	e037883a 	mov	sp,fp
    1898:	dfc00117 	ldw	ra,4(sp)
    189c:	df000017 	ldw	fp,0(sp)
    18a0:	dec00204 	addi	sp,sp,8
    18a4:	f800283a 	ret

000018a8 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    18a8:	defff904 	addi	sp,sp,-28
    18ac:	dfc00615 	stw	ra,24(sp)
    18b0:	df000515 	stw	fp,20(sp)
    18b4:	df000504 	addi	fp,sp,20
    18b8:	e13ffc15 	stw	r4,-16(fp)
    18bc:	e17ffd15 	stw	r5,-12(fp)
    18c0:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    18c4:	e0bffd17 	ldw	r2,-12(fp)
    18c8:	10800a28 	cmpgeui	r2,r2,40
    18cc:	1000031e 	bne	r2,zero,18dc <alt_up_character_lcd_set_cursor_pos+0x34>
    18d0:	e0bffe17 	ldw	r2,-8(fp)
    18d4:	108000b0 	cmpltui	r2,r2,2
    18d8:	1000031e 	bne	r2,zero,18e8 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
    18dc:	00bfffc4 	movi	r2,-1
    18e0:	e0bfff15 	stw	r2,-4(fp)
    18e4:	00000806 	br	1908 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    18e8:	e13ffd17 	ldw	r4,-12(fp)
    18ec:	e17ffe17 	ldw	r5,-8(fp)
    18f0:	00016480 	call	1648 <get_DDRAM_addr>
    18f4:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    18f8:	e17ffb03 	ldbu	r5,-20(fp)
    18fc:	e13ffc17 	ldw	r4,-16(fp)
    1900:	00016c40 	call	16c4 <alt_up_character_lcd_send_cmd>
	return 0;
    1904:	e03fff15 	stw	zero,-4(fp)
    1908:	e0bfff17 	ldw	r2,-4(fp)
}
    190c:	e037883a 	mov	sp,fp
    1910:	dfc00117 	ldw	ra,4(sp)
    1914:	df000017 	ldw	fp,0(sp)
    1918:	dec00204 	addi	sp,sp,8
    191c:	f800283a 	ret

00001920 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    1920:	defff904 	addi	sp,sp,-28
    1924:	dfc00615 	stw	ra,24(sp)
    1928:	df000515 	stw	fp,20(sp)
    192c:	df000504 	addi	fp,sp,20
    1930:	e13ffc15 	stw	r4,-16(fp)
    1934:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    1938:	e0bffd17 	ldw	r2,-12(fp)
    193c:	1005003a 	cmpeq	r2,r2,zero
    1940:	10001e1e 	bne	r2,zero,19bc <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
    1944:	e0bffd17 	ldw	r2,-12(fp)
    1948:	10800050 	cmplti	r2,r2,1
    194c:	1000031e 	bne	r2,zero,195c <alt_up_character_lcd_shift_cursor+0x3c>
    1950:	00800504 	movi	r2,20
    1954:	e0bfff05 	stb	r2,-4(fp)
    1958:	00000206 	br	1964 <alt_up_character_lcd_shift_cursor+0x44>
    195c:	00c00404 	movi	r3,16
    1960:	e0ffff05 	stb	r3,-4(fp)
    1964:	e0bfff03 	ldbu	r2,-4(fp)
    1968:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    196c:	e0fffd17 	ldw	r3,-12(fp)
    1970:	e0fffe15 	stw	r3,-8(fp)
    1974:	e0fffe17 	ldw	r3,-8(fp)
    1978:	1804403a 	cmpge	r2,r3,zero
    197c:	1000031e 	bne	r2,zero,198c <alt_up_character_lcd_shift_cursor+0x6c>
    1980:	e0bffe17 	ldw	r2,-8(fp)
    1984:	0085c83a 	sub	r2,zero,r2
    1988:	e0bffe15 	stw	r2,-8(fp)
    198c:	e0fffe17 	ldw	r3,-8(fp)
    1990:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    1994:	00000306 	br	19a4 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    1998:	e17ffb43 	ldbu	r5,-19(fp)
    199c:	e13ffc17 	ldw	r4,-16(fp)
    19a0:	00016c40 	call	16c4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    19a4:	e0bffb03 	ldbu	r2,-20(fp)
    19a8:	10bfffc4 	addi	r2,r2,-1
    19ac:	e0bffb05 	stb	r2,-20(fp)
    19b0:	e0bffb03 	ldbu	r2,-20(fp)
    19b4:	10803fd8 	cmpnei	r2,r2,255
    19b8:	103ff71e 	bne	r2,zero,1998 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    19bc:	e037883a 	mov	sp,fp
    19c0:	dfc00117 	ldw	ra,4(sp)
    19c4:	df000017 	ldw	fp,0(sp)
    19c8:	dec00204 	addi	sp,sp,8
    19cc:	f800283a 	ret

000019d0 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    19d0:	defff904 	addi	sp,sp,-28
    19d4:	dfc00615 	stw	ra,24(sp)
    19d8:	df000515 	stw	fp,20(sp)
    19dc:	df000504 	addi	fp,sp,20
    19e0:	e13ffc15 	stw	r4,-16(fp)
    19e4:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    19e8:	e0bffd17 	ldw	r2,-12(fp)
    19ec:	1005003a 	cmpeq	r2,r2,zero
    19f0:	10001e1e 	bne	r2,zero,1a6c <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
    19f4:	e0bffd17 	ldw	r2,-12(fp)
    19f8:	10800050 	cmplti	r2,r2,1
    19fc:	1000031e 	bne	r2,zero,1a0c <alt_up_character_lcd_shift_display+0x3c>
    1a00:	00800704 	movi	r2,28
    1a04:	e0bfff05 	stb	r2,-4(fp)
    1a08:	00000206 	br	1a14 <alt_up_character_lcd_shift_display+0x44>
    1a0c:	00c00604 	movi	r3,24
    1a10:	e0ffff05 	stb	r3,-4(fp)
    1a14:	e0bfff03 	ldbu	r2,-4(fp)
    1a18:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    1a1c:	e0fffd17 	ldw	r3,-12(fp)
    1a20:	e0fffe15 	stw	r3,-8(fp)
    1a24:	e0fffe17 	ldw	r3,-8(fp)
    1a28:	1804403a 	cmpge	r2,r3,zero
    1a2c:	1000031e 	bne	r2,zero,1a3c <alt_up_character_lcd_shift_display+0x6c>
    1a30:	e0bffe17 	ldw	r2,-8(fp)
    1a34:	0085c83a 	sub	r2,zero,r2
    1a38:	e0bffe15 	stw	r2,-8(fp)
    1a3c:	e0fffe17 	ldw	r3,-8(fp)
    1a40:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    1a44:	00000306 	br	1a54 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    1a48:	e17ffb43 	ldbu	r5,-19(fp)
    1a4c:	e13ffc17 	ldw	r4,-16(fp)
    1a50:	00016c40 	call	16c4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    1a54:	e0bffb03 	ldbu	r2,-20(fp)
    1a58:	10bfffc4 	addi	r2,r2,-1
    1a5c:	e0bffb05 	stb	r2,-20(fp)
    1a60:	e0bffb03 	ldbu	r2,-20(fp)
    1a64:	10803fd8 	cmpnei	r2,r2,255
    1a68:	103ff71e 	bne	r2,zero,1a48 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    1a6c:	e037883a 	mov	sp,fp
    1a70:	dfc00117 	ldw	ra,4(sp)
    1a74:	df000017 	ldw	fp,0(sp)
    1a78:	dec00204 	addi	sp,sp,8
    1a7c:	f800283a 	ret

00001a80 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    1a80:	defff904 	addi	sp,sp,-28
    1a84:	dfc00615 	stw	ra,24(sp)
    1a88:	df000515 	stw	fp,20(sp)
    1a8c:	df000504 	addi	fp,sp,20
    1a90:	e13ffc15 	stw	r4,-16(fp)
    1a94:	e17ffd15 	stw	r5,-12(fp)
    1a98:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    1a9c:	e0bffd17 	ldw	r2,-12(fp)
    1aa0:	10800a28 	cmpgeui	r2,r2,40
    1aa4:	1000031e 	bne	r2,zero,1ab4 <alt_up_character_lcd_erase_pos+0x34>
    1aa8:	e0bffe17 	ldw	r2,-8(fp)
    1aac:	108000b0 	cmpltui	r2,r2,2
    1ab0:	1000031e 	bne	r2,zero,1ac0 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
    1ab4:	00bfffc4 	movi	r2,-1
    1ab8:	e0bfff15 	stw	r2,-4(fp)
    1abc:	00000e06 	br	1af8 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    1ac0:	e13ffd17 	ldw	r4,-12(fp)
    1ac4:	e17ffe17 	ldw	r5,-8(fp)
    1ac8:	00016480 	call	1648 <get_DDRAM_addr>
    1acc:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    1ad0:	e17ffb03 	ldbu	r5,-20(fp)
    1ad4:	e13ffc17 	ldw	r4,-16(fp)
    1ad8:	00016c40 	call	16c4 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    1adc:	e0bffc17 	ldw	r2,-16(fp)
    1ae0:	10800a17 	ldw	r2,40(r2)
    1ae4:	10800044 	addi	r2,r2,1
    1ae8:	1007883a 	mov	r3,r2
    1aec:	00800084 	movi	r2,2
    1af0:	18800025 	stbio	r2,0(r3)
	return 0;
    1af4:	e03fff15 	stw	zero,-4(fp)
    1af8:	e0bfff17 	ldw	r2,-4(fp)
}
    1afc:	e037883a 	mov	sp,fp
    1b00:	dfc00117 	ldw	ra,4(sp)
    1b04:	df000017 	ldw	fp,0(sp)
    1b08:	dec00204 	addi	sp,sp,8
    1b0c:	f800283a 	ret

00001b10 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    1b10:	defffd04 	addi	sp,sp,-12
    1b14:	dfc00215 	stw	ra,8(sp)
    1b18:	df000115 	stw	fp,4(sp)
    1b1c:	df000104 	addi	fp,sp,4
    1b20:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    1b24:	e13fff17 	ldw	r4,-4(fp)
    1b28:	01400304 	movi	r5,12
    1b2c:	00016c40 	call	16c4 <alt_up_character_lcd_send_cmd>
}
    1b30:	e037883a 	mov	sp,fp
    1b34:	dfc00117 	ldw	ra,4(sp)
    1b38:	df000017 	ldw	fp,0(sp)
    1b3c:	dec00204 	addi	sp,sp,8
    1b40:	f800283a 	ret

00001b44 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    1b44:	defffd04 	addi	sp,sp,-12
    1b48:	dfc00215 	stw	ra,8(sp)
    1b4c:	df000115 	stw	fp,4(sp)
    1b50:	df000104 	addi	fp,sp,4
    1b54:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    1b58:	e13fff17 	ldw	r4,-4(fp)
    1b5c:	014003c4 	movi	r5,15
    1b60:	00016c40 	call	16c4 <alt_up_character_lcd_send_cmd>
}
    1b64:	e037883a 	mov	sp,fp
    1b68:	dfc00117 	ldw	ra,4(sp)
    1b6c:	df000017 	ldw	fp,0(sp)
    1b70:	dec00204 	addi	sp,sp,8
    1b74:	f800283a 	ret

00001b78 <alt_up_ethernet_init>:
#include "altera_up_avalon_ethernet.h"
#include "altera_up_avalon_ethernet_regs.h"
#include "altera_up_avalon_ethernet_low_level_driver.h"

void alt_up_ethernet_init(alt_up_ethernet_dev *ethernet)
{
    1b78:	defffb04 	addi	sp,sp,-20
    1b7c:	dfc00415 	stw	ra,16(sp)
    1b80:	df000315 	stw	fp,12(sp)
    1b84:	df000304 	addi	fp,sp,12
    1b88:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned int base = ethernet->base;
    1b8c:	e0bfff17 	ldw	r2,-4(fp)
    1b90:	10800a17 	ldw	r2,40(r2)
    1b94:	e0bffe15 	stw	r2,-8(fp)
	int i;

	// Power on the internal PHY
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_GPR, 0x00 );
    1b98:	e13ffe17 	ldw	r4,-8(fp)
    1b9c:	014007c4 	movi	r5,31
    1ba0:	000d883a 	mov	r6,zero
    1ba4:	0001d040 	call	1d04 <alt_up_ethernet_reg_write>

	// Software Reset of the Ethernet chip
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NCR, 0x01 );
    1ba8:	e13ffe17 	ldw	r4,-8(fp)
    1bac:	000b883a 	mov	r5,zero
    1bb0:	01800044 	movi	r6,1
    1bb4:	0001d040 	call	1d04 <alt_up_ethernet_reg_write>
	usleep(10);
    1bb8:	01000284 	movi	r4,10
    1bbc:	0003d8c0 	call	3d8c <usleep>
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NCR, 0x00 );
    1bc0:	e13ffe17 	ldw	r4,-8(fp)
    1bc4:	000b883a 	mov	r5,zero
    1bc8:	000d883a 	mov	r6,zero
    1bcc:	0001d040 	call	1d04 <alt_up_ethernet_reg_write>
	usleep(1);
    1bd0:	01000044 	movi	r4,1
    1bd4:	0003d8c0 	call	3d8c <usleep>

	// Initialize the MAC Address
	for (i = 0; i < 6; i++) 
    1bd8:	e03ffd15 	stw	zero,-12(fp)
    1bdc:	00000e06 	br	1c18 <alt_up_ethernet_init+0xa0>
		alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_PAR + i, ethernet->mac_addr[i] );
    1be0:	e0bffd17 	ldw	r2,-12(fp)
    1be4:	10800404 	addi	r2,r2,16
    1be8:	100b883a 	mov	r5,r2
    1bec:	e0fffd17 	ldw	r3,-12(fp)
    1bf0:	e0bfff17 	ldw	r2,-4(fp)
    1bf4:	1885883a 	add	r2,r3,r2
    1bf8:	10800d04 	addi	r2,r2,52
    1bfc:	10800003 	ldbu	r2,0(r2)
    1c00:	11803fcc 	andi	r6,r2,255
    1c04:	e13ffe17 	ldw	r4,-8(fp)
    1c08:	0001d040 	call	1d04 <alt_up_ethernet_reg_write>
	usleep(10);
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NCR, 0x00 );
	usleep(1);

	// Initialize the MAC Address
	for (i = 0; i < 6; i++) 
    1c0c:	e0bffd17 	ldw	r2,-12(fp)
    1c10:	10800044 	addi	r2,r2,1
    1c14:	e0bffd15 	stw	r2,-12(fp)
    1c18:	e0bffd17 	ldw	r2,-12(fp)
    1c1c:	10800190 	cmplti	r2,r2,6
    1c20:	103fef1e 	bne	r2,zero,1be0 <alt_up_ethernet_init+0x68>
		alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_PAR + i, ethernet->mac_addr[i] );

	/* clear any pending interrupt */
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_ISR,  0x3F );
    1c24:	e13ffe17 	ldw	r4,-8(fp)
    1c28:	01403f84 	movi	r5,254
    1c2c:	01800fc4 	movi	r6,63
    1c30:	0001d040 	call	1d04 <alt_up_ethernet_reg_write>
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NSR,  0x2C );
    1c34:	e13ffe17 	ldw	r4,-8(fp)
    1c38:	01400044 	movi	r5,1
    1c3c:	01800b04 	movi	r6,44
    1c40:	0001d040 	call	1d04 <alt_up_ethernet_reg_write>

	/* set PAR bit, don't enable interrupts (do that with the set_interrupts() function */
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_IMR, 0x80 );
    1c44:	e13ffe17 	ldw	r4,-8(fp)
    1c48:	01403fc4 	movi	r5,255
    1c4c:	01802004 	movi	r6,128
    1c50:	0001d040 	call	1d04 <alt_up_ethernet_reg_write>

	/* enable RX (Broadcast/ ALL_MULTICAST) */
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_RCR, 0x39 );
    1c54:	e13ffe17 	ldw	r4,-8(fp)
    1c58:	01400144 	movi	r5,5
    1c5c:	01800e44 	movi	r6,57
    1c60:	0001d040 	call	1d04 <alt_up_ethernet_reg_write>

	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_ETXCSR, 0x03 );
    1c64:	e13ffe17 	ldw	r4,-8(fp)
    1c68:	01400c04 	movi	r5,48
    1c6c:	018000c4 	movi	r6,3
    1c70:	0001d040 	call	1d04 <alt_up_ethernet_reg_write>

	return;
}
    1c74:	e037883a 	mov	sp,fp
    1c78:	dfc00117 	ldw	ra,4(sp)
    1c7c:	df000017 	ldw	fp,0(sp)
    1c80:	dec00204 	addi	sp,sp,8
    1c84:	f800283a 	ret

00001c88 <alt_up_ethernet_open_dev>:

alt_up_ethernet_dev* alt_up_ethernet_open_dev(const char* name)
{
    1c88:	defffc04 	addi	sp,sp,-16
    1c8c:	dfc00315 	stw	ra,12(sp)
    1c90:	df000215 	stw	fp,8(sp)
    1c94:	df000204 	addi	fp,sp,8
    1c98:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ethernet_dev * dev = (alt_up_ethernet_dev *) alt_find_dev( name, &alt_dev_list );
    1c9c:	e13fff17 	ldw	r4,-4(fp)
    1ca0:	01400034 	movhi	r5,0
    1ca4:	2958b304 	addi	r5,r5,25292
    1ca8:	00035040 	call	3504 <alt_find_dev>
    1cac:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    1cb0:	e0bffe17 	ldw	r2,-8(fp)
}
    1cb4:	e037883a 	mov	sp,fp
    1cb8:	dfc00117 	ldw	ra,4(sp)
    1cbc:	df000017 	ldw	fp,0(sp)
    1cc0:	dec00204 	addi	sp,sp,8
    1cc4:	f800283a 	ret

00001cc8 <alt_up_ethernet_reg_read>:
#include "altera_up_avalon_ethernet_low_level_driver.h"
#include "altera_up_avalon_ethernet_regs.h"
#include <unistd.h>

unsigned int alt_up_ethernet_reg_read(unsigned int base, unsigned int reg)
{
    1cc8:	defffd04 	addi	sp,sp,-12
    1ccc:	df000215 	stw	fp,8(sp)
    1cd0:	df000204 	addi	fp,sp,8
    1cd4:	e13ffe15 	stw	r4,-8(fp)
    1cd8:	e17fff15 	stw	r5,-4(fp)
	IOWR_ALTERA_UP_AVALON_ETHERNET_INDEX(base, reg);
    1cdc:	e0bffe17 	ldw	r2,-8(fp)
    1ce0:	e0ffff17 	ldw	r3,-4(fp)
    1ce4:	10c00035 	stwio	r3,0(r2)
	return IORD_ALTERA_UP_AVALON_ETHERNET_DATA(base);
    1ce8:	e0bffe17 	ldw	r2,-8(fp)
    1cec:	10800104 	addi	r2,r2,4
    1cf0:	10800037 	ldwio	r2,0(r2)
}
    1cf4:	e037883a 	mov	sp,fp
    1cf8:	df000017 	ldw	fp,0(sp)
    1cfc:	dec00104 	addi	sp,sp,4
    1d00:	f800283a 	ret

00001d04 <alt_up_ethernet_reg_write>:

void alt_up_ethernet_reg_write(unsigned int base, unsigned int reg, unsigned int data)
{
    1d04:	defffc04 	addi	sp,sp,-16
    1d08:	df000315 	stw	fp,12(sp)
    1d0c:	df000304 	addi	fp,sp,12
    1d10:	e13ffd15 	stw	r4,-12(fp)
    1d14:	e17ffe15 	stw	r5,-8(fp)
    1d18:	e1bfff15 	stw	r6,-4(fp)
	IOWR_ALTERA_UP_AVALON_ETHERNET_INDEX(base, reg);
    1d1c:	e0bffd17 	ldw	r2,-12(fp)
    1d20:	e0fffe17 	ldw	r3,-8(fp)
    1d24:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_UP_AVALON_ETHERNET_DATA(base, data);
    1d28:	e0bffd17 	ldw	r2,-12(fp)
    1d2c:	10800104 	addi	r2,r2,4
    1d30:	e0ffff17 	ldw	r3,-4(fp)
    1d34:	10c00035 	stwio	r3,0(r2)
}
    1d38:	e037883a 	mov	sp,fp
    1d3c:	df000017 	ldw	fp,0(sp)
    1d40:	dec00104 	addi	sp,sp,4
    1d44:	f800283a 	ret

00001d48 <alt_up_ethernet_phy_reg_read>:

unsigned int alt_up_ethernet_phy_reg_read (unsigned int base, unsigned int reg)
{
    1d48:	defffa04 	addi	sp,sp,-24
    1d4c:	dfc00515 	stw	ra,20(sp)
    1d50:	df000415 	stw	fp,16(sp)
    1d54:	df000404 	addi	fp,sp,16
    1d58:	e13ffe15 	stw	r4,-8(fp)
    1d5c:	e17fff15 	stw	r5,-4(fp)
	unsigned int result = 0;
    1d60:	e03ffd15 	stw	zero,-12(fp)
	unsigned int timeout = 0;
    1d64:	e03ffc15 	stw	zero,-16(fp)

	/* set PHY register address into EPAR REG. 0CH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPAR, reg | 0x40);				/* PHY register address setting, and DM9000_PHY offset = 0x40 */
    1d68:	e0bfff17 	ldw	r2,-4(fp)
    1d6c:	11801014 	ori	r6,r2,64
    1d70:	e13ffe17 	ldw	r4,-8(fp)
    1d74:	01400304 	movi	r5,12
    1d78:	0001d040 	call	1d04 <alt_up_ethernet_reg_write>

	/* issue PHY + READ command = 0xC into EPCR REG. 0BH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x0C);					/* issue PHY + READ command */
    1d7c:	e13ffe17 	ldw	r4,-8(fp)
    1d80:	014002c4 	movi	r5,11
    1d84:	01800304 	movi	r6,12
    1d88:	0001d040 	call	1d04 <alt_up_ethernet_reg_write>
	do {
		usleep(1);
    1d8c:	01000044 	movi	r4,1
    1d90:	0003d8c0 	call	3d8c <usleep>
		timeout++;
    1d94:	e0bffc17 	ldw	r2,-16(fp)
    1d98:	10800044 	addi	r2,r2,1
    1d9c:	e0bffc15 	stw	r2,-16(fp)
	} while ((timeout < 50) && (alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPCR) & 0x01));
    1da0:	e0bffc17 	ldw	r2,-16(fp)
    1da4:	10800ca8 	cmpgeui	r2,r2,50
    1da8:	1000071e 	bne	r2,zero,1dc8 <alt_up_ethernet_phy_reg_read+0x80>
    1dac:	e13ffe17 	ldw	r4,-8(fp)
    1db0:	014002c4 	movi	r5,11
    1db4:	0001cc80 	call	1cc8 <alt_up_ethernet_reg_read>
    1db8:	1080004c 	andi	r2,r2,1
    1dbc:	10803fcc 	andi	r2,r2,255
    1dc0:	1004c03a 	cmpne	r2,r2,zero
    1dc4:	103ff11e 	bne	r2,zero,1d8c <alt_up_ethernet_phy_reg_read+0x44>
	
	usleep(1);
    1dc8:	01000044 	movi	r4,1
    1dcc:	0003d8c0 	call	3d8c <usleep>
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x08);					/* clear PHY command */
    1dd0:	e13ffe17 	ldw	r4,-8(fp)
    1dd4:	014002c4 	movi	r5,11
    1dd8:	01800204 	movi	r6,8
    1ddc:	0001d040 	call	1d04 <alt_up_ethernet_reg_write>

	/* read PHY data from EPDR REG. 0EH & REG. 0DH */
	result = (alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPDRH) << 8);			/* PHY data high_byte */
    1de0:	e13ffe17 	ldw	r4,-8(fp)
    1de4:	01400384 	movi	r5,14
    1de8:	0001cc80 	call	1cc8 <alt_up_ethernet_reg_read>
    1dec:	1004923a 	slli	r2,r2,8
    1df0:	e0bffd15 	stw	r2,-12(fp)
	result |= alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPDRL);				/* PHY data low_byte */
    1df4:	e13ffe17 	ldw	r4,-8(fp)
    1df8:	01400344 	movi	r5,13
    1dfc:	0001cc80 	call	1cc8 <alt_up_ethernet_reg_read>
    1e00:	1007883a 	mov	r3,r2
    1e04:	e0bffd17 	ldw	r2,-12(fp)
    1e08:	10c4b03a 	or	r2,r2,r3
    1e0c:	e0bffd15 	stw	r2,-12(fp)

	return result;
    1e10:	e0bffd17 	ldw	r2,-12(fp)
}
    1e14:	e037883a 	mov	sp,fp
    1e18:	dfc00117 	ldw	ra,4(sp)
    1e1c:	df000017 	ldw	fp,0(sp)
    1e20:	dec00204 	addi	sp,sp,8
    1e24:	f800283a 	ret

00001e28 <alt_up_ethernet_phy_reg_write>:

void alt_up_ethernet_phy_reg_write (unsigned int base, unsigned int reg, unsigned int data)
{ 
    1e28:	defffa04 	addi	sp,sp,-24
    1e2c:	dfc00515 	stw	ra,20(sp)
    1e30:	df000415 	stw	fp,16(sp)
    1e34:	df000404 	addi	fp,sp,16
    1e38:	e13ffd15 	stw	r4,-12(fp)
    1e3c:	e17ffe15 	stw	r5,-8(fp)
    1e40:	e1bfff15 	stw	r6,-4(fp)
	unsigned int timeout = 0;
    1e44:	e03ffc15 	stw	zero,-16(fp)
	
	/* set PHY register address into EPAR REG. 0CH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPAR, reg | 0x40);				/* PHY register address setting, and DM9000_PHY offset = 0x40 */
    1e48:	e0bffe17 	ldw	r2,-8(fp)
    1e4c:	11801014 	ori	r6,r2,64
    1e50:	e13ffd17 	ldw	r4,-12(fp)
    1e54:	01400304 	movi	r5,12
    1e58:	0001d040 	call	1d04 <alt_up_ethernet_reg_write>

	/* fill PHY WRITE data into EPDR REG. 0EH & REG. 0DH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPDRH, ((data >> 8) & 0xFF));	/* PHY data high_byte */
    1e5c:	e0bfff17 	ldw	r2,-4(fp)
    1e60:	1004d23a 	srli	r2,r2,8
    1e64:	11803fcc 	andi	r6,r2,255
    1e68:	e13ffd17 	ldw	r4,-12(fp)
    1e6c:	01400384 	movi	r5,14
    1e70:	0001d040 	call	1d04 <alt_up_ethernet_reg_write>
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPDRL, data & 0xFF);			/* PHY data low_byte */
    1e74:	e0bfff17 	ldw	r2,-4(fp)
    1e78:	11803fcc 	andi	r6,r2,255
    1e7c:	e13ffd17 	ldw	r4,-12(fp)
    1e80:	01400344 	movi	r5,13
    1e84:	0001d040 	call	1d04 <alt_up_ethernet_reg_write>

	/* issue PHY + WRITE command = 0xA into EPCR REG. 0BH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x0A);					/* issue PHY + WRITE command */
    1e88:	e13ffd17 	ldw	r4,-12(fp)
    1e8c:	014002c4 	movi	r5,11
    1e90:	01800284 	movi	r6,10
    1e94:	0001d040 	call	1d04 <alt_up_ethernet_reg_write>
	do {
		usleep(1);
    1e98:	01000044 	movi	r4,1
    1e9c:	0003d8c0 	call	3d8c <usleep>
		timeout++;
    1ea0:	e0bffc17 	ldw	r2,-16(fp)
    1ea4:	10800044 	addi	r2,r2,1
    1ea8:	e0bffc15 	stw	r2,-16(fp)
	} while ((timeout < 50) && (alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPCR) & 0x01));
    1eac:	e0bffc17 	ldw	r2,-16(fp)
    1eb0:	10800ca8 	cmpgeui	r2,r2,50
    1eb4:	1000071e 	bne	r2,zero,1ed4 <alt_up_ethernet_phy_reg_write+0xac>
    1eb8:	e13ffd17 	ldw	r4,-12(fp)
    1ebc:	014002c4 	movi	r5,11
    1ec0:	0001cc80 	call	1cc8 <alt_up_ethernet_reg_read>
    1ec4:	1080004c 	andi	r2,r2,1
    1ec8:	10803fcc 	andi	r2,r2,255
    1ecc:	1004c03a 	cmpne	r2,r2,zero
    1ed0:	103ff11e 	bne	r2,zero,1e98 <alt_up_ethernet_phy_reg_write+0x70>
	
	usleep(1);
    1ed4:	01000044 	movi	r4,1
    1ed8:	0003d8c0 	call	3d8c <usleep>
	
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x08);					/* clear PHY command */
    1edc:	e13ffd17 	ldw	r4,-12(fp)
    1ee0:	014002c4 	movi	r5,11
    1ee4:	01800204 	movi	r6,8
    1ee8:	0001d040 	call	1d04 <alt_up_ethernet_reg_write>
}
    1eec:	e037883a 	mov	sp,fp
    1ef0:	dfc00117 	ldw	ra,4(sp)
    1ef4:	df000017 	ldw	fp,0(sp)
    1ef8:	dec00204 	addi	sp,sp,8
    1efc:	f800283a 	ret

00001f00 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
    1f00:	defffd04 	addi	sp,sp,-12
    1f04:	df000215 	stw	fp,8(sp)
    1f08:	df000204 	addi	fp,sp,8
    1f0c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    1f10:	e0bfff17 	ldw	r2,-4(fp)
    1f14:	10800a17 	ldw	r2,40(r2)
    1f18:	10800104 	addi	r2,r2,4
    1f1c:	10800037 	ldwio	r2,0(r2)
    1f20:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
    1f24:	e0bffe17 	ldw	r2,-8(fp)
    1f28:	10800054 	ori	r2,r2,1
    1f2c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    1f30:	e0bfff17 	ldw	r2,-4(fp)
    1f34:	10800a17 	ldw	r2,40(r2)
    1f38:	10800104 	addi	r2,r2,4
    1f3c:	e0fffe17 	ldw	r3,-8(fp)
    1f40:	10c00035 	stwio	r3,0(r2)
}
    1f44:	e037883a 	mov	sp,fp
    1f48:	df000017 	ldw	fp,0(sp)
    1f4c:	dec00104 	addi	sp,sp,4
    1f50:	f800283a 	ret

00001f54 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
    1f54:	defffd04 	addi	sp,sp,-12
    1f58:	df000215 	stw	fp,8(sp)
    1f5c:	df000204 	addi	fp,sp,8
    1f60:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    1f64:	e0bfff17 	ldw	r2,-4(fp)
    1f68:	10800a17 	ldw	r2,40(r2)
    1f6c:	10800104 	addi	r2,r2,4
    1f70:	10800037 	ldwio	r2,0(r2)
    1f74:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
    1f78:	e0fffe17 	ldw	r3,-8(fp)
    1f7c:	00bfff84 	movi	r2,-2
    1f80:	1884703a 	and	r2,r3,r2
    1f84:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    1f88:	e0bfff17 	ldw	r2,-4(fp)
    1f8c:	10800a17 	ldw	r2,40(r2)
    1f90:	10800104 	addi	r2,r2,4
    1f94:	e0fffe17 	ldw	r3,-8(fp)
    1f98:	10c00035 	stwio	r3,0(r2)
}
    1f9c:	e037883a 	mov	sp,fp
    1fa0:	df000017 	ldw	fp,0(sp)
    1fa4:	dec00104 	addi	sp,sp,4
    1fa8:	f800283a 	ret

00001fac <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
    1fac:	defffd04 	addi	sp,sp,-12
    1fb0:	df000215 	stw	fp,8(sp)
    1fb4:	df000204 	addi	fp,sp,8
    1fb8:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    1fbc:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    1fc0:	e0bfff17 	ldw	r2,-4(fp)
    1fc4:	10800a17 	ldw	r2,40(r2)
    1fc8:	10800084 	addi	r2,r2,2
    1fcc:	1080002b 	ldhuio	r2,0(r2)
    1fd0:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
    1fd4:	e0bffe0b 	ldhu	r2,-8(fp)
}
    1fd8:	e037883a 	mov	sp,fp
    1fdc:	df000017 	ldw	fp,0(sp)
    1fe0:	dec00104 	addi	sp,sp,4
    1fe4:	f800283a 	ret

00001fe8 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
    1fe8:	defffd04 	addi	sp,sp,-12
    1fec:	df000215 	stw	fp,8(sp)
    1ff0:	df000204 	addi	fp,sp,8
    1ff4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    1ff8:	e0bfff17 	ldw	r2,-4(fp)
    1ffc:	10800a17 	ldw	r2,40(r2)
    2000:	10800104 	addi	r2,r2,4
    2004:	10800037 	ldwio	r2,0(r2)
    2008:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
    200c:	e0bffe17 	ldw	r2,-8(fp)
    2010:	10bfffec 	andhi	r2,r2,65535
    2014:	1004d43a 	srli	r2,r2,16
}
    2018:	e037883a 	mov	sp,fp
    201c:	df000017 	ldw	fp,0(sp)
    2020:	dec00104 	addi	sp,sp,4
    2024:	f800283a 	ret

00002028 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
    2028:	defffc04 	addi	sp,sp,-16
    202c:	df000315 	stw	fp,12(sp)
    2030:	df000304 	addi	fp,sp,12
    2034:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
    2038:	e0bffe17 	ldw	r2,-8(fp)
    203c:	1080800c 	andi	r2,r2,512
    2040:	1004d27a 	srli	r2,r2,9
    2044:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
    2048:	e0bffd17 	ldw	r2,-12(fp)
    204c:	1005003a 	cmpeq	r2,r2,zero
    2050:	1000031e 	bne	r2,zero,2060 <alt_up_irda_check_parity+0x38>
    2054:	00bfffc4 	movi	r2,-1
    2058:	e0bfff15 	stw	r2,-4(fp)
    205c:	00000106 	br	2064 <alt_up_irda_check_parity+0x3c>
    2060:	e03fff15 	stw	zero,-4(fp)
    2064:	e0bfff17 	ldw	r2,-4(fp)
}
    2068:	e037883a 	mov	sp,fp
    206c:	df000017 	ldw	fp,0(sp)
    2070:	dec00104 	addi	sp,sp,4
    2074:	f800283a 	ret

00002078 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
    2078:	defffc04 	addi	sp,sp,-16
    207c:	df000315 	stw	fp,12(sp)
    2080:	df000304 	addi	fp,sp,12
    2084:	e13ffe15 	stw	r4,-8(fp)
    2088:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    208c:	e0bffe17 	ldw	r2,-8(fp)
    2090:	10800a17 	ldw	r2,40(r2)
    2094:	10800037 	ldwio	r2,0(r2)
    2098:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    209c:	e0bffe17 	ldw	r2,-8(fp)
    20a0:	10800a17 	ldw	r2,40(r2)
    20a4:	e0ffff03 	ldbu	r3,-4(fp)
    20a8:	10c00035 	stwio	r3,0(r2)
	return 0;
    20ac:	0005883a 	mov	r2,zero
}
    20b0:	e037883a 	mov	sp,fp
    20b4:	df000017 	ldw	fp,0(sp)
    20b8:	dec00104 	addi	sp,sp,4
    20bc:	f800283a 	ret

000020c0 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    20c0:	defffa04 	addi	sp,sp,-24
    20c4:	dfc00515 	stw	ra,20(sp)
    20c8:	df000415 	stw	fp,16(sp)
    20cc:	df000404 	addi	fp,sp,16
    20d0:	e13ffd15 	stw	r4,-12(fp)
    20d4:	e17ffe15 	stw	r5,-8(fp)
    20d8:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    20dc:	e0bffd17 	ldw	r2,-12(fp)
    20e0:	10800a17 	ldw	r2,40(r2)
    20e4:	10800037 	ldwio	r2,0(r2)
    20e8:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    20ec:	e0bffc17 	ldw	r2,-16(fp)
    20f0:	1007883a 	mov	r3,r2
    20f4:	e0bffe17 	ldw	r2,-8(fp)
    20f8:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
    20fc:	e13ffc17 	ldw	r4,-16(fp)
    2100:	00020280 	call	2028 <alt_up_irda_check_parity>
    2104:	1007883a 	mov	r3,r2
    2108:	e0bfff17 	ldw	r2,-4(fp)
    210c:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
    2110:	e0bffc17 	ldw	r2,-16(fp)
    2114:	10a0000c 	andi	r2,r2,32768
    2118:	1004d3fa 	srli	r2,r2,15
    211c:	10bfffc4 	addi	r2,r2,-1
}
    2120:	e037883a 	mov	sp,fp
    2124:	dfc00117 	ldw	ra,4(sp)
    2128:	df000017 	ldw	fp,0(sp)
    212c:	dec00204 	addi	sp,sp,8
    2130:	f800283a 	ret

00002134 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    2134:	defff804 	addi	sp,sp,-32
    2138:	dfc00715 	stw	ra,28(sp)
    213c:	df000615 	stw	fp,24(sp)
    2140:	df000604 	addi	fp,sp,24
    2144:	e13ffd15 	stw	r4,-12(fp)
    2148:	e17ffe15 	stw	r5,-8(fp)
    214c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    2150:	e0bffd17 	ldw	r2,-12(fp)
    2154:	10800017 	ldw	r2,0(r2)
    2158:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    215c:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    2160:	00000c06 	br	2194 <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, ptr++, &parity_error)==0)
    2164:	e17ffe17 	ldw	r5,-8(fp)
    2168:	e0bffe17 	ldw	r2,-8(fp)
    216c:	10800044 	addi	r2,r2,1
    2170:	e0bffe15 	stw	r2,-8(fp)
    2174:	e1bffc04 	addi	r6,fp,-16
    2178:	e13ffb17 	ldw	r4,-20(fp)
    217c:	00020c00 	call	20c0 <alt_up_irda_read_data>
    2180:	1004c03a 	cmpne	r2,r2,zero
    2184:	1000091e 	bne	r2,zero,21ac <alt_up_irda_read_fd+0x78>
			count++;
    2188:	e0bffa17 	ldw	r2,-24(fp)
    218c:	10800044 	addi	r2,r2,1
    2190:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    2194:	e0bfff17 	ldw	r2,-4(fp)
    2198:	10bfffc4 	addi	r2,r2,-1
    219c:	e0bfff15 	stw	r2,-4(fp)
    21a0:	e0bfff17 	ldw	r2,-4(fp)
    21a4:	10bfffd8 	cmpnei	r2,r2,-1
    21a8:	103fee1e 	bne	r2,zero,2164 <alt_up_irda_read_fd+0x30>
		if (alt_up_irda_read_data(irda, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    21ac:	e0bffa17 	ldw	r2,-24(fp)
}
    21b0:	e037883a 	mov	sp,fp
    21b4:	dfc00117 	ldw	ra,4(sp)
    21b8:	df000017 	ldw	fp,0(sp)
    21bc:	dec00204 	addi	sp,sp,8
    21c0:	f800283a 	ret

000021c4 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    21c4:	defff904 	addi	sp,sp,-28
    21c8:	dfc00615 	stw	ra,24(sp)
    21cc:	df000515 	stw	fp,20(sp)
    21d0:	df000504 	addi	fp,sp,20
    21d4:	e13ffd15 	stw	r4,-12(fp)
    21d8:	e17ffe15 	stw	r5,-8(fp)
    21dc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    21e0:	e0bffd17 	ldw	r2,-12(fp)
    21e4:	10800017 	ldw	r2,0(r2)
    21e8:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    21ec:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    21f0:	00000c06 	br	2224 <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, ptr++)==0)
    21f4:	e0bffe17 	ldw	r2,-8(fp)
    21f8:	11403fcc 	andi	r5,r2,255
    21fc:	e0bffe17 	ldw	r2,-8(fp)
    2200:	10800044 	addi	r2,r2,1
    2204:	e0bffe15 	stw	r2,-8(fp)
    2208:	e13ffc17 	ldw	r4,-16(fp)
    220c:	00020780 	call	2078 <alt_up_irda_write_data>
    2210:	1004c03a 	cmpne	r2,r2,zero
    2214:	1000091e 	bne	r2,zero,223c <alt_up_irda_write_fd+0x78>
			count++;
    2218:	e0bffb17 	ldw	r2,-20(fp)
    221c:	10800044 	addi	r2,r2,1
    2220:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
    2224:	e0bfff17 	ldw	r2,-4(fp)
    2228:	10bfffc4 	addi	r2,r2,-1
    222c:	e0bfff15 	stw	r2,-4(fp)
    2230:	e0bfff17 	ldw	r2,-4(fp)
    2234:	10bfffd8 	cmpnei	r2,r2,-1
    2238:	103fee1e 	bne	r2,zero,21f4 <alt_up_irda_write_fd+0x30>
		if (alt_up_irda_write_data(irda, ptr++)==0)
			count++;
		else
			break;
	}
	return count;
    223c:	e0bffb17 	ldw	r2,-20(fp)
}
    2240:	e037883a 	mov	sp,fp
    2244:	dfc00117 	ldw	ra,4(sp)
    2248:	df000017 	ldw	fp,0(sp)
    224c:	dec00204 	addi	sp,sp,8
    2250:	f800283a 	ret

00002254 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    2254:	defffc04 	addi	sp,sp,-16
    2258:	dfc00315 	stw	ra,12(sp)
    225c:	df000215 	stw	fp,8(sp)
    2260:	df000204 	addi	fp,sp,8
    2264:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    2268:	e13fff17 	ldw	r4,-4(fp)
    226c:	01400034 	movhi	r5,0
    2270:	2958b304 	addi	r5,r5,25292
    2274:	00035040 	call	3504 <alt_find_dev>
    2278:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    227c:	e0bffe17 	ldw	r2,-8(fp)
}
    2280:	e037883a 	mov	sp,fp
    2284:	dfc00117 	ldw	ra,4(sp)
    2288:	df000017 	ldw	fp,0(sp)
    228c:	dec00204 	addi	sp,sp,8
    2290:	f800283a 	ret

00002294 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    2294:	defffd04 	addi	sp,sp,-12
    2298:	df000215 	stw	fp,8(sp)
    229c:	df000204 	addi	fp,sp,8
    22a0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    22a4:	e0bfff17 	ldw	r2,-4(fp)
    22a8:	1080400c 	andi	r2,r2,256
    22ac:	1004d23a 	srli	r2,r2,8
    22b0:	e0bffe05 	stb	r2,-8(fp)
	return ri;
    22b4:	e0bffe03 	ldbu	r2,-8(fp)
}
    22b8:	e037883a 	mov	sp,fp
    22bc:	df000017 	ldw	fp,0(sp)
    22c0:	dec00104 	addi	sp,sp,4
    22c4:	f800283a 	ret

000022c8 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
    22c8:	defffd04 	addi	sp,sp,-12
    22cc:	df000215 	stw	fp,8(sp)
    22d0:	df000204 	addi	fp,sp,8
    22d4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
    22d8:	e0bfff17 	ldw	r2,-4(fp)
    22dc:	1080004c 	andi	r2,r2,1
    22e0:	e0bffe05 	stb	r2,-8(fp)
	return re;
    22e4:	e0bffe03 	ldbu	r2,-8(fp)
}
    22e8:	e037883a 	mov	sp,fp
    22ec:	df000017 	ldw	fp,0(sp)
    22f0:	dec00104 	addi	sp,sp,4
    22f4:	f800283a 	ret

000022f8 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    22f8:	defffd04 	addi	sp,sp,-12
    22fc:	df000215 	stw	fp,8(sp)
    2300:	df000204 	addi	fp,sp,8
    2304:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    2308:	e0bfff17 	ldw	r2,-4(fp)
    230c:	1081000c 	andi	r2,r2,1024
    2310:	1004d2ba 	srli	r2,r2,10
    2314:	e0bffe05 	stb	r2,-8(fp)
	return re;
    2318:	e0bffe03 	ldbu	r2,-8(fp)
}
    231c:	e037883a 	mov	sp,fp
    2320:	df000017 	ldw	fp,0(sp)
    2324:	dec00104 	addi	sp,sp,4
    2328:	f800283a 	ret

0000232c <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
    232c:	defffd04 	addi	sp,sp,-12
    2330:	df000215 	stw	fp,8(sp)
    2334:	df000204 	addi	fp,sp,8
    2338:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
    233c:	e0bfff17 	ldw	r2,-4(fp)
    2340:	10bfffec 	andhi	r2,r2,65535
    2344:	1004d43a 	srli	r2,r2,16
    2348:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
    234c:	e0bffe0b 	ldhu	r2,-8(fp)
}
    2350:	e037883a 	mov	sp,fp
    2354:	df000017 	ldw	fp,0(sp)
    2358:	dec00104 	addi	sp,sp,4
    235c:	f800283a 	ret

00002360 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    2360:	defffd04 	addi	sp,sp,-12
    2364:	df000215 	stw	fp,8(sp)
    2368:	df000204 	addi	fp,sp,8
    236c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    2370:	e0bfff17 	ldw	r2,-4(fp)
    2374:	10a0000c 	andi	r2,r2,32768
    2378:	1004d3fa 	srli	r2,r2,15
    237c:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
    2380:	e0bffe03 	ldbu	r2,-8(fp)
}
    2384:	e037883a 	mov	sp,fp
    2388:	df000017 	ldw	fp,0(sp)
    238c:	dec00104 	addi	sp,sp,4
    2390:	f800283a 	ret

00002394 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
    2394:	defffd04 	addi	sp,sp,-12
    2398:	df000215 	stw	fp,8(sp)
    239c:	df000204 	addi	fp,sp,8
    23a0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    23a4:	e0bfff17 	ldw	r2,-4(fp)
    23a8:	e0bffe05 	stb	r2,-8(fp)
	return data;
    23ac:	e0bffe03 	ldbu	r2,-8(fp)
}
    23b0:	e037883a 	mov	sp,fp
    23b4:	df000017 	ldw	fp,0(sp)
    23b8:	dec00104 	addi	sp,sp,4
    23bc:	f800283a 	ret

000023c0 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    23c0:	defffb04 	addi	sp,sp,-20
    23c4:	dfc00415 	stw	ra,16(sp)
    23c8:	df000315 	stw	fp,12(sp)
    23cc:	df000304 	addi	fp,sp,12
    23d0:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    23d4:	e13fff17 	ldw	r4,-4(fp)
    23d8:	01403fc4 	movi	r5,255
    23dc:	00026200 	call	2620 <alt_up_ps2_write_data_byte_with_ack>
    23e0:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
    23e4:	e0bffd17 	ldw	r2,-12(fp)
    23e8:	1004c03a 	cmpne	r2,r2,zero
    23ec:	1000221e 	bne	r2,zero,2478 <alt_up_ps2_init+0xb8>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    23f0:	e17ffe04 	addi	r5,fp,-8
    23f4:	e13fff17 	ldw	r4,-4(fp)
    23f8:	000268c0 	call	268c <alt_up_ps2_read_data_byte_timeout>
    23fc:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
    2400:	e0bffd17 	ldw	r2,-12(fp)
    2404:	1004c03a 	cmpne	r2,r2,zero
    2408:	10001b1e 	bne	r2,zero,2478 <alt_up_ps2_init+0xb8>
    240c:	e0bffe03 	ldbu	r2,-8(fp)
    2410:	10803fcc 	andi	r2,r2,255
    2414:	10802a98 	cmpnei	r2,r2,170
    2418:	1000171e 	bne	r2,zero,2478 <alt_up_ps2_init+0xb8>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    241c:	e17ffe04 	addi	r5,fp,-8
    2420:	e13fff17 	ldw	r4,-4(fp)
    2424:	000268c0 	call	268c <alt_up_ps2_read_data_byte_timeout>
    2428:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
    242c:	e0bffd17 	ldw	r2,-12(fp)
    2430:	10bfe318 	cmpnei	r2,r2,-116
    2434:	1000041e 	bne	r2,zero,2448 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    2438:	e0ffff17 	ldw	r3,-4(fp)
    243c:	00800044 	movi	r2,1
    2440:	18800d15 	stw	r2,52(r3)
    2444:	00000c06 	br	2478 <alt_up_ps2_init+0xb8>
			}
			else if (status == 0 && byte == 0x00)
    2448:	e0bffd17 	ldw	r2,-12(fp)
    244c:	1004c03a 	cmpne	r2,r2,zero
    2450:	1000091e 	bne	r2,zero,2478 <alt_up_ps2_init+0xb8>
    2454:	e0bffe03 	ldbu	r2,-8(fp)
    2458:	10803fcc 	andi	r2,r2,255
    245c:	1004c03a 	cmpne	r2,r2,zero
    2460:	1000051e 	bne	r2,zero,2478 <alt_up_ps2_init+0xb8>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    2464:	e0bfff17 	ldw	r2,-4(fp)
    2468:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    246c:	e13fff17 	ldw	r4,-4(fp)
    2470:	01403d04 	movi	r5,244
    2474:	00025380 	call	2538 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    2478:	e037883a 	mov	sp,fp
    247c:	dfc00117 	ldw	ra,4(sp)
    2480:	df000017 	ldw	fp,0(sp)
    2484:	dec00204 	addi	sp,sp,8
    2488:	f800283a 	ret

0000248c <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
    248c:	defffd04 	addi	sp,sp,-12
    2490:	df000215 	stw	fp,8(sp)
    2494:	df000204 	addi	fp,sp,8
    2498:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    249c:	e0bfff17 	ldw	r2,-4(fp)
    24a0:	10800a17 	ldw	r2,40(r2)
    24a4:	10800104 	addi	r2,r2,4
    24a8:	10800037 	ldwio	r2,0(r2)
    24ac:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    24b0:	e0bffe17 	ldw	r2,-8(fp)
    24b4:	10800054 	ori	r2,r2,1
    24b8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    24bc:	e0bfff17 	ldw	r2,-4(fp)
    24c0:	10800a17 	ldw	r2,40(r2)
    24c4:	10800104 	addi	r2,r2,4
    24c8:	e0fffe17 	ldw	r3,-8(fp)
    24cc:	10c00035 	stwio	r3,0(r2)
}
    24d0:	e037883a 	mov	sp,fp
    24d4:	df000017 	ldw	fp,0(sp)
    24d8:	dec00104 	addi	sp,sp,4
    24dc:	f800283a 	ret

000024e0 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
    24e0:	defffd04 	addi	sp,sp,-12
    24e4:	df000215 	stw	fp,8(sp)
    24e8:	df000204 	addi	fp,sp,8
    24ec:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    24f0:	e0bfff17 	ldw	r2,-4(fp)
    24f4:	10800a17 	ldw	r2,40(r2)
    24f8:	10800104 	addi	r2,r2,4
    24fc:	10800037 	ldwio	r2,0(r2)
    2500:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    2504:	e0fffe17 	ldw	r3,-8(fp)
    2508:	00bfff84 	movi	r2,-2
    250c:	1884703a 	and	r2,r3,r2
    2510:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    2514:	e0bfff17 	ldw	r2,-4(fp)
    2518:	10800a17 	ldw	r2,40(r2)
    251c:	10800104 	addi	r2,r2,4
    2520:	e0fffe17 	ldw	r3,-8(fp)
    2524:	10c00035 	stwio	r3,0(r2)
}
    2528:	e037883a 	mov	sp,fp
    252c:	df000017 	ldw	fp,0(sp)
    2530:	dec00104 	addi	sp,sp,4
    2534:	f800283a 	ret

00002538 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    2538:	defffa04 	addi	sp,sp,-24
    253c:	dfc00515 	stw	ra,20(sp)
    2540:	df000415 	stw	fp,16(sp)
    2544:	df000404 	addi	fp,sp,16
    2548:	e13ffd15 	stw	r4,-12(fp)
    254c:	e17ffe05 	stb	r5,-8(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    2550:	e0bffd17 	ldw	r2,-12(fp)
    2554:	10800a17 	ldw	r2,40(r2)
    2558:	e0fffe03 	ldbu	r3,-8(fp)
    255c:	10c00025 	stbio	r3,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    2560:	e0bffd17 	ldw	r2,-12(fp)
    2564:	10800a17 	ldw	r2,40(r2)
    2568:	10800104 	addi	r2,r2,4
    256c:	10800037 	ldwio	r2,0(r2)
    2570:	e0bffc15 	stw	r2,-16(fp)
	if (read_CE_bit(ctrl_reg))
    2574:	e13ffc17 	ldw	r4,-16(fp)
    2578:	00022f80 	call	22f8 <read_CE_bit>
    257c:	10803fcc 	andi	r2,r2,255
    2580:	1005003a 	cmpeq	r2,r2,zero
    2584:	1000031e 	bne	r2,zero,2594 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    2588:	00bffec4 	movi	r2,-5
    258c:	e0bfff15 	stw	r2,-4(fp)
    2590:	00000106 	br	2598 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
    2594:	e03fff15 	stw	zero,-4(fp)
    2598:	e0bfff17 	ldw	r2,-4(fp)
}
    259c:	e037883a 	mov	sp,fp
    25a0:	dfc00117 	ldw	ra,4(sp)
    25a4:	df000017 	ldw	fp,0(sp)
    25a8:	dec00204 	addi	sp,sp,8
    25ac:	f800283a 	ret

000025b0 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    25b0:	defffb04 	addi	sp,sp,-20
    25b4:	dfc00415 	stw	ra,16(sp)
    25b8:	df000315 	stw	fp,12(sp)
    25bc:	df000304 	addi	fp,sp,12
    25c0:	e13ffe15 	stw	r4,-8(fp)
	unsigned char data = 0;
    25c4:	e03ffd45 	stb	zero,-11(fp)
	unsigned char status = 0;
    25c8:	e03ffd05 	stb	zero,-12(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    25cc:	e17ffd44 	addi	r5,fp,-11
    25d0:	e13ffe17 	ldw	r4,-8(fp)
    25d4:	000268c0 	call	268c <alt_up_ps2_read_data_byte_timeout>
    25d8:	e0bffd05 	stb	r2,-12(fp)
		if ( status == 0)
    25dc:	e0bffd03 	ldbu	r2,-12(fp)
    25e0:	1004c03a 	cmpne	r2,r2,zero
    25e4:	1000061e 	bne	r2,zero,2600 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
    25e8:	e0bffd43 	ldbu	r2,-11(fp)
    25ec:	10803fcc 	andi	r2,r2,255
    25f0:	10803e98 	cmpnei	r2,r2,250
    25f4:	103ff51e 	bne	r2,zero,25cc <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
    25f8:	e03fff15 	stw	zero,-4(fp)
    25fc:	00000206 	br	2608 <alt_up_ps2_wait_for_ack+0x58>
		}
		else 
		{
			return status;
    2600:	e0bffd03 	ldbu	r2,-12(fp)
    2604:	e0bfff15 	stw	r2,-4(fp)
    2608:	e0bfff17 	ldw	r2,-4(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
    260c:	e037883a 	mov	sp,fp
    2610:	dfc00117 	ldw	ra,4(sp)
    2614:	df000017 	ldw	fp,0(sp)
    2618:	dec00204 	addi	sp,sp,8
    261c:	f800283a 	ret

00002620 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    2620:	defff904 	addi	sp,sp,-28
    2624:	dfc00615 	stw	ra,24(sp)
    2628:	df000515 	stw	fp,20(sp)
    262c:	df000504 	addi	fp,sp,20
    2630:	e13ffd15 	stw	r4,-12(fp)
    2634:	e17ffe05 	stb	r5,-8(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    2638:	e17ffe03 	ldbu	r5,-8(fp)
    263c:	e13ffd17 	ldw	r4,-12(fp)
    2640:	00025380 	call	2538 <alt_up_ps2_write_data_byte>
    2644:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
    2648:	e0bffc17 	ldw	r2,-16(fp)
    264c:	1005003a 	cmpeq	r2,r2,zero
    2650:	1000031e 	bne	r2,zero,2660 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
    2654:	e0bffc17 	ldw	r2,-16(fp)
    2658:	e0bfff15 	stw	r2,-4(fp)
    265c:	00000506 	br	2674 <alt_up_ps2_write_data_byte_with_ack+0x54>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    2660:	e13ffd17 	ldw	r4,-12(fp)
    2664:	00025b00 	call	25b0 <alt_up_ps2_wait_for_ack>
    2668:	e0bffb15 	stw	r2,-20(fp)
	return ack_status;
    266c:	e0bffb17 	ldw	r2,-20(fp)
    2670:	e0bfff15 	stw	r2,-4(fp)
    2674:	e0bfff17 	ldw	r2,-4(fp)
}
    2678:	e037883a 	mov	sp,fp
    267c:	dfc00117 	ldw	ra,4(sp)
    2680:	df000017 	ldw	fp,0(sp)
    2684:	dec00204 	addi	sp,sp,8
    2688:	f800283a 	ret

0000268c <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    268c:	defff904 	addi	sp,sp,-28
    2690:	dfc00615 	stw	ra,24(sp)
    2694:	df000515 	stw	fp,20(sp)
    2698:	df000504 	addi	fp,sp,20
    269c:	e13ffd15 	stw	r4,-12(fp)
    26a0:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
    26a4:	e03ffc15 	stw	zero,-16(fp)
	unsigned int count = 0;
    26a8:	e03ffb15 	stw	zero,-20(fp)
    26ac:	00000006 	br	26b0 <alt_up_ps2_read_data_byte_timeout+0x24>
	do {
		count++;
    26b0:	e0bffb17 	ldw	r2,-20(fp)
    26b4:	10800044 	addi	r2,r2,1
    26b8:	e0bffb15 	stw	r2,-20(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    26bc:	e0bffd17 	ldw	r2,-12(fp)
    26c0:	10800a17 	ldw	r2,40(r2)
    26c4:	10800037 	ldwio	r2,0(r2)
    26c8:	e0bffc15 	stw	r2,-16(fp)
		if (read_data_valid(data_reg))
    26cc:	e13ffc17 	ldw	r4,-16(fp)
    26d0:	00023600 	call	2360 <read_data_valid>
    26d4:	10803fcc 	andi	r2,r2,255
    26d8:	1005003a 	cmpeq	r2,r2,zero
    26dc:	1000071e 	bne	r2,zero,26fc <alt_up_ps2_read_data_byte_timeout+0x70>
		{
			*byte = read_data_byte(data_reg);
    26e0:	e13ffc17 	ldw	r4,-16(fp)
    26e4:	00023940 	call	2394 <read_data_byte>
    26e8:	1007883a 	mov	r3,r2
    26ec:	e0bffe17 	ldw	r2,-8(fp)
    26f0:	10c00005 	stb	r3,0(r2)
			return 0;
    26f4:	e03fff15 	stw	zero,-4(fp)
    26f8:	00000a06 	br	2724 <alt_up_ps2_read_data_byte_timeout+0x98>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    26fc:	e0bffd17 	ldw	r2,-12(fp)
    2700:	10800c17 	ldw	r2,48(r2)
    2704:	1005003a 	cmpeq	r2,r2,zero
    2708:	103fe91e 	bne	r2,zero,26b0 <alt_up_ps2_read_data_byte_timeout+0x24>
    270c:	e0bffd17 	ldw	r2,-12(fp)
    2710:	10c00c17 	ldw	r3,48(r2)
    2714:	e0bffb17 	ldw	r2,-20(fp)
    2718:	18bfe52e 	bgeu	r3,r2,26b0 <alt_up_ps2_read_data_byte_timeout+0x24>
		{
			return -ETIMEDOUT;
    271c:	00bfe304 	movi	r2,-116
    2720:	e0bfff15 	stw	r2,-4(fp)
		}
	} while (1);
    2724:	e0bfff17 	ldw	r2,-4(fp)
}
    2728:	e037883a 	mov	sp,fp
    272c:	dfc00117 	ldw	ra,4(sp)
    2730:	df000017 	ldw	fp,0(sp)
    2734:	dec00204 	addi	sp,sp,8
    2738:	f800283a 	ret

0000273c <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    273c:	defffa04 	addi	sp,sp,-24
    2740:	dfc00515 	stw	ra,20(sp)
    2744:	df000415 	stw	fp,16(sp)
    2748:	df000404 	addi	fp,sp,16
    274c:	e13ffd15 	stw	r4,-12(fp)
    2750:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
    2754:	e03ffc15 	stw	zero,-16(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    2758:	e0bffd17 	ldw	r2,-12(fp)
    275c:	10800a17 	ldw	r2,40(r2)
    2760:	10800037 	ldwio	r2,0(r2)
    2764:	e0bffc15 	stw	r2,-16(fp)
	if (read_data_valid(data_reg))
    2768:	e13ffc17 	ldw	r4,-16(fp)
    276c:	00023600 	call	2360 <read_data_valid>
    2770:	10803fcc 	andi	r2,r2,255
    2774:	1005003a 	cmpeq	r2,r2,zero
    2778:	1000071e 	bne	r2,zero,2798 <alt_up_ps2_read_data_byte+0x5c>
	{
		*byte = read_data_byte(data_reg);
    277c:	e13ffc17 	ldw	r4,-16(fp)
    2780:	00023940 	call	2394 <read_data_byte>
    2784:	1007883a 	mov	r3,r2
    2788:	e0bffe17 	ldw	r2,-8(fp)
    278c:	10c00005 	stb	r3,0(r2)
		return 0;
    2790:	e03fff15 	stw	zero,-4(fp)
    2794:	00000206 	br	27a0 <alt_up_ps2_read_data_byte+0x64>
	}
	return -1;
    2798:	00bfffc4 	movi	r2,-1
    279c:	e0bfff15 	stw	r2,-4(fp)
    27a0:	e0bfff17 	ldw	r2,-4(fp)
}
    27a4:	e037883a 	mov	sp,fp
    27a8:	dfc00117 	ldw	ra,4(sp)
    27ac:	df000017 	ldw	fp,0(sp)
    27b0:	dec00204 	addi	sp,sp,8
    27b4:	f800283a 	ret

000027b8 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    27b8:	defffb04 	addi	sp,sp,-20
    27bc:	dfc00415 	stw	ra,16(sp)
    27c0:	df000315 	stw	fp,12(sp)
    27c4:	df000304 	addi	fp,sp,12
    27c8:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
    27cc:	e03ffe0d 	sth	zero,-8(fp)
	unsigned int data_reg = 0;
    27d0:	e03ffd15 	stw	zero,-12(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    27d4:	e0bfff17 	ldw	r2,-4(fp)
    27d8:	10800a17 	ldw	r2,40(r2)
    27dc:	10800037 	ldwio	r2,0(r2)
    27e0:	e0bffd15 	stw	r2,-12(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    27e4:	e13ffd17 	ldw	r4,-12(fp)
    27e8:	000232c0 	call	232c <read_num_bytes_available>
    27ec:	e0bffe0d 	sth	r2,-8(fp)
	} while (num > 0);
    27f0:	e0bffe0b 	ldhu	r2,-8(fp)
    27f4:	1004c03a 	cmpne	r2,r2,zero
    27f8:	103ff61e 	bne	r2,zero,27d4 <alt_up_ps2_clear_fifo+0x1c>
}
    27fc:	e037883a 	mov	sp,fp
    2800:	dfc00117 	ldw	ra,4(sp)
    2804:	df000017 	ldw	fp,0(sp)
    2808:	dec00204 	addi	sp,sp,8
    280c:	f800283a 	ret

00002810 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    2810:	defff704 	addi	sp,sp,-36
    2814:	dfc00815 	stw	ra,32(sp)
    2818:	df000715 	stw	fp,28(sp)
    281c:	df000704 	addi	fp,sp,28
    2820:	e13ffc15 	stw	r4,-16(fp)
    2824:	e17ffd15 	stw	r5,-12(fp)
    2828:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    282c:	e0bffc17 	ldw	r2,-16(fp)
    2830:	10800017 	ldw	r2,0(r2)
    2834:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    2838:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
    283c:	e03ff915 	stw	zero,-28(fp)
	while (count < len);
    2840:	e0fff917 	ldw	r3,-28(fp)
    2844:	e0bffe17 	ldw	r2,-8(fp)
    2848:	18bffd16 	blt	r3,r2,2840 <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
    284c:	e17ffd17 	ldw	r5,-12(fp)
    2850:	e0bffd17 	ldw	r2,-12(fp)
    2854:	10800044 	addi	r2,r2,1
    2858:	e0bffd15 	stw	r2,-12(fp)
    285c:	e13ffb17 	ldw	r4,-20(fp)
    2860:	000268c0 	call	268c <alt_up_ps2_read_data_byte_timeout>
    2864:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
    2868:	e0bffa17 	ldw	r2,-24(fp)
    286c:	1005003a 	cmpeq	r2,r2,zero
    2870:	1000031e 	bne	r2,zero,2880 <alt_up_ps2_read_fd+0x70>
			return count;
    2874:	e0bff917 	ldw	r2,-28(fp)
    2878:	e0bfff15 	stw	r2,-4(fp)
    287c:	00000506 	br	2894 <alt_up_ps2_read_fd+0x84>
		count++;
    2880:	e0bff917 	ldw	r2,-28(fp)
    2884:	10800044 	addi	r2,r2,1
    2888:	e0bff915 	stw	r2,-28(fp)
	} 
	return count;
    288c:	e0bff917 	ldw	r2,-28(fp)
    2890:	e0bfff15 	stw	r2,-4(fp)
    2894:	e0bfff17 	ldw	r2,-4(fp)
}
    2898:	e037883a 	mov	sp,fp
    289c:	dfc00117 	ldw	ra,4(sp)
    28a0:	df000017 	ldw	fp,0(sp)
    28a4:	dec00204 	addi	sp,sp,8
    28a8:	f800283a 	ret

000028ac <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    28ac:	defff704 	addi	sp,sp,-36
    28b0:	dfc00815 	stw	ra,32(sp)
    28b4:	df000715 	stw	fp,28(sp)
    28b8:	df000704 	addi	fp,sp,28
    28bc:	e13ffc15 	stw	r4,-16(fp)
    28c0:	e17ffd15 	stw	r5,-12(fp)
    28c4:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    28c8:	e0bffc17 	ldw	r2,-16(fp)
    28cc:	10800017 	ldw	r2,0(r2)
    28d0:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    28d4:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
    28d8:	e03ff915 	stw	zero,-28(fp)
	while (count < len)
    28dc:	00001206 	br	2928 <alt_up_ps2_write_fd+0x7c>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    28e0:	e0bffd17 	ldw	r2,-12(fp)
    28e4:	10800003 	ldbu	r2,0(r2)
    28e8:	11403fcc 	andi	r5,r2,255
    28ec:	e0bffd17 	ldw	r2,-12(fp)
    28f0:	10800044 	addi	r2,r2,1
    28f4:	e0bffd15 	stw	r2,-12(fp)
    28f8:	e13ffb17 	ldw	r4,-20(fp)
    28fc:	00025380 	call	2538 <alt_up_ps2_write_data_byte>
    2900:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
    2904:	e0bffa17 	ldw	r2,-24(fp)
    2908:	1005003a 	cmpeq	r2,r2,zero
    290c:	1000031e 	bne	r2,zero,291c <alt_up_ps2_write_fd+0x70>
			return count;
    2910:	e0bff917 	ldw	r2,-28(fp)
    2914:	e0bfff15 	stw	r2,-4(fp)
    2918:	00000806 	br	293c <alt_up_ps2_write_fd+0x90>
		count++;
    291c:	e0bff917 	ldw	r2,-28(fp)
    2920:	10800044 	addi	r2,r2,1
    2924:	e0bff915 	stw	r2,-28(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    2928:	e0fff917 	ldw	r3,-28(fp)
    292c:	e0bffe17 	ldw	r2,-8(fp)
    2930:	18bfeb16 	blt	r3,r2,28e0 <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
    2934:	e0bff917 	ldw	r2,-28(fp)
    2938:	e0bfff15 	stw	r2,-4(fp)
    293c:	e0bfff17 	ldw	r2,-4(fp)
}
    2940:	e037883a 	mov	sp,fp
    2944:	dfc00117 	ldw	ra,4(sp)
    2948:	df000017 	ldw	fp,0(sp)
    294c:	dec00204 	addi	sp,sp,8
    2950:	f800283a 	ret

00002954 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    2954:	defffc04 	addi	sp,sp,-16
    2958:	dfc00315 	stw	ra,12(sp)
    295c:	df000215 	stw	fp,8(sp)
    2960:	df000204 	addi	fp,sp,8
    2964:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    2968:	e13fff17 	ldw	r4,-4(fp)
    296c:	01400034 	movhi	r5,0
    2970:	2958b304 	addi	r5,r5,25292
    2974:	00035040 	call	3504 <alt_find_dev>
    2978:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    297c:	e0bffe17 	ldw	r2,-8(fp)
}
    2980:	e037883a 	mov	sp,fp
    2984:	dfc00117 	ldw	ra,4(sp)
    2988:	df000017 	ldw	fp,0(sp)
    298c:	dec00204 	addi	sp,sp,8
    2990:	f800283a 	ret

00002994 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    2994:	defffd04 	addi	sp,sp,-12
    2998:	df000215 	stw	fp,8(sp)
    299c:	df000204 	addi	fp,sp,8
    29a0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    29a4:	e0bfff17 	ldw	r2,-4(fp)
    29a8:	10800a17 	ldw	r2,40(r2)
    29ac:	10800104 	addi	r2,r2,4
    29b0:	10800037 	ldwio	r2,0(r2)
    29b4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    29b8:	e0bffe17 	ldw	r2,-8(fp)
    29bc:	10800054 	ori	r2,r2,1
    29c0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    29c4:	e0bfff17 	ldw	r2,-4(fp)
    29c8:	10800a17 	ldw	r2,40(r2)
    29cc:	10800104 	addi	r2,r2,4
    29d0:	e0fffe17 	ldw	r3,-8(fp)
    29d4:	10c00035 	stwio	r3,0(r2)
}
    29d8:	e037883a 	mov	sp,fp
    29dc:	df000017 	ldw	fp,0(sp)
    29e0:	dec00104 	addi	sp,sp,4
    29e4:	f800283a 	ret

000029e8 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    29e8:	defffd04 	addi	sp,sp,-12
    29ec:	df000215 	stw	fp,8(sp)
    29f0:	df000204 	addi	fp,sp,8
    29f4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    29f8:	e0bfff17 	ldw	r2,-4(fp)
    29fc:	10800a17 	ldw	r2,40(r2)
    2a00:	10800104 	addi	r2,r2,4
    2a04:	10800037 	ldwio	r2,0(r2)
    2a08:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    2a0c:	e0fffe17 	ldw	r3,-8(fp)
    2a10:	00bfff84 	movi	r2,-2
    2a14:	1884703a 	and	r2,r3,r2
    2a18:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    2a1c:	e0bfff17 	ldw	r2,-4(fp)
    2a20:	10800a17 	ldw	r2,40(r2)
    2a24:	10800104 	addi	r2,r2,4
    2a28:	e0fffe17 	ldw	r3,-8(fp)
    2a2c:	10c00035 	stwio	r3,0(r2)
}
    2a30:	e037883a 	mov	sp,fp
    2a34:	df000017 	ldw	fp,0(sp)
    2a38:	dec00104 	addi	sp,sp,4
    2a3c:	f800283a 	ret

00002a40 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    2a40:	defffd04 	addi	sp,sp,-12
    2a44:	df000215 	stw	fp,8(sp)
    2a48:	df000204 	addi	fp,sp,8
    2a4c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    2a50:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    2a54:	e0bfff17 	ldw	r2,-4(fp)
    2a58:	10800a17 	ldw	r2,40(r2)
    2a5c:	10800084 	addi	r2,r2,2
    2a60:	1080002b 	ldhuio	r2,0(r2)
    2a64:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    2a68:	e0bffe0b 	ldhu	r2,-8(fp)
}
    2a6c:	e037883a 	mov	sp,fp
    2a70:	df000017 	ldw	fp,0(sp)
    2a74:	dec00104 	addi	sp,sp,4
    2a78:	f800283a 	ret

00002a7c <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    2a7c:	defffd04 	addi	sp,sp,-12
    2a80:	df000215 	stw	fp,8(sp)
    2a84:	df000204 	addi	fp,sp,8
    2a88:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    2a8c:	e0bfff17 	ldw	r2,-4(fp)
    2a90:	10800a17 	ldw	r2,40(r2)
    2a94:	10800104 	addi	r2,r2,4
    2a98:	10800037 	ldwio	r2,0(r2)
    2a9c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    2aa0:	e0bffe17 	ldw	r2,-8(fp)
    2aa4:	10bfffec 	andhi	r2,r2,65535
    2aa8:	1004d43a 	srli	r2,r2,16
}
    2aac:	e037883a 	mov	sp,fp
    2ab0:	df000017 	ldw	fp,0(sp)
    2ab4:	dec00104 	addi	sp,sp,4
    2ab8:	f800283a 	ret

00002abc <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    2abc:	defffc04 	addi	sp,sp,-16
    2ac0:	df000315 	stw	fp,12(sp)
    2ac4:	df000304 	addi	fp,sp,12
    2ac8:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    2acc:	e0bffe17 	ldw	r2,-8(fp)
    2ad0:	1080800c 	andi	r2,r2,512
    2ad4:	1004d27a 	srli	r2,r2,9
    2ad8:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
    2adc:	e0bffd17 	ldw	r2,-12(fp)
    2ae0:	1005003a 	cmpeq	r2,r2,zero
    2ae4:	1000031e 	bne	r2,zero,2af4 <alt_up_rs232_check_parity+0x38>
    2ae8:	00bfffc4 	movi	r2,-1
    2aec:	e0bfff15 	stw	r2,-4(fp)
    2af0:	00000106 	br	2af8 <alt_up_rs232_check_parity+0x3c>
    2af4:	e03fff15 	stw	zero,-4(fp)
    2af8:	e0bfff17 	ldw	r2,-4(fp)
}
    2afc:	e037883a 	mov	sp,fp
    2b00:	df000017 	ldw	fp,0(sp)
    2b04:	dec00104 	addi	sp,sp,4
    2b08:	f800283a 	ret

00002b0c <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    2b0c:	defffc04 	addi	sp,sp,-16
    2b10:	df000315 	stw	fp,12(sp)
    2b14:	df000304 	addi	fp,sp,12
    2b18:	e13ffe15 	stw	r4,-8(fp)
    2b1c:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    2b20:	e0bffe17 	ldw	r2,-8(fp)
    2b24:	10800a17 	ldw	r2,40(r2)
    2b28:	10800037 	ldwio	r2,0(r2)
    2b2c:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    2b30:	e0bffe17 	ldw	r2,-8(fp)
    2b34:	10800a17 	ldw	r2,40(r2)
    2b38:	e0ffff03 	ldbu	r3,-4(fp)
    2b3c:	10c00035 	stwio	r3,0(r2)
	return 0;
    2b40:	0005883a 	mov	r2,zero
}
    2b44:	e037883a 	mov	sp,fp
    2b48:	df000017 	ldw	fp,0(sp)
    2b4c:	dec00104 	addi	sp,sp,4
    2b50:	f800283a 	ret

00002b54 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    2b54:	defffa04 	addi	sp,sp,-24
    2b58:	dfc00515 	stw	ra,20(sp)
    2b5c:	df000415 	stw	fp,16(sp)
    2b60:	df000404 	addi	fp,sp,16
    2b64:	e13ffd15 	stw	r4,-12(fp)
    2b68:	e17ffe15 	stw	r5,-8(fp)
    2b6c:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    2b70:	e0bffd17 	ldw	r2,-12(fp)
    2b74:	10800a17 	ldw	r2,40(r2)
    2b78:	10800037 	ldwio	r2,0(r2)
    2b7c:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    2b80:	e0bffc17 	ldw	r2,-16(fp)
    2b84:	1007883a 	mov	r3,r2
    2b88:	e0bffe17 	ldw	r2,-8(fp)
    2b8c:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    2b90:	e13ffc17 	ldw	r4,-16(fp)
    2b94:	0002abc0 	call	2abc <alt_up_rs232_check_parity>
    2b98:	1007883a 	mov	r3,r2
    2b9c:	e0bfff17 	ldw	r2,-4(fp)
    2ba0:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    2ba4:	e0bffc17 	ldw	r2,-16(fp)
    2ba8:	10a0000c 	andi	r2,r2,32768
    2bac:	1004d3fa 	srli	r2,r2,15
    2bb0:	10bfffc4 	addi	r2,r2,-1
}
    2bb4:	e037883a 	mov	sp,fp
    2bb8:	dfc00117 	ldw	ra,4(sp)
    2bbc:	df000017 	ldw	fp,0(sp)
    2bc0:	dec00204 	addi	sp,sp,8
    2bc4:	f800283a 	ret

00002bc8 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    2bc8:	defff804 	addi	sp,sp,-32
    2bcc:	dfc00715 	stw	ra,28(sp)
    2bd0:	df000615 	stw	fp,24(sp)
    2bd4:	df000604 	addi	fp,sp,24
    2bd8:	e13ffd15 	stw	r4,-12(fp)
    2bdc:	e17ffe15 	stw	r5,-8(fp)
    2be0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    2be4:	e0bffd17 	ldw	r2,-12(fp)
    2be8:	10800017 	ldw	r2,0(r2)
    2bec:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    2bf0:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    2bf4:	00000c06 	br	2c28 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
    2bf8:	e17ffe17 	ldw	r5,-8(fp)
    2bfc:	e0bffe17 	ldw	r2,-8(fp)
    2c00:	10800044 	addi	r2,r2,1
    2c04:	e0bffe15 	stw	r2,-8(fp)
    2c08:	e1bffc04 	addi	r6,fp,-16
    2c0c:	e13ffb17 	ldw	r4,-20(fp)
    2c10:	0002b540 	call	2b54 <alt_up_rs232_read_data>
    2c14:	1004c03a 	cmpne	r2,r2,zero
    2c18:	1000091e 	bne	r2,zero,2c40 <alt_up_rs232_read_fd+0x78>
			count++;
    2c1c:	e0bffa17 	ldw	r2,-24(fp)
    2c20:	10800044 	addi	r2,r2,1
    2c24:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    2c28:	e0bfff17 	ldw	r2,-4(fp)
    2c2c:	10bfffc4 	addi	r2,r2,-1
    2c30:	e0bfff15 	stw	r2,-4(fp)
    2c34:	e0bfff17 	ldw	r2,-4(fp)
    2c38:	10bfffd8 	cmpnei	r2,r2,-1
    2c3c:	103fee1e 	bne	r2,zero,2bf8 <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    2c40:	e0bffa17 	ldw	r2,-24(fp)
}
    2c44:	e037883a 	mov	sp,fp
    2c48:	dfc00117 	ldw	ra,4(sp)
    2c4c:	df000017 	ldw	fp,0(sp)
    2c50:	dec00204 	addi	sp,sp,8
    2c54:	f800283a 	ret

00002c58 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    2c58:	defff904 	addi	sp,sp,-28
    2c5c:	dfc00615 	stw	ra,24(sp)
    2c60:	df000515 	stw	fp,20(sp)
    2c64:	df000504 	addi	fp,sp,20
    2c68:	e13ffd15 	stw	r4,-12(fp)
    2c6c:	e17ffe15 	stw	r5,-8(fp)
    2c70:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    2c74:	e0bffd17 	ldw	r2,-12(fp)
    2c78:	10800017 	ldw	r2,0(r2)
    2c7c:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    2c80:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    2c84:	00000d06 	br	2cbc <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    2c88:	e0bffe17 	ldw	r2,-8(fp)
    2c8c:	10800003 	ldbu	r2,0(r2)
    2c90:	11403fcc 	andi	r5,r2,255
    2c94:	e13ffc17 	ldw	r4,-16(fp)
    2c98:	0002b0c0 	call	2b0c <alt_up_rs232_write_data>
    2c9c:	1004c03a 	cmpne	r2,r2,zero
    2ca0:	10000c1e 	bne	r2,zero,2cd4 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
    2ca4:	e0bffb17 	ldw	r2,-20(fp)
    2ca8:	10800044 	addi	r2,r2,1
    2cac:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
    2cb0:	e0bffe17 	ldw	r2,-8(fp)
    2cb4:	10800044 	addi	r2,r2,1
    2cb8:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    2cbc:	e0bfff17 	ldw	r2,-4(fp)
    2cc0:	10bfffc4 	addi	r2,r2,-1
    2cc4:	e0bfff15 	stw	r2,-4(fp)
    2cc8:	e0bfff17 	ldw	r2,-4(fp)
    2ccc:	10bfffd8 	cmpnei	r2,r2,-1
    2cd0:	103fed1e 	bne	r2,zero,2c88 <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
    2cd4:	e0bffb17 	ldw	r2,-20(fp)
}
    2cd8:	e037883a 	mov	sp,fp
    2cdc:	dfc00117 	ldw	ra,4(sp)
    2ce0:	df000017 	ldw	fp,0(sp)
    2ce4:	dec00204 	addi	sp,sp,8
    2ce8:	f800283a 	ret

00002cec <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    2cec:	defffc04 	addi	sp,sp,-16
    2cf0:	dfc00315 	stw	ra,12(sp)
    2cf4:	df000215 	stw	fp,8(sp)
    2cf8:	df000204 	addi	fp,sp,8
    2cfc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    2d00:	e13fff17 	ldw	r4,-4(fp)
    2d04:	01400034 	movhi	r5,0
    2d08:	2958b304 	addi	r5,r5,25292
    2d0c:	00035040 	call	3504 <alt_find_dev>
    2d10:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    2d14:	e0bffe17 	ldw	r2,-8(fp)
}
    2d18:	e037883a 	mov	sp,fp
    2d1c:	dfc00117 	ldw	ra,4(sp)
    2d20:	df000017 	ldw	fp,0(sp)
    2d24:	dec00204 	addi	sp,sp,8
    2d28:	f800283a 	ret

00002d2c <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    2d2c:	defffc04 	addi	sp,sp,-16
    2d30:	dfc00315 	stw	ra,12(sp)
    2d34:	df000215 	stw	fp,8(sp)
    2d38:	df000204 	addi	fp,sp,8
    2d3c:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
    2d40:	e0bfff17 	ldw	r2,-4(fp)
    2d44:	10800217 	ldw	r2,8(r2)
    2d48:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
    2d4c:	00000c06 	br	2d80 <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    2d50:	e13ffe17 	ldw	r4,-8(fp)
    2d54:	01400034 	movhi	r5,0
    2d58:	29523604 	addi	r5,r5,18648
    2d5c:	00042d00 	call	42d0 <strcmp>
    2d60:	1004c03a 	cmpne	r2,r2,zero
    2d64:	1000031e 	bne	r2,zero,2d74 <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
    2d68:	e0bffe17 	ldw	r2,-8(fp)
    2d6c:	10000005 	stb	zero,0(r2)
			break;
    2d70:	00000a06 	br	2d9c <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    2d74:	e0bffe17 	ldw	r2,-8(fp)
    2d78:	10800044 	addi	r2,r2,1
    2d7c:	e0bffe15 	stw	r2,-8(fp)
    2d80:	e0bffe17 	ldw	r2,-8(fp)
    2d84:	10800003 	ldbu	r2,0(r2)
    2d88:	10803fcc 	andi	r2,r2,255
    2d8c:	1080201c 	xori	r2,r2,128
    2d90:	10bfe004 	addi	r2,r2,-128
    2d94:	1004c03a 	cmpne	r2,r2,zero
    2d98:	103fed1e 	bne	r2,zero,2d50 <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
    2d9c:	e037883a 	mov	sp,fp
    2da0:	dfc00117 	ldw	ra,4(sp)
    2da4:	df000017 	ldw	fp,0(sp)
    2da8:	dec00204 	addi	sp,sp,8
    2dac:	f800283a 	ret

00002db0 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    2db0:	defffc04 	addi	sp,sp,-16
    2db4:	dfc00315 	stw	ra,12(sp)
    2db8:	df000215 	stw	fp,8(sp)
    2dbc:	df000204 	addi	fp,sp,8
    2dc0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    2dc4:	e13fff17 	ldw	r4,-4(fp)
    2dc8:	01400034 	movhi	r5,0
    2dcc:	2958b304 	addi	r5,r5,25292
    2dd0:	00035040 	call	3504 <alt_find_dev>
    2dd4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    2dd8:	e0bffe17 	ldw	r2,-8(fp)
}
    2ddc:	e037883a 	mov	sp,fp
    2de0:	dfc00117 	ldw	ra,4(sp)
    2de4:	df000017 	ldw	fp,0(sp)
    2de8:	dec00204 	addi	sp,sp,8
    2dec:	f800283a 	ret

00002df0 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    2df0:	defff904 	addi	sp,sp,-28
    2df4:	df000615 	stw	fp,24(sp)
    2df8:	df000604 	addi	fp,sp,24
    2dfc:	e13ffb15 	stw	r4,-20(fp)
    2e00:	e1bffd15 	stw	r6,-12(fp)
    2e04:	e1fffe15 	stw	r7,-8(fp)
    2e08:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    2e0c:	e0bffb17 	ldw	r2,-20(fp)
    2e10:	10c00c17 	ldw	r3,48(r2)
    2e14:	e0bffd17 	ldw	r2,-12(fp)
    2e18:	10c0042e 	bgeu	r2,r3,2e2c <alt_up_char_buffer_draw+0x3c>
    2e1c:	e0bffb17 	ldw	r2,-20(fp)
    2e20:	10c00d17 	ldw	r3,52(r2)
    2e24:	e0bffe17 	ldw	r2,-8(fp)
    2e28:	10c00336 	bltu	r2,r3,2e38 <alt_up_char_buffer_draw+0x48>
		return -1;
    2e2c:	00bfffc4 	movi	r2,-1
    2e30:	e0bfff15 	stw	r2,-4(fp)
    2e34:	00001d06 	br	2eac <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
    2e38:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
    2e3c:	e0bffb17 	ldw	r2,-20(fp)
    2e40:	10c00f17 	ldw	r3,60(r2)
    2e44:	e0bffd17 	ldw	r2,-12(fp)
    2e48:	1886703a 	and	r3,r3,r2
    2e4c:	e0bffb17 	ldw	r2,-20(fp)
    2e50:	10800e17 	ldw	r2,56(r2)
    2e54:	1886983a 	sll	r3,r3,r2
    2e58:	e0bffa17 	ldw	r2,-24(fp)
    2e5c:	10c4b03a 	or	r2,r2,r3
    2e60:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
    2e64:	e0bffb17 	ldw	r2,-20(fp)
    2e68:	10c01117 	ldw	r3,68(r2)
    2e6c:	e0bffe17 	ldw	r2,-8(fp)
    2e70:	1886703a 	and	r3,r3,r2
    2e74:	e0bffb17 	ldw	r2,-20(fp)
    2e78:	10801017 	ldw	r2,64(r2)
    2e7c:	1886983a 	sll	r3,r3,r2
    2e80:	e0bffa17 	ldw	r2,-24(fp)
    2e84:	10c4b03a 	or	r2,r2,r3
    2e88:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    2e8c:	e0bffb17 	ldw	r2,-20(fp)
    2e90:	10800b17 	ldw	r2,44(r2)
    2e94:	1007883a 	mov	r3,r2
    2e98:	e0bffa17 	ldw	r2,-24(fp)
    2e9c:	1885883a 	add	r2,r3,r2
    2ea0:	e0fffc03 	ldbu	r3,-16(fp)
    2ea4:	10c00025 	stbio	r3,0(r2)

	return 0;
    2ea8:	e03fff15 	stw	zero,-4(fp)
    2eac:	e0bfff17 	ldw	r2,-4(fp)
}
    2eb0:	e037883a 	mov	sp,fp
    2eb4:	df000017 	ldw	fp,0(sp)
    2eb8:	dec00104 	addi	sp,sp,4
    2ebc:	f800283a 	ret

00002ec0 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
    2ec0:	defff904 	addi	sp,sp,-28
    2ec4:	df000615 	stw	fp,24(sp)
    2ec8:	df000604 	addi	fp,sp,24
    2ecc:	e13ffb15 	stw	r4,-20(fp)
    2ed0:	e17ffc15 	stw	r5,-16(fp)
    2ed4:	e1bffd15 	stw	r6,-12(fp)
    2ed8:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    2edc:	e0bffb17 	ldw	r2,-20(fp)
    2ee0:	10c00c17 	ldw	r3,48(r2)
    2ee4:	e0bffd17 	ldw	r2,-12(fp)
    2ee8:	10c0042e 	bgeu	r2,r3,2efc <alt_up_char_buffer_string+0x3c>
    2eec:	e0bffb17 	ldw	r2,-20(fp)
    2ef0:	10c00d17 	ldw	r3,52(r2)
    2ef4:	e0bffe17 	ldw	r2,-8(fp)
    2ef8:	10c00336 	bltu	r2,r3,2f08 <alt_up_char_buffer_string+0x48>
		return -1;
    2efc:	00bfffc4 	movi	r2,-1
    2f00:	e0bfff15 	stw	r2,-4(fp)
    2f04:	00002e06 	br	2fc0 <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
    2f08:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
    2f0c:	e0bffb17 	ldw	r2,-20(fp)
    2f10:	10801017 	ldw	r2,64(r2)
    2f14:	1007883a 	mov	r3,r2
    2f18:	e0bffe17 	ldw	r2,-8(fp)
    2f1c:	10c6983a 	sll	r3,r2,r3
    2f20:	e0bffd17 	ldw	r2,-12(fp)
    2f24:	1885883a 	add	r2,r3,r2
    2f28:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
    2f2c:	00001c06 	br	2fa0 <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    2f30:	e0bffb17 	ldw	r2,-20(fp)
    2f34:	10800b17 	ldw	r2,44(r2)
    2f38:	1007883a 	mov	r3,r2
    2f3c:	e0bffa17 	ldw	r2,-24(fp)
    2f40:	1889883a 	add	r4,r3,r2
    2f44:	e0bffc17 	ldw	r2,-16(fp)
    2f48:	10800003 	ldbu	r2,0(r2)
    2f4c:	10c03fcc 	andi	r3,r2,255
    2f50:	18c0201c 	xori	r3,r3,128
    2f54:	18ffe004 	addi	r3,r3,-128
    2f58:	2005883a 	mov	r2,r4
    2f5c:	10c00025 	stbio	r3,0(r2)
		++ptr;
    2f60:	e0bffc17 	ldw	r2,-16(fp)
    2f64:	10800044 	addi	r2,r2,1
    2f68:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
    2f6c:	e0bffd17 	ldw	r2,-12(fp)
    2f70:	10800044 	addi	r2,r2,1
    2f74:	e0bffd15 	stw	r2,-12(fp)
    2f78:	e0bffb17 	ldw	r2,-20(fp)
    2f7c:	10c00c17 	ldw	r3,48(r2)
    2f80:	e0bffd17 	ldw	r2,-12(fp)
    2f84:	10c00336 	bltu	r2,r3,2f94 <alt_up_char_buffer_string+0xd4>
			return -1;
    2f88:	00bfffc4 	movi	r2,-1
    2f8c:	e0bfff15 	stw	r2,-4(fp)
    2f90:	00000b06 	br	2fc0 <alt_up_char_buffer_string+0x100>
		++offset;
    2f94:	e0bffa17 	ldw	r2,-24(fp)
    2f98:	10800044 	addi	r2,r2,1
    2f9c:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    2fa0:	e0bffc17 	ldw	r2,-16(fp)
    2fa4:	10800003 	ldbu	r2,0(r2)
    2fa8:	10803fcc 	andi	r2,r2,255
    2fac:	1080201c 	xori	r2,r2,128
    2fb0:	10bfe004 	addi	r2,r2,-128
    2fb4:	1004c03a 	cmpne	r2,r2,zero
    2fb8:	103fdd1e 	bne	r2,zero,2f30 <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
    2fbc:	e03fff15 	stw	zero,-4(fp)
    2fc0:	e0bfff17 	ldw	r2,-4(fp)
}
    2fc4:	e037883a 	mov	sp,fp
    2fc8:	df000017 	ldw	fp,0(sp)
    2fcc:	dec00104 	addi	sp,sp,4
    2fd0:	f800283a 	ret

00002fd4 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
    2fd4:	defffe04 	addi	sp,sp,-8
    2fd8:	df000115 	stw	fp,4(sp)
    2fdc:	df000104 	addi	fp,sp,4
    2fe0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    2fe4:	e0bfff17 	ldw	r2,-4(fp)
    2fe8:	10800a17 	ldw	r2,40(r2)
    2fec:	10800084 	addi	r2,r2,2
    2ff0:	1007883a 	mov	r3,r2
    2ff4:	00800044 	movi	r2,1
    2ff8:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    2ffc:	e0bfff17 	ldw	r2,-4(fp)
    3000:	10800a17 	ldw	r2,40(r2)
    3004:	10800084 	addi	r2,r2,2
    3008:	10800023 	ldbuio	r2,0(r2)
    300c:	1080004c 	andi	r2,r2,1
    3010:	10803fcc 	andi	r2,r2,255
    3014:	1004c03a 	cmpne	r2,r2,zero
    3018:	103ff81e 	bne	r2,zero,2ffc <alt_up_char_buffer_clear+0x28>
	return 0;
    301c:	0005883a 	mov	r2,zero
}
    3020:	e037883a 	mov	sp,fp
    3024:	df000017 	ldw	fp,0(sp)
    3028:	dec00104 	addi	sp,sp,4
    302c:	f800283a 	ret

00003030 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    3030:	defff404 	addi	sp,sp,-48
    3034:	df000b15 	stw	fp,44(sp)
    3038:	df000b04 	addi	fp,sp,44
    303c:	e13ffb15 	stw	r4,-20(fp)
    3040:	e17ffc15 	stw	r5,-16(fp)
    3044:	e1bffd15 	stw	r6,-12(fp)
    3048:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    304c:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    3050:	00800034 	movhi	r2,0
    3054:	109f3b04 	addi	r2,r2,31980
    3058:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    305c:	1005003a 	cmpeq	r2,r2,zero
    3060:	1000411e 	bne	r2,zero,3168 <alt_alarm_start+0x138>
  {
    if (alarm)
    3064:	e0bffb17 	ldw	r2,-20(fp)
    3068:	1005003a 	cmpeq	r2,r2,zero
    306c:	10003b1e 	bne	r2,zero,315c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    3070:	e0fffb17 	ldw	r3,-20(fp)
    3074:	e0bffd17 	ldw	r2,-12(fp)
    3078:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    307c:	e0fffb17 	ldw	r3,-20(fp)
    3080:	e0bffe17 	ldw	r2,-8(fp)
    3084:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3088:	0005303a 	rdctl	r2,status
    308c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3090:	e0fff817 	ldw	r3,-32(fp)
    3094:	00bfff84 	movi	r2,-2
    3098:	1884703a 	and	r2,r3,r2
    309c:	1001703a 	wrctl	status,r2
  
  return context;
    30a0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    30a4:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    30a8:	00800034 	movhi	r2,0
    30ac:	109f3c04 	addi	r2,r2,31984
    30b0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    30b4:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    30b8:	e0fffc17 	ldw	r3,-16(fp)
    30bc:	e0bff917 	ldw	r2,-28(fp)
    30c0:	1885883a 	add	r2,r3,r2
    30c4:	10c00044 	addi	r3,r2,1
    30c8:	e0bffb17 	ldw	r2,-20(fp)
    30cc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    30d0:	e0bffb17 	ldw	r2,-20(fp)
    30d4:	10c00217 	ldw	r3,8(r2)
    30d8:	e0bff917 	ldw	r2,-28(fp)
    30dc:	1880042e 	bgeu	r3,r2,30f0 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    30e0:	e0fffb17 	ldw	r3,-20(fp)
    30e4:	00800044 	movi	r2,1
    30e8:	18800405 	stb	r2,16(r3)
    30ec:	00000206 	br	30f8 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    30f0:	e0bffb17 	ldw	r2,-20(fp)
    30f4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    30f8:	e0fffb17 	ldw	r3,-20(fp)
    30fc:	00800034 	movhi	r2,0
    3100:	1098b804 	addi	r2,r2,25312
    3104:	e0bff615 	stw	r2,-40(fp)
    3108:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    310c:	e0fff717 	ldw	r3,-36(fp)
    3110:	e0bff617 	ldw	r2,-40(fp)
    3114:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    3118:	e0bff617 	ldw	r2,-40(fp)
    311c:	10c00017 	ldw	r3,0(r2)
    3120:	e0bff717 	ldw	r2,-36(fp)
    3124:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    3128:	e0bff617 	ldw	r2,-40(fp)
    312c:	10c00017 	ldw	r3,0(r2)
    3130:	e0bff717 	ldw	r2,-36(fp)
    3134:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    3138:	e0fff617 	ldw	r3,-40(fp)
    313c:	e0bff717 	ldw	r2,-36(fp)
    3140:	18800015 	stw	r2,0(r3)
    3144:	e0bffa17 	ldw	r2,-24(fp)
    3148:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    314c:	e0bff517 	ldw	r2,-44(fp)
    3150:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    3154:	e03fff15 	stw	zero,-4(fp)
    3158:	00000506 	br	3170 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    315c:	00bffa84 	movi	r2,-22
    3160:	e0bfff15 	stw	r2,-4(fp)
    3164:	00000206 	br	3170 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    3168:	00bfde84 	movi	r2,-134
    316c:	e0bfff15 	stw	r2,-4(fp)
    3170:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    3174:	e037883a 	mov	sp,fp
    3178:	df000017 	ldw	fp,0(sp)
    317c:	dec00104 	addi	sp,sp,4
    3180:	f800283a 	ret

00003184 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    3184:	defff804 	addi	sp,sp,-32
    3188:	dfc00715 	stw	ra,28(sp)
    318c:	df000615 	stw	fp,24(sp)
    3190:	df000604 	addi	fp,sp,24
    3194:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    3198:	e0bffc17 	ldw	r2,-16(fp)
    319c:	1004803a 	cmplt	r2,r2,zero
    31a0:	1000081e 	bne	r2,zero,31c4 <close+0x40>
    31a4:	e0bffc17 	ldw	r2,-16(fp)
    31a8:	10800324 	muli	r2,r2,12
    31ac:	1007883a 	mov	r3,r2
    31b0:	00800034 	movhi	r2,0
    31b4:	10975004 	addi	r2,r2,23872
    31b8:	1887883a 	add	r3,r3,r2
    31bc:	e0ffff15 	stw	r3,-4(fp)
    31c0:	00000106 	br	31c8 <close+0x44>
    31c4:	e03fff15 	stw	zero,-4(fp)
    31c8:	e0bfff17 	ldw	r2,-4(fp)
    31cc:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    31d0:	e0bffb17 	ldw	r2,-20(fp)
    31d4:	1005003a 	cmpeq	r2,r2,zero
    31d8:	10001d1e 	bne	r2,zero,3250 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    31dc:	e0bffb17 	ldw	r2,-20(fp)
    31e0:	10800017 	ldw	r2,0(r2)
    31e4:	10800417 	ldw	r2,16(r2)
    31e8:	1005003a 	cmpeq	r2,r2,zero
    31ec:	1000071e 	bne	r2,zero,320c <close+0x88>
    31f0:	e0bffb17 	ldw	r2,-20(fp)
    31f4:	10800017 	ldw	r2,0(r2)
    31f8:	10800417 	ldw	r2,16(r2)
    31fc:	e13ffb17 	ldw	r4,-20(fp)
    3200:	103ee83a 	callr	r2
    3204:	e0bffe15 	stw	r2,-8(fp)
    3208:	00000106 	br	3210 <close+0x8c>
    320c:	e03ffe15 	stw	zero,-8(fp)
    3210:	e0bffe17 	ldw	r2,-8(fp)
    3214:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    3218:	e13ffc17 	ldw	r4,-16(fp)
    321c:	0003b880 	call	3b88 <alt_release_fd>
    if (rval < 0)
    3220:	e0bffa17 	ldw	r2,-24(fp)
    3224:	1004403a 	cmpge	r2,r2,zero
    3228:	1000071e 	bne	r2,zero,3248 <close+0xc4>
    {
      ALT_ERRNO = -rval;
    322c:	00032800 	call	3280 <alt_get_errno>
    3230:	e0fffa17 	ldw	r3,-24(fp)
    3234:	00c7c83a 	sub	r3,zero,r3
    3238:	10c00015 	stw	r3,0(r2)
      return -1;
    323c:	00bfffc4 	movi	r2,-1
    3240:	e0bffd15 	stw	r2,-12(fp)
    3244:	00000806 	br	3268 <close+0xe4>
    }
    return 0;
    3248:	e03ffd15 	stw	zero,-12(fp)
    324c:	00000606 	br	3268 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3250:	00032800 	call	3280 <alt_get_errno>
    3254:	1007883a 	mov	r3,r2
    3258:	00801444 	movi	r2,81
    325c:	18800015 	stw	r2,0(r3)
    return -1;
    3260:	00bfffc4 	movi	r2,-1
    3264:	e0bffd15 	stw	r2,-12(fp)
    3268:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    326c:	e037883a 	mov	sp,fp
    3270:	dfc00117 	ldw	ra,4(sp)
    3274:	df000017 	ldw	fp,0(sp)
    3278:	dec00204 	addi	sp,sp,8
    327c:	f800283a 	ret

00003280 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3280:	defffd04 	addi	sp,sp,-12
    3284:	dfc00215 	stw	ra,8(sp)
    3288:	df000115 	stw	fp,4(sp)
    328c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    3290:	00800034 	movhi	r2,0
    3294:	1098b604 	addi	r2,r2,25304
    3298:	10800017 	ldw	r2,0(r2)
    329c:	1005003a 	cmpeq	r2,r2,zero
    32a0:	1000061e 	bne	r2,zero,32bc <alt_get_errno+0x3c>
    32a4:	00800034 	movhi	r2,0
    32a8:	1098b604 	addi	r2,r2,25304
    32ac:	10800017 	ldw	r2,0(r2)
    32b0:	103ee83a 	callr	r2
    32b4:	e0bfff15 	stw	r2,-4(fp)
    32b8:	00000306 	br	32c8 <alt_get_errno+0x48>
    32bc:	00800034 	movhi	r2,0
    32c0:	109f3d04 	addi	r2,r2,31988
    32c4:	e0bfff15 	stw	r2,-4(fp)
    32c8:	e0bfff17 	ldw	r2,-4(fp)
}
    32cc:	e037883a 	mov	sp,fp
    32d0:	dfc00117 	ldw	ra,4(sp)
    32d4:	df000017 	ldw	fp,0(sp)
    32d8:	dec00204 	addi	sp,sp,8
    32dc:	f800283a 	ret

000032e0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    32e0:	deffff04 	addi	sp,sp,-4
    32e4:	df000015 	stw	fp,0(sp)
    32e8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    32ec:	e037883a 	mov	sp,fp
    32f0:	df000017 	ldw	fp,0(sp)
    32f4:	dec00104 	addi	sp,sp,4
    32f8:	f800283a 	ret

000032fc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    32fc:	defffc04 	addi	sp,sp,-16
    3300:	df000315 	stw	fp,12(sp)
    3304:	df000304 	addi	fp,sp,12
    3308:	e13ffd15 	stw	r4,-12(fp)
    330c:	e17ffe15 	stw	r5,-8(fp)
    3310:	e1bfff15 	stw	r6,-4(fp)
  return len;
    3314:	e0bfff17 	ldw	r2,-4(fp)
}
    3318:	e037883a 	mov	sp,fp
    331c:	df000017 	ldw	fp,0(sp)
    3320:	dec00104 	addi	sp,sp,4
    3324:	f800283a 	ret

00003328 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    3328:	defff904 	addi	sp,sp,-28
    332c:	dfc00615 	stw	ra,24(sp)
    3330:	df000515 	stw	fp,20(sp)
    3334:	df000504 	addi	fp,sp,20
    3338:	e13ffd15 	stw	r4,-12(fp)
    333c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    3340:	e0bffd17 	ldw	r2,-12(fp)
    3344:	1005003a 	cmpeq	r2,r2,zero
    3348:	1000041e 	bne	r2,zero,335c <alt_dev_llist_insert+0x34>
    334c:	e0bffd17 	ldw	r2,-12(fp)
    3350:	10800217 	ldw	r2,8(r2)
    3354:	1004c03a 	cmpne	r2,r2,zero
    3358:	1000071e 	bne	r2,zero,3378 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    335c:	00033dc0 	call	33dc <alt_get_errno>
    3360:	1007883a 	mov	r3,r2
    3364:	00800584 	movi	r2,22
    3368:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    336c:	00bffa84 	movi	r2,-22
    3370:	e0bfff15 	stw	r2,-4(fp)
    3374:	00001306 	br	33c4 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    3378:	e0fffd17 	ldw	r3,-12(fp)
    337c:	e0bffe17 	ldw	r2,-8(fp)
    3380:	e0bffb15 	stw	r2,-20(fp)
    3384:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    3388:	e0fffc17 	ldw	r3,-16(fp)
    338c:	e0bffb17 	ldw	r2,-20(fp)
    3390:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    3394:	e0bffb17 	ldw	r2,-20(fp)
    3398:	10c00017 	ldw	r3,0(r2)
    339c:	e0bffc17 	ldw	r2,-16(fp)
    33a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    33a4:	e0bffb17 	ldw	r2,-20(fp)
    33a8:	10c00017 	ldw	r3,0(r2)
    33ac:	e0bffc17 	ldw	r2,-16(fp)
    33b0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    33b4:	e0fffb17 	ldw	r3,-20(fp)
    33b8:	e0bffc17 	ldw	r2,-16(fp)
    33bc:	18800015 	stw	r2,0(r3)

  return 0;  
    33c0:	e03fff15 	stw	zero,-4(fp)
    33c4:	e0bfff17 	ldw	r2,-4(fp)
}
    33c8:	e037883a 	mov	sp,fp
    33cc:	dfc00117 	ldw	ra,4(sp)
    33d0:	df000017 	ldw	fp,0(sp)
    33d4:	dec00204 	addi	sp,sp,8
    33d8:	f800283a 	ret

000033dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    33dc:	defffd04 	addi	sp,sp,-12
    33e0:	dfc00215 	stw	ra,8(sp)
    33e4:	df000115 	stw	fp,4(sp)
    33e8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    33ec:	00800034 	movhi	r2,0
    33f0:	1098b604 	addi	r2,r2,25304
    33f4:	10800017 	ldw	r2,0(r2)
    33f8:	1005003a 	cmpeq	r2,r2,zero
    33fc:	1000061e 	bne	r2,zero,3418 <alt_get_errno+0x3c>
    3400:	00800034 	movhi	r2,0
    3404:	1098b604 	addi	r2,r2,25304
    3408:	10800017 	ldw	r2,0(r2)
    340c:	103ee83a 	callr	r2
    3410:	e0bfff15 	stw	r2,-4(fp)
    3414:	00000306 	br	3424 <alt_get_errno+0x48>
    3418:	00800034 	movhi	r2,0
    341c:	109f3d04 	addi	r2,r2,31988
    3420:	e0bfff15 	stw	r2,-4(fp)
    3424:	e0bfff17 	ldw	r2,-4(fp)
}
    3428:	e037883a 	mov	sp,fp
    342c:	dfc00117 	ldw	ra,4(sp)
    3430:	df000017 	ldw	fp,0(sp)
    3434:	dec00204 	addi	sp,sp,8
    3438:	f800283a 	ret

0000343c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    343c:	defffd04 	addi	sp,sp,-12
    3440:	dfc00215 	stw	ra,8(sp)
    3444:	df000115 	stw	fp,4(sp)
    3448:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    344c:	00bfff04 	movi	r2,-4
    3450:	00c00034 	movhi	r3,0
    3454:	18d1d304 	addi	r3,r3,18252
    3458:	1885883a 	add	r2,r3,r2
    345c:	e0bfff15 	stw	r2,-4(fp)
    3460:	00000606 	br	347c <_do_ctors+0x40>
        (*ctor) (); 
    3464:	e0bfff17 	ldw	r2,-4(fp)
    3468:	10800017 	ldw	r2,0(r2)
    346c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    3470:	e0bfff17 	ldw	r2,-4(fp)
    3474:	10bfff04 	addi	r2,r2,-4
    3478:	e0bfff15 	stw	r2,-4(fp)
    347c:	e0ffff17 	ldw	r3,-4(fp)
    3480:	00800034 	movhi	r2,0
    3484:	1091d204 	addi	r2,r2,18248
    3488:	18bff62e 	bgeu	r3,r2,3464 <_do_ctors+0x28>
        (*ctor) (); 
}
    348c:	e037883a 	mov	sp,fp
    3490:	dfc00117 	ldw	ra,4(sp)
    3494:	df000017 	ldw	fp,0(sp)
    3498:	dec00204 	addi	sp,sp,8
    349c:	f800283a 	ret

000034a0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    34a0:	defffd04 	addi	sp,sp,-12
    34a4:	dfc00215 	stw	ra,8(sp)
    34a8:	df000115 	stw	fp,4(sp)
    34ac:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    34b0:	00bfff04 	movi	r2,-4
    34b4:	00c00034 	movhi	r3,0
    34b8:	18d1d304 	addi	r3,r3,18252
    34bc:	1885883a 	add	r2,r3,r2
    34c0:	e0bfff15 	stw	r2,-4(fp)
    34c4:	00000606 	br	34e0 <_do_dtors+0x40>
        (*dtor) (); 
    34c8:	e0bfff17 	ldw	r2,-4(fp)
    34cc:	10800017 	ldw	r2,0(r2)
    34d0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    34d4:	e0bfff17 	ldw	r2,-4(fp)
    34d8:	10bfff04 	addi	r2,r2,-4
    34dc:	e0bfff15 	stw	r2,-4(fp)
    34e0:	e0ffff17 	ldw	r3,-4(fp)
    34e4:	00800034 	movhi	r2,0
    34e8:	1091d304 	addi	r2,r2,18252
    34ec:	18bff62e 	bgeu	r3,r2,34c8 <_do_dtors+0x28>
        (*dtor) (); 
}
    34f0:	e037883a 	mov	sp,fp
    34f4:	dfc00117 	ldw	ra,4(sp)
    34f8:	df000017 	ldw	fp,0(sp)
    34fc:	dec00204 	addi	sp,sp,8
    3500:	f800283a 	ret

00003504 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    3504:	defff904 	addi	sp,sp,-28
    3508:	dfc00615 	stw	ra,24(sp)
    350c:	df000515 	stw	fp,20(sp)
    3510:	df000504 	addi	fp,sp,20
    3514:	e13ffd15 	stw	r4,-12(fp)
    3518:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    351c:	e0bffe17 	ldw	r2,-8(fp)
    3520:	10800017 	ldw	r2,0(r2)
    3524:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    3528:	e13ffd17 	ldw	r4,-12(fp)
    352c:	000438c0 	call	438c <strlen>
    3530:	10800044 	addi	r2,r2,1
    3534:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    3538:	00000d06 	br	3570 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    353c:	e0bffc17 	ldw	r2,-16(fp)
    3540:	11000217 	ldw	r4,8(r2)
    3544:	e1bffb17 	ldw	r6,-20(fp)
    3548:	e17ffd17 	ldw	r5,-12(fp)
    354c:	00041bc0 	call	41bc <memcmp>
    3550:	1004c03a 	cmpne	r2,r2,zero
    3554:	1000031e 	bne	r2,zero,3564 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    3558:	e0bffc17 	ldw	r2,-16(fp)
    355c:	e0bfff15 	stw	r2,-4(fp)
    3560:	00000706 	br	3580 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    3564:	e0bffc17 	ldw	r2,-16(fp)
    3568:	10800017 	ldw	r2,0(r2)
    356c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    3570:	e0fffe17 	ldw	r3,-8(fp)
    3574:	e0bffc17 	ldw	r2,-16(fp)
    3578:	10fff01e 	bne	r2,r3,353c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    357c:	e03fff15 	stw	zero,-4(fp)
    3580:	e0bfff17 	ldw	r2,-4(fp)
}
    3584:	e037883a 	mov	sp,fp
    3588:	dfc00117 	ldw	ra,4(sp)
    358c:	df000017 	ldw	fp,0(sp)
    3590:	dec00204 	addi	sp,sp,8
    3594:	f800283a 	ret

00003598 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    3598:	defffe04 	addi	sp,sp,-8
    359c:	dfc00115 	stw	ra,4(sp)
    35a0:	df000015 	stw	fp,0(sp)
    35a4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    35a8:	0009883a 	mov	r4,zero
    35ac:	01440004 	movi	r5,4096
    35b0:	00040e00 	call	40e0 <alt_icache_flush>
#endif
}
    35b4:	e037883a 	mov	sp,fp
    35b8:	dfc00117 	ldw	ra,4(sp)
    35bc:	df000017 	ldw	fp,0(sp)
    35c0:	dec00204 	addi	sp,sp,8
    35c4:	f800283a 	ret

000035c8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    35c8:	defff904 	addi	sp,sp,-28
    35cc:	dfc00615 	stw	ra,24(sp)
    35d0:	df000515 	stw	fp,20(sp)
    35d4:	df000504 	addi	fp,sp,20
    35d8:	e13ffc15 	stw	r4,-16(fp)
    35dc:	e17ffd15 	stw	r5,-12(fp)
    35e0:	e1bffe15 	stw	r6,-8(fp)
    35e4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    35e8:	e13ffd17 	ldw	r4,-12(fp)
    35ec:	e17ffe17 	ldw	r5,-8(fp)
    35f0:	e1bfff17 	ldw	r6,-4(fp)
    35f4:	00039a00 	call	39a0 <open>
    35f8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    35fc:	e0bffb17 	ldw	r2,-20(fp)
    3600:	1004803a 	cmplt	r2,r2,zero
    3604:	10001c1e 	bne	r2,zero,3678 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    3608:	e0bffb17 	ldw	r2,-20(fp)
    360c:	00c00034 	movhi	r3,0
    3610:	18d75004 	addi	r3,r3,23872
    3614:	10800324 	muli	r2,r2,12
    3618:	10c5883a 	add	r2,r2,r3
    361c:	10c00017 	ldw	r3,0(r2)
    3620:	e0bffc17 	ldw	r2,-16(fp)
    3624:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    3628:	e0bffb17 	ldw	r2,-20(fp)
    362c:	00c00034 	movhi	r3,0
    3630:	18d75004 	addi	r3,r3,23872
    3634:	10800324 	muli	r2,r2,12
    3638:	10c5883a 	add	r2,r2,r3
    363c:	10800104 	addi	r2,r2,4
    3640:	10c00017 	ldw	r3,0(r2)
    3644:	e0bffc17 	ldw	r2,-16(fp)
    3648:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    364c:	e0bffb17 	ldw	r2,-20(fp)
    3650:	00c00034 	movhi	r3,0
    3654:	18d75004 	addi	r3,r3,23872
    3658:	10800324 	muli	r2,r2,12
    365c:	10c5883a 	add	r2,r2,r3
    3660:	10800204 	addi	r2,r2,8
    3664:	10c00017 	ldw	r3,0(r2)
    3668:	e0bffc17 	ldw	r2,-16(fp)
    366c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    3670:	e13ffb17 	ldw	r4,-20(fp)
    3674:	0003b880 	call	3b88 <alt_release_fd>
  }
} 
    3678:	e037883a 	mov	sp,fp
    367c:	dfc00117 	ldw	ra,4(sp)
    3680:	df000017 	ldw	fp,0(sp)
    3684:	dec00204 	addi	sp,sp,8
    3688:	f800283a 	ret

0000368c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    368c:	defffb04 	addi	sp,sp,-20
    3690:	dfc00415 	stw	ra,16(sp)
    3694:	df000315 	stw	fp,12(sp)
    3698:	df000304 	addi	fp,sp,12
    369c:	e13ffd15 	stw	r4,-12(fp)
    36a0:	e17ffe15 	stw	r5,-8(fp)
    36a4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    36a8:	01000034 	movhi	r4,0
    36ac:	21175304 	addi	r4,r4,23884
    36b0:	e17ffd17 	ldw	r5,-12(fp)
    36b4:	01800044 	movi	r6,1
    36b8:	01c07fc4 	movi	r7,511
    36bc:	00035c80 	call	35c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    36c0:	01000034 	movhi	r4,0
    36c4:	21175004 	addi	r4,r4,23872
    36c8:	e17ffe17 	ldw	r5,-8(fp)
    36cc:	000d883a 	mov	r6,zero
    36d0:	01c07fc4 	movi	r7,511
    36d4:	00035c80 	call	35c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    36d8:	01000034 	movhi	r4,0
    36dc:	21175604 	addi	r4,r4,23896
    36e0:	e17fff17 	ldw	r5,-4(fp)
    36e4:	01800044 	movi	r6,1
    36e8:	01c07fc4 	movi	r7,511
    36ec:	00035c80 	call	35c8 <alt_open_fd>
}  
    36f0:	e037883a 	mov	sp,fp
    36f4:	dfc00117 	ldw	ra,4(sp)
    36f8:	df000017 	ldw	fp,0(sp)
    36fc:	dec00204 	addi	sp,sp,8
    3700:	f800283a 	ret

00003704 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    3704:	deffef04 	addi	sp,sp,-68
    3708:	df001015 	stw	fp,64(sp)
    370c:	df001004 	addi	fp,sp,64
    3710:	e13ffc15 	stw	r4,-16(fp)
    3714:	e17ffd15 	stw	r5,-12(fp)
    3718:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
    371c:	00bffa84 	movi	r2,-22
    3720:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    3724:	e0bffc17 	ldw	r2,-16(fp)
    3728:	10800828 	cmpgeui	r2,r2,32
    372c:	1000601e 	bne	r2,zero,38b0 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3730:	0005303a 	rdctl	r2,status
    3734:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3738:	e0fff917 	ldw	r3,-28(fp)
    373c:	00bfff84 	movi	r2,-2
    3740:	1884703a 	and	r2,r3,r2
    3744:	1001703a 	wrctl	status,r2
  
  return context;
    3748:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    374c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
    3750:	e0bffc17 	ldw	r2,-16(fp)
    3754:	00c00034 	movhi	r3,0
    3758:	18df3e04 	addi	r3,r3,31992
    375c:	100490fa 	slli	r2,r2,3
    3760:	10c7883a 	add	r3,r2,r3
    3764:	e0bffe17 	ldw	r2,-8(fp)
    3768:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
    376c:	e0bffc17 	ldw	r2,-16(fp)
    3770:	00c00034 	movhi	r3,0
    3774:	18df3e04 	addi	r3,r3,31992
    3778:	100490fa 	slli	r2,r2,3
    377c:	10c5883a 	add	r2,r2,r3
    3780:	10c00104 	addi	r3,r2,4
    3784:	e0bffd17 	ldw	r2,-12(fp)
    3788:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    378c:	e0bffe17 	ldw	r2,-8(fp)
    3790:	1005003a 	cmpeq	r2,r2,zero
    3794:	1000201e 	bne	r2,zero,3818 <alt_irq_register+0x114>
    3798:	e0bffc17 	ldw	r2,-16(fp)
    379c:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    37a0:	0005303a 	rdctl	r2,status
    37a4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    37a8:	e0fff617 	ldw	r3,-40(fp)
    37ac:	00bfff84 	movi	r2,-2
    37b0:	1884703a 	and	r2,r3,r2
    37b4:	1001703a 	wrctl	status,r2
  
  return context;
    37b8:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    37bc:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    37c0:	e0fff717 	ldw	r3,-36(fp)
    37c4:	00800044 	movi	r2,1
    37c8:	10c4983a 	sll	r2,r2,r3
    37cc:	1007883a 	mov	r3,r2
    37d0:	00800034 	movhi	r2,0
    37d4:	109f3a04 	addi	r2,r2,31976
    37d8:	10800017 	ldw	r2,0(r2)
    37dc:	1886b03a 	or	r3,r3,r2
    37e0:	00800034 	movhi	r2,0
    37e4:	109f3a04 	addi	r2,r2,31976
    37e8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    37ec:	00800034 	movhi	r2,0
    37f0:	109f3a04 	addi	r2,r2,31976
    37f4:	10800017 	ldw	r2,0(r2)
    37f8:	100170fa 	wrctl	ienable,r2
    37fc:	e0bff817 	ldw	r2,-32(fp)
    3800:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3804:	e0bff517 	ldw	r2,-44(fp)
    3808:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    380c:	0005883a 	mov	r2,zero
    3810:	e0bfff15 	stw	r2,-4(fp)
    3814:	00002006 	br	3898 <alt_irq_register+0x194>
    3818:	e0bffc17 	ldw	r2,-16(fp)
    381c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3820:	0005303a 	rdctl	r2,status
    3824:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3828:	e0fff217 	ldw	r3,-56(fp)
    382c:	00bfff84 	movi	r2,-2
    3830:	1884703a 	and	r2,r3,r2
    3834:	1001703a 	wrctl	status,r2
  
  return context;
    3838:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    383c:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
    3840:	e0fff317 	ldw	r3,-52(fp)
    3844:	00800044 	movi	r2,1
    3848:	10c4983a 	sll	r2,r2,r3
    384c:	0084303a 	nor	r2,zero,r2
    3850:	1007883a 	mov	r3,r2
    3854:	00800034 	movhi	r2,0
    3858:	109f3a04 	addi	r2,r2,31976
    385c:	10800017 	ldw	r2,0(r2)
    3860:	1886703a 	and	r3,r3,r2
    3864:	00800034 	movhi	r2,0
    3868:	109f3a04 	addi	r2,r2,31976
    386c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    3870:	00800034 	movhi	r2,0
    3874:	109f3a04 	addi	r2,r2,31976
    3878:	10800017 	ldw	r2,0(r2)
    387c:	100170fa 	wrctl	ienable,r2
    3880:	e0bff417 	ldw	r2,-48(fp)
    3884:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3888:	e0bff117 	ldw	r2,-60(fp)
    388c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    3890:	0005883a 	mov	r2,zero
    3894:	e0bfff15 	stw	r2,-4(fp)
    3898:	e0bfff17 	ldw	r2,-4(fp)
    389c:	e0bffb15 	stw	r2,-20(fp)
    38a0:	e0bffa17 	ldw	r2,-24(fp)
    38a4:	e0bff015 	stw	r2,-64(fp)
    38a8:	e0bff017 	ldw	r2,-64(fp)
    38ac:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    38b0:	e0bffb17 	ldw	r2,-20(fp)
}
    38b4:	e037883a 	mov	sp,fp
    38b8:	df000017 	ldw	fp,0(sp)
    38bc:	dec00104 	addi	sp,sp,4
    38c0:	f800283a 	ret

000038c4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    38c4:	defffc04 	addi	sp,sp,-16
    38c8:	df000315 	stw	fp,12(sp)
    38cc:	df000304 	addi	fp,sp,12
    38d0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    38d4:	e0bffe17 	ldw	r2,-8(fp)
    38d8:	10800217 	ldw	r2,8(r2)
    38dc:	10d00034 	orhi	r3,r2,16384
    38e0:	e0bffe17 	ldw	r2,-8(fp)
    38e4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    38e8:	e03ffd15 	stw	zero,-12(fp)
    38ec:	00002006 	br	3970 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    38f0:	e0bffd17 	ldw	r2,-12(fp)
    38f4:	00c00034 	movhi	r3,0
    38f8:	18d75004 	addi	r3,r3,23872
    38fc:	10800324 	muli	r2,r2,12
    3900:	10c5883a 	add	r2,r2,r3
    3904:	10c00017 	ldw	r3,0(r2)
    3908:	e0bffe17 	ldw	r2,-8(fp)
    390c:	10800017 	ldw	r2,0(r2)
    3910:	1880141e 	bne	r3,r2,3964 <alt_file_locked+0xa0>
    3914:	e0bffd17 	ldw	r2,-12(fp)
    3918:	00c00034 	movhi	r3,0
    391c:	18d75004 	addi	r3,r3,23872
    3920:	10800324 	muli	r2,r2,12
    3924:	10c5883a 	add	r2,r2,r3
    3928:	10800204 	addi	r2,r2,8
    392c:	10800017 	ldw	r2,0(r2)
    3930:	1004403a 	cmpge	r2,r2,zero
    3934:	10000b1e 	bne	r2,zero,3964 <alt_file_locked+0xa0>
    3938:	e0bffd17 	ldw	r2,-12(fp)
    393c:	10800324 	muli	r2,r2,12
    3940:	1007883a 	mov	r3,r2
    3944:	00800034 	movhi	r2,0
    3948:	10975004 	addi	r2,r2,23872
    394c:	1887883a 	add	r3,r3,r2
    3950:	e0bffe17 	ldw	r2,-8(fp)
    3954:	18800326 	beq	r3,r2,3964 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    3958:	00bffcc4 	movi	r2,-13
    395c:	e0bfff15 	stw	r2,-4(fp)
    3960:	00000a06 	br	398c <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    3964:	e0bffd17 	ldw	r2,-12(fp)
    3968:	10800044 	addi	r2,r2,1
    396c:	e0bffd15 	stw	r2,-12(fp)
    3970:	00800034 	movhi	r2,0
    3974:	1098b504 	addi	r2,r2,25300
    3978:	10800017 	ldw	r2,0(r2)
    397c:	1007883a 	mov	r3,r2
    3980:	e0bffd17 	ldw	r2,-12(fp)
    3984:	18bfda2e 	bgeu	r3,r2,38f0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    3988:	e03fff15 	stw	zero,-4(fp)
    398c:	e0bfff17 	ldw	r2,-4(fp)
}
    3990:	e037883a 	mov	sp,fp
    3994:	df000017 	ldw	fp,0(sp)
    3998:	dec00104 	addi	sp,sp,4
    399c:	f800283a 	ret

000039a0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    39a0:	defff404 	addi	sp,sp,-48
    39a4:	dfc00b15 	stw	ra,44(sp)
    39a8:	df000a15 	stw	fp,40(sp)
    39ac:	df000a04 	addi	fp,sp,40
    39b0:	e13ffb15 	stw	r4,-20(fp)
    39b4:	e17ffc15 	stw	r5,-16(fp)
    39b8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    39bc:	00bfffc4 	movi	r2,-1
    39c0:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    39c4:	00bffb44 	movi	r2,-19
    39c8:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    39cc:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    39d0:	e13ffb17 	ldw	r4,-20(fp)
    39d4:	01400034 	movhi	r5,0
    39d8:	2958b304 	addi	r5,r5,25292
    39dc:	00035040 	call	3504 <alt_find_dev>
    39e0:	e0bffa15 	stw	r2,-24(fp)
    39e4:	e0bffa17 	ldw	r2,-24(fp)
    39e8:	1004c03a 	cmpne	r2,r2,zero
    39ec:	1000051e 	bne	r2,zero,3a04 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    39f0:	e13ffb17 	ldw	r4,-20(fp)
    39f4:	0003f080 	call	3f08 <alt_find_file>
    39f8:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    39fc:	00800044 	movi	r2,1
    3a00:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    3a04:	e0bffa17 	ldw	r2,-24(fp)
    3a08:	1005003a 	cmpeq	r2,r2,zero
    3a0c:	1000301e 	bne	r2,zero,3ad0 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    3a10:	e13ffa17 	ldw	r4,-24(fp)
    3a14:	00040280 	call	4028 <alt_get_fd>
    3a18:	e0bff815 	stw	r2,-32(fp)
    3a1c:	e0bff817 	ldw	r2,-32(fp)
    3a20:	1004403a 	cmpge	r2,r2,zero
    3a24:	1000031e 	bne	r2,zero,3a34 <open+0x94>
    {
      status = index;
    3a28:	e0bff817 	ldw	r2,-32(fp)
    3a2c:	e0bff715 	stw	r2,-36(fp)
    3a30:	00002906 	br	3ad8 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    3a34:	e0bff817 	ldw	r2,-32(fp)
    3a38:	10800324 	muli	r2,r2,12
    3a3c:	1007883a 	mov	r3,r2
    3a40:	00800034 	movhi	r2,0
    3a44:	10975004 	addi	r2,r2,23872
    3a48:	1885883a 	add	r2,r3,r2
    3a4c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    3a50:	e0fffc17 	ldw	r3,-16(fp)
    3a54:	00900034 	movhi	r2,16384
    3a58:	10bfffc4 	addi	r2,r2,-1
    3a5c:	1886703a 	and	r3,r3,r2
    3a60:	e0bff917 	ldw	r2,-28(fp)
    3a64:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    3a68:	e0bff617 	ldw	r2,-40(fp)
    3a6c:	1004c03a 	cmpne	r2,r2,zero
    3a70:	1000061e 	bne	r2,zero,3a8c <open+0xec>
    3a74:	e13ff917 	ldw	r4,-28(fp)
    3a78:	00038c40 	call	38c4 <alt_file_locked>
    3a7c:	e0bff715 	stw	r2,-36(fp)
    3a80:	e0bff717 	ldw	r2,-36(fp)
    3a84:	1004803a 	cmplt	r2,r2,zero
    3a88:	1000131e 	bne	r2,zero,3ad8 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    3a8c:	e0bffa17 	ldw	r2,-24(fp)
    3a90:	10800317 	ldw	r2,12(r2)
    3a94:	1005003a 	cmpeq	r2,r2,zero
    3a98:	1000091e 	bne	r2,zero,3ac0 <open+0x120>
    3a9c:	e0bffa17 	ldw	r2,-24(fp)
    3aa0:	10800317 	ldw	r2,12(r2)
    3aa4:	e13ff917 	ldw	r4,-28(fp)
    3aa8:	e17ffb17 	ldw	r5,-20(fp)
    3aac:	e1bffc17 	ldw	r6,-16(fp)
    3ab0:	e1fffd17 	ldw	r7,-12(fp)
    3ab4:	103ee83a 	callr	r2
    3ab8:	e0bfff15 	stw	r2,-4(fp)
    3abc:	00000106 	br	3ac4 <open+0x124>
    3ac0:	e03fff15 	stw	zero,-4(fp)
    3ac4:	e0bfff17 	ldw	r2,-4(fp)
    3ac8:	e0bff715 	stw	r2,-36(fp)
    3acc:	00000206 	br	3ad8 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    3ad0:	00bffb44 	movi	r2,-19
    3ad4:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    3ad8:	e0bff717 	ldw	r2,-36(fp)
    3adc:	1004403a 	cmpge	r2,r2,zero
    3ae0:	1000091e 	bne	r2,zero,3b08 <open+0x168>
  {
    alt_release_fd (index);  
    3ae4:	e13ff817 	ldw	r4,-32(fp)
    3ae8:	0003b880 	call	3b88 <alt_release_fd>
    ALT_ERRNO = -status;
    3aec:	0003b280 	call	3b28 <alt_get_errno>
    3af0:	e0fff717 	ldw	r3,-36(fp)
    3af4:	00c7c83a 	sub	r3,zero,r3
    3af8:	10c00015 	stw	r3,0(r2)
    return -1;
    3afc:	00bfffc4 	movi	r2,-1
    3b00:	e0bffe15 	stw	r2,-8(fp)
    3b04:	00000206 	br	3b10 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    3b08:	e0bff817 	ldw	r2,-32(fp)
    3b0c:	e0bffe15 	stw	r2,-8(fp)
    3b10:	e0bffe17 	ldw	r2,-8(fp)
}
    3b14:	e037883a 	mov	sp,fp
    3b18:	dfc00117 	ldw	ra,4(sp)
    3b1c:	df000017 	ldw	fp,0(sp)
    3b20:	dec00204 	addi	sp,sp,8
    3b24:	f800283a 	ret

00003b28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3b28:	defffd04 	addi	sp,sp,-12
    3b2c:	dfc00215 	stw	ra,8(sp)
    3b30:	df000115 	stw	fp,4(sp)
    3b34:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    3b38:	00800034 	movhi	r2,0
    3b3c:	1098b604 	addi	r2,r2,25304
    3b40:	10800017 	ldw	r2,0(r2)
    3b44:	1005003a 	cmpeq	r2,r2,zero
    3b48:	1000061e 	bne	r2,zero,3b64 <alt_get_errno+0x3c>
    3b4c:	00800034 	movhi	r2,0
    3b50:	1098b604 	addi	r2,r2,25304
    3b54:	10800017 	ldw	r2,0(r2)
    3b58:	103ee83a 	callr	r2
    3b5c:	e0bfff15 	stw	r2,-4(fp)
    3b60:	00000306 	br	3b70 <alt_get_errno+0x48>
    3b64:	00800034 	movhi	r2,0
    3b68:	109f3d04 	addi	r2,r2,31988
    3b6c:	e0bfff15 	stw	r2,-4(fp)
    3b70:	e0bfff17 	ldw	r2,-4(fp)
}
    3b74:	e037883a 	mov	sp,fp
    3b78:	dfc00117 	ldw	ra,4(sp)
    3b7c:	df000017 	ldw	fp,0(sp)
    3b80:	dec00204 	addi	sp,sp,8
    3b84:	f800283a 	ret

00003b88 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    3b88:	defffe04 	addi	sp,sp,-8
    3b8c:	df000115 	stw	fp,4(sp)
    3b90:	df000104 	addi	fp,sp,4
    3b94:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    3b98:	e0bfff17 	ldw	r2,-4(fp)
    3b9c:	108000d0 	cmplti	r2,r2,3
    3ba0:	10000d1e 	bne	r2,zero,3bd8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    3ba4:	e0bfff17 	ldw	r2,-4(fp)
    3ba8:	00c00034 	movhi	r3,0
    3bac:	18d75004 	addi	r3,r3,23872
    3bb0:	10800324 	muli	r2,r2,12
    3bb4:	10c5883a 	add	r2,r2,r3
    3bb8:	10800204 	addi	r2,r2,8
    3bbc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    3bc0:	e0bfff17 	ldw	r2,-4(fp)
    3bc4:	00c00034 	movhi	r3,0
    3bc8:	18d75004 	addi	r3,r3,23872
    3bcc:	10800324 	muli	r2,r2,12
    3bd0:	10c5883a 	add	r2,r2,r3
    3bd4:	10000015 	stw	zero,0(r2)
  }
}
    3bd8:	e037883a 	mov	sp,fp
    3bdc:	df000017 	ldw	fp,0(sp)
    3be0:	dec00104 	addi	sp,sp,4
    3be4:	f800283a 	ret

00003be8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    3be8:	defffa04 	addi	sp,sp,-24
    3bec:	df000515 	stw	fp,20(sp)
    3bf0:	df000504 	addi	fp,sp,20
    3bf4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3bf8:	0005303a 	rdctl	r2,status
    3bfc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3c00:	e0fffd17 	ldw	r3,-12(fp)
    3c04:	00bfff84 	movi	r2,-2
    3c08:	1884703a 	and	r2,r3,r2
    3c0c:	1001703a 	wrctl	status,r2
  
  return context;
    3c10:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    3c14:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    3c18:	e0bfff17 	ldw	r2,-4(fp)
    3c1c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    3c20:	e0bffc17 	ldw	r2,-16(fp)
    3c24:	10c00017 	ldw	r3,0(r2)
    3c28:	e0bffc17 	ldw	r2,-16(fp)
    3c2c:	10800117 	ldw	r2,4(r2)
    3c30:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    3c34:	e0bffc17 	ldw	r2,-16(fp)
    3c38:	10c00117 	ldw	r3,4(r2)
    3c3c:	e0bffc17 	ldw	r2,-16(fp)
    3c40:	10800017 	ldw	r2,0(r2)
    3c44:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    3c48:	e0fffc17 	ldw	r3,-16(fp)
    3c4c:	e0bffc17 	ldw	r2,-16(fp)
    3c50:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    3c54:	e0fffc17 	ldw	r3,-16(fp)
    3c58:	e0bffc17 	ldw	r2,-16(fp)
    3c5c:	18800015 	stw	r2,0(r3)
    3c60:	e0bffe17 	ldw	r2,-8(fp)
    3c64:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3c68:	e0bffb17 	ldw	r2,-20(fp)
    3c6c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    3c70:	e037883a 	mov	sp,fp
    3c74:	df000017 	ldw	fp,0(sp)
    3c78:	dec00104 	addi	sp,sp,4
    3c7c:	f800283a 	ret

00003c80 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    3c80:	defffb04 	addi	sp,sp,-20
    3c84:	dfc00415 	stw	ra,16(sp)
    3c88:	df000315 	stw	fp,12(sp)
    3c8c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    3c90:	d0a00817 	ldw	r2,-32736(gp)
    3c94:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    3c98:	d0a68c17 	ldw	r2,-26064(gp)
    3c9c:	10800044 	addi	r2,r2,1
    3ca0:	d0a68c15 	stw	r2,-26064(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    3ca4:	00003106 	br	3d6c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    3ca8:	e0bffe17 	ldw	r2,-8(fp)
    3cac:	10800017 	ldw	r2,0(r2)
    3cb0:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    3cb4:	e0bffe17 	ldw	r2,-8(fp)
    3cb8:	10800403 	ldbu	r2,16(r2)
    3cbc:	10803fcc 	andi	r2,r2,255
    3cc0:	1005003a 	cmpeq	r2,r2,zero
    3cc4:	1000051e 	bne	r2,zero,3cdc <alt_tick+0x5c>
    3cc8:	d0a68c17 	ldw	r2,-26064(gp)
    3ccc:	1004c03a 	cmpne	r2,r2,zero
    3cd0:	1000021e 	bne	r2,zero,3cdc <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    3cd4:	e0bffe17 	ldw	r2,-8(fp)
    3cd8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    3cdc:	e0bffe17 	ldw	r2,-8(fp)
    3ce0:	10c00217 	ldw	r3,8(r2)
    3ce4:	d0a68c17 	ldw	r2,-26064(gp)
    3ce8:	10c01e36 	bltu	r2,r3,3d64 <alt_tick+0xe4>
    3cec:	e0bffe17 	ldw	r2,-8(fp)
    3cf0:	10800403 	ldbu	r2,16(r2)
    3cf4:	10803fcc 	andi	r2,r2,255
    3cf8:	1004c03a 	cmpne	r2,r2,zero
    3cfc:	1000191e 	bne	r2,zero,3d64 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    3d00:	e0bffe17 	ldw	r2,-8(fp)
    3d04:	10c00317 	ldw	r3,12(r2)
    3d08:	e0bffe17 	ldw	r2,-8(fp)
    3d0c:	11000517 	ldw	r4,20(r2)
    3d10:	183ee83a 	callr	r3
    3d14:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    3d18:	e0bffd17 	ldw	r2,-12(fp)
    3d1c:	1004c03a 	cmpne	r2,r2,zero
    3d20:	1000031e 	bne	r2,zero,3d30 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    3d24:	e13ffe17 	ldw	r4,-8(fp)
    3d28:	0003be80 	call	3be8 <alt_alarm_stop>
    3d2c:	00000d06 	br	3d64 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    3d30:	e0bffe17 	ldw	r2,-8(fp)
    3d34:	10c00217 	ldw	r3,8(r2)
    3d38:	e0bffd17 	ldw	r2,-12(fp)
    3d3c:	1887883a 	add	r3,r3,r2
    3d40:	e0bffe17 	ldw	r2,-8(fp)
    3d44:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    3d48:	e0bffe17 	ldw	r2,-8(fp)
    3d4c:	10c00217 	ldw	r3,8(r2)
    3d50:	d0a68c17 	ldw	r2,-26064(gp)
    3d54:	1880032e 	bgeu	r3,r2,3d64 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    3d58:	e0fffe17 	ldw	r3,-8(fp)
    3d5c:	00800044 	movi	r2,1
    3d60:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    3d64:	e0bfff17 	ldw	r2,-4(fp)
    3d68:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    3d6c:	d0e00804 	addi	r3,gp,-32736
    3d70:	e0bffe17 	ldw	r2,-8(fp)
    3d74:	10ffcc1e 	bne	r2,r3,3ca8 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    3d78:	e037883a 	mov	sp,fp
    3d7c:	dfc00117 	ldw	ra,4(sp)
    3d80:	df000017 	ldw	fp,0(sp)
    3d84:	dec00204 	addi	sp,sp,8
    3d88:	f800283a 	ret

00003d8c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    3d8c:	defffd04 	addi	sp,sp,-12
    3d90:	dfc00215 	stw	ra,8(sp)
    3d94:	df000115 	stw	fp,4(sp)
    3d98:	df000104 	addi	fp,sp,4
    3d9c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    3da0:	e13fff17 	ldw	r4,-4(fp)
    3da4:	0003ddc0 	call	3ddc <alt_busy_sleep>
}
    3da8:	e037883a 	mov	sp,fp
    3dac:	dfc00117 	ldw	ra,4(sp)
    3db0:	df000017 	ldw	fp,0(sp)
    3db4:	dec00204 	addi	sp,sp,8
    3db8:	f800283a 	ret

00003dbc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    3dbc:	deffff04 	addi	sp,sp,-4
    3dc0:	df000015 	stw	fp,0(sp)
    3dc4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    3dc8:	000170fa 	wrctl	ienable,zero
}
    3dcc:	e037883a 	mov	sp,fp
    3dd0:	df000017 	ldw	fp,0(sp)
    3dd4:	dec00104 	addi	sp,sp,4
    3dd8:	f800283a 	ret

00003ddc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    3ddc:	defffb04 	addi	sp,sp,-20
    3de0:	df000415 	stw	fp,16(sp)
    3de4:	df000404 	addi	fp,sp,16
    3de8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    3dec:	008000c4 	movi	r2,3
    3df0:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
    3df4:	e0fffc17 	ldw	r3,-16(fp)
    3df8:	008003f4 	movhi	r2,15
    3dfc:	10909004 	addi	r2,r2,16960
    3e00:	1887383a 	mul	r3,r3,r2
    3e04:	0080bef4 	movhi	r2,763
    3e08:	10bc2004 	addi	r2,r2,-3968
    3e0c:	10c7203a 	divu	r3,r2,r3
    3e10:	00a00034 	movhi	r2,32768
    3e14:	10bfffc4 	addi	r2,r2,-1
    3e18:	10c7203a 	divu	r3,r2,r3
    3e1c:	e0bfff17 	ldw	r2,-4(fp)
    3e20:	10c5203a 	divu	r2,r2,r3
    3e24:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    3e28:	e0bffd17 	ldw	r2,-12(fp)
    3e2c:	1005003a 	cmpeq	r2,r2,zero
    3e30:	1000251e 	bne	r2,zero,3ec8 <alt_busy_sleep+0xec>
  {
    for(i=0;i<big_loops;i++)
    3e34:	e03ffe15 	stw	zero,-8(fp)
    3e38:	00001406 	br	3e8c <alt_busy_sleep+0xb0>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    3e3c:	00a00034 	movhi	r2,32768
    3e40:	10bfffc4 	addi	r2,r2,-1
    3e44:	10bfffc4 	addi	r2,r2,-1
    3e48:	103ffe1e 	bne	r2,zero,3e44 <alt_busy_sleep+0x68>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    3e4c:	e0fffc17 	ldw	r3,-16(fp)
    3e50:	008003f4 	movhi	r2,15
    3e54:	10909004 	addi	r2,r2,16960
    3e58:	1887383a 	mul	r3,r3,r2
    3e5c:	0080bef4 	movhi	r2,763
    3e60:	10bc2004 	addi	r2,r2,-3968
    3e64:	10c7203a 	divu	r3,r2,r3
    3e68:	00a00034 	movhi	r2,32768
    3e6c:	10bfffc4 	addi	r2,r2,-1
    3e70:	10c7203a 	divu	r3,r2,r3
    3e74:	e0bfff17 	ldw	r2,-4(fp)
    3e78:	10c5c83a 	sub	r2,r2,r3
    3e7c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    3e80:	e0bffe17 	ldw	r2,-8(fp)
    3e84:	10800044 	addi	r2,r2,1
    3e88:	e0bffe15 	stw	r2,-8(fp)
    3e8c:	e0fffe17 	ldw	r3,-8(fp)
    3e90:	e0bffd17 	ldw	r2,-12(fp)
    3e94:	18bfe916 	blt	r3,r2,3e3c <alt_busy_sleep+0x60>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    3e98:	e0fffc17 	ldw	r3,-16(fp)
    3e9c:	008003f4 	movhi	r2,15
    3ea0:	10909004 	addi	r2,r2,16960
    3ea4:	1887383a 	mul	r3,r3,r2
    3ea8:	0080bef4 	movhi	r2,763
    3eac:	10bc2004 	addi	r2,r2,-3968
    3eb0:	10c7203a 	divu	r3,r2,r3
    3eb4:	e0bfff17 	ldw	r2,-4(fp)
    3eb8:	1885383a 	mul	r2,r3,r2
    3ebc:	10bfffc4 	addi	r2,r2,-1
    3ec0:	103ffe1e 	bne	r2,zero,3ebc <alt_busy_sleep+0xe0>
    3ec4:	00000b06 	br	3ef4 <alt_busy_sleep+0x118>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    3ec8:	e0fffc17 	ldw	r3,-16(fp)
    3ecc:	008003f4 	movhi	r2,15
    3ed0:	10909004 	addi	r2,r2,16960
    3ed4:	1887383a 	mul	r3,r3,r2
    3ed8:	0080bef4 	movhi	r2,763
    3edc:	10bc2004 	addi	r2,r2,-3968
    3ee0:	10c7203a 	divu	r3,r2,r3
    3ee4:	e0bfff17 	ldw	r2,-4(fp)
    3ee8:	1885383a 	mul	r2,r3,r2
    3eec:	10bfffc4 	addi	r2,r2,-1
    3ef0:	00bffe16 	blt	zero,r2,3eec <alt_busy_sleep+0x110>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    3ef4:	0005883a 	mov	r2,zero
}
    3ef8:	e037883a 	mov	sp,fp
    3efc:	df000017 	ldw	fp,0(sp)
    3f00:	dec00104 	addi	sp,sp,4
    3f04:	f800283a 	ret

00003f08 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    3f08:	defffa04 	addi	sp,sp,-24
    3f0c:	dfc00515 	stw	ra,20(sp)
    3f10:	df000415 	stw	fp,16(sp)
    3f14:	df000404 	addi	fp,sp,16
    3f18:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    3f1c:	00800034 	movhi	r2,0
    3f20:	1098b104 	addi	r2,r2,25284
    3f24:	10800017 	ldw	r2,0(r2)
    3f28:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    3f2c:	00003306 	br	3ffc <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    3f30:	e0bffd17 	ldw	r2,-12(fp)
    3f34:	11000217 	ldw	r4,8(r2)
    3f38:	000438c0 	call	438c <strlen>
    3f3c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    3f40:	e0bffd17 	ldw	r2,-12(fp)
    3f44:	10c00217 	ldw	r3,8(r2)
    3f48:	e0bffc17 	ldw	r2,-16(fp)
    3f4c:	1885883a 	add	r2,r3,r2
    3f50:	10bfffc4 	addi	r2,r2,-1
    3f54:	10800003 	ldbu	r2,0(r2)
    3f58:	10803fcc 	andi	r2,r2,255
    3f5c:	1080201c 	xori	r2,r2,128
    3f60:	10bfe004 	addi	r2,r2,-128
    3f64:	10800bd8 	cmpnei	r2,r2,47
    3f68:	1000031e 	bne	r2,zero,3f78 <alt_find_file+0x70>
    {
      len -= 1;
    3f6c:	e0bffc17 	ldw	r2,-16(fp)
    3f70:	10bfffc4 	addi	r2,r2,-1
    3f74:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    3f78:	e0bffc17 	ldw	r2,-16(fp)
    3f7c:	1007883a 	mov	r3,r2
    3f80:	e0bffe17 	ldw	r2,-8(fp)
    3f84:	1885883a 	add	r2,r3,r2
    3f88:	10800003 	ldbu	r2,0(r2)
    3f8c:	10803fcc 	andi	r2,r2,255
    3f90:	1080201c 	xori	r2,r2,128
    3f94:	10bfe004 	addi	r2,r2,-128
    3f98:	10800be0 	cmpeqi	r2,r2,47
    3f9c:	10000a1e 	bne	r2,zero,3fc8 <alt_find_file+0xc0>
    3fa0:	e0bffc17 	ldw	r2,-16(fp)
    3fa4:	1007883a 	mov	r3,r2
    3fa8:	e0bffe17 	ldw	r2,-8(fp)
    3fac:	1885883a 	add	r2,r3,r2
    3fb0:	10800003 	ldbu	r2,0(r2)
    3fb4:	10803fcc 	andi	r2,r2,255
    3fb8:	1080201c 	xori	r2,r2,128
    3fbc:	10bfe004 	addi	r2,r2,-128
    3fc0:	1004c03a 	cmpne	r2,r2,zero
    3fc4:	10000a1e 	bne	r2,zero,3ff0 <alt_find_file+0xe8>
    3fc8:	e0bffd17 	ldw	r2,-12(fp)
    3fcc:	11000217 	ldw	r4,8(r2)
    3fd0:	e1bffc17 	ldw	r6,-16(fp)
    3fd4:	e17ffe17 	ldw	r5,-8(fp)
    3fd8:	00041bc0 	call	41bc <memcmp>
    3fdc:	1004c03a 	cmpne	r2,r2,zero
    3fe0:	1000031e 	bne	r2,zero,3ff0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    3fe4:	e0bffd17 	ldw	r2,-12(fp)
    3fe8:	e0bfff15 	stw	r2,-4(fp)
    3fec:	00000806 	br	4010 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    3ff0:	e0bffd17 	ldw	r2,-12(fp)
    3ff4:	10800017 	ldw	r2,0(r2)
    3ff8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    3ffc:	00c00034 	movhi	r3,0
    4000:	18d8b104 	addi	r3,r3,25284
    4004:	e0bffd17 	ldw	r2,-12(fp)
    4008:	10ffc91e 	bne	r2,r3,3f30 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    400c:	e03fff15 	stw	zero,-4(fp)
    4010:	e0bfff17 	ldw	r2,-4(fp)
}
    4014:	e037883a 	mov	sp,fp
    4018:	dfc00117 	ldw	ra,4(sp)
    401c:	df000017 	ldw	fp,0(sp)
    4020:	dec00204 	addi	sp,sp,8
    4024:	f800283a 	ret

00004028 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    4028:	defffc04 	addi	sp,sp,-16
    402c:	df000315 	stw	fp,12(sp)
    4030:	df000304 	addi	fp,sp,12
    4034:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    4038:	00bffa04 	movi	r2,-24
    403c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    4040:	e03ffe15 	stw	zero,-8(fp)
    4044:	00001e06 	br	40c0 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    4048:	e0bffe17 	ldw	r2,-8(fp)
    404c:	00c00034 	movhi	r3,0
    4050:	18d75004 	addi	r3,r3,23872
    4054:	10800324 	muli	r2,r2,12
    4058:	10c5883a 	add	r2,r2,r3
    405c:	10800017 	ldw	r2,0(r2)
    4060:	1004c03a 	cmpne	r2,r2,zero
    4064:	1000131e 	bne	r2,zero,40b4 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    4068:	e0bffe17 	ldw	r2,-8(fp)
    406c:	00c00034 	movhi	r3,0
    4070:	18d75004 	addi	r3,r3,23872
    4074:	10800324 	muli	r2,r2,12
    4078:	10c7883a 	add	r3,r2,r3
    407c:	e0bfff17 	ldw	r2,-4(fp)
    4080:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    4084:	00800034 	movhi	r2,0
    4088:	1098b504 	addi	r2,r2,25300
    408c:	10c00017 	ldw	r3,0(r2)
    4090:	e0bffe17 	ldw	r2,-8(fp)
    4094:	1880040e 	bge	r3,r2,40a8 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    4098:	00c00034 	movhi	r3,0
    409c:	18d8b504 	addi	r3,r3,25300
    40a0:	e0bffe17 	ldw	r2,-8(fp)
    40a4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    40a8:	e0bffe17 	ldw	r2,-8(fp)
    40ac:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    40b0:	00000606 	br	40cc <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    40b4:	e0bffe17 	ldw	r2,-8(fp)
    40b8:	10800044 	addi	r2,r2,1
    40bc:	e0bffe15 	stw	r2,-8(fp)
    40c0:	e0bffe17 	ldw	r2,-8(fp)
    40c4:	10800810 	cmplti	r2,r2,32
    40c8:	103fdf1e 	bne	r2,zero,4048 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    40cc:	e0bffd17 	ldw	r2,-12(fp)
}
    40d0:	e037883a 	mov	sp,fp
    40d4:	df000017 	ldw	fp,0(sp)
    40d8:	dec00104 	addi	sp,sp,4
    40dc:	f800283a 	ret

000040e0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    40e0:	defffb04 	addi	sp,sp,-20
    40e4:	df000415 	stw	fp,16(sp)
    40e8:	df000404 	addi	fp,sp,16
    40ec:	e13ffe15 	stw	r4,-8(fp)
    40f0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    40f4:	e0bfff17 	ldw	r2,-4(fp)
    40f8:	10840070 	cmpltui	r2,r2,4097
    40fc:	1000021e 	bne	r2,zero,4108 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    4100:	00840004 	movi	r2,4096
    4104:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    4108:	e0fffe17 	ldw	r3,-8(fp)
    410c:	e0bfff17 	ldw	r2,-4(fp)
    4110:	1885883a 	add	r2,r3,r2
    4114:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    4118:	e0bffe17 	ldw	r2,-8(fp)
    411c:	e0bffd15 	stw	r2,-12(fp)
    4120:	00000506 	br	4138 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    4124:	e0bffd17 	ldw	r2,-12(fp)
    4128:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    412c:	e0bffd17 	ldw	r2,-12(fp)
    4130:	10800804 	addi	r2,r2,32
    4134:	e0bffd15 	stw	r2,-12(fp)
    4138:	e0fffd17 	ldw	r3,-12(fp)
    413c:	e0bffc17 	ldw	r2,-16(fp)
    4140:	18bff836 	bltu	r3,r2,4124 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    4144:	e0bffe17 	ldw	r2,-8(fp)
    4148:	108007cc 	andi	r2,r2,31
    414c:	1005003a 	cmpeq	r2,r2,zero
    4150:	1000021e 	bne	r2,zero,415c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    4154:	e0bffd17 	ldw	r2,-12(fp)
    4158:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    415c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    4160:	e037883a 	mov	sp,fp
    4164:	df000017 	ldw	fp,0(sp)
    4168:	dec00104 	addi	sp,sp,4
    416c:	f800283a 	ret

00004170 <atexit>:
    4170:	200b883a 	mov	r5,r4
    4174:	000d883a 	mov	r6,zero
    4178:	0009883a 	mov	r4,zero
    417c:	000f883a 	mov	r7,zero
    4180:	00044001 	jmpi	4400 <__register_exitproc>

00004184 <exit>:
    4184:	defffe04 	addi	sp,sp,-8
    4188:	000b883a 	mov	r5,zero
    418c:	dc000015 	stw	r16,0(sp)
    4190:	dfc00115 	stw	ra,4(sp)
    4194:	2021883a 	mov	r16,r4
    4198:	00045380 	call	4538 <__call_exitprocs>
    419c:	00800034 	movhi	r2,0
    41a0:	1098bb04 	addi	r2,r2,25324
    41a4:	11000017 	ldw	r4,0(r2)
    41a8:	20800f17 	ldw	r2,60(r4)
    41ac:	10000126 	beq	r2,zero,41b4 <exit+0x30>
    41b0:	103ee83a 	callr	r2
    41b4:	8009883a 	mov	r4,r16
    41b8:	00047280 	call	4728 <_exit>

000041bc <memcmp>:
    41bc:	00c000c4 	movi	r3,3
    41c0:	1980032e 	bgeu	r3,r6,41d0 <memcmp+0x14>
    41c4:	2144b03a 	or	r2,r4,r5
    41c8:	10c4703a 	and	r2,r2,r3
    41cc:	10000f26 	beq	r2,zero,420c <memcmp+0x50>
    41d0:	31ffffc4 	addi	r7,r6,-1
    41d4:	3000061e 	bne	r6,zero,41f0 <memcmp+0x34>
    41d8:	00000a06 	br	4204 <memcmp+0x48>
    41dc:	39ffffc4 	addi	r7,r7,-1
    41e0:	00bfffc4 	movi	r2,-1
    41e4:	21000044 	addi	r4,r4,1
    41e8:	29400044 	addi	r5,r5,1
    41ec:	38800526 	beq	r7,r2,4204 <memcmp+0x48>
    41f0:	20c00003 	ldbu	r3,0(r4)
    41f4:	28800003 	ldbu	r2,0(r5)
    41f8:	18bff826 	beq	r3,r2,41dc <memcmp+0x20>
    41fc:	1885c83a 	sub	r2,r3,r2
    4200:	f800283a 	ret
    4204:	0005883a 	mov	r2,zero
    4208:	f800283a 	ret
    420c:	180f883a 	mov	r7,r3
    4210:	20c00017 	ldw	r3,0(r4)
    4214:	28800017 	ldw	r2,0(r5)
    4218:	18bfed1e 	bne	r3,r2,41d0 <memcmp+0x14>
    421c:	31bfff04 	addi	r6,r6,-4
    4220:	21000104 	addi	r4,r4,4
    4224:	29400104 	addi	r5,r5,4
    4228:	39bff936 	bltu	r7,r6,4210 <memcmp+0x54>
    422c:	003fe806 	br	41d0 <memcmp+0x14>

00004230 <memcpy>:
    4230:	01c003c4 	movi	r7,15
    4234:	2007883a 	mov	r3,r4
    4238:	3980032e 	bgeu	r7,r6,4248 <memcpy+0x18>
    423c:	2904b03a 	or	r2,r5,r4
    4240:	108000cc 	andi	r2,r2,3
    4244:	10000926 	beq	r2,zero,426c <memcpy+0x3c>
    4248:	30000626 	beq	r6,zero,4264 <memcpy+0x34>
    424c:	30cd883a 	add	r6,r6,r3
    4250:	28800003 	ldbu	r2,0(r5)
    4254:	29400044 	addi	r5,r5,1
    4258:	18800005 	stb	r2,0(r3)
    425c:	18c00044 	addi	r3,r3,1
    4260:	30fffb1e 	bne	r6,r3,4250 <memcpy+0x20>
    4264:	2005883a 	mov	r2,r4
    4268:	f800283a 	ret
    426c:	3811883a 	mov	r8,r7
    4270:	200f883a 	mov	r7,r4
    4274:	28c00017 	ldw	r3,0(r5)
    4278:	31bffc04 	addi	r6,r6,-16
    427c:	38c00015 	stw	r3,0(r7)
    4280:	28800117 	ldw	r2,4(r5)
    4284:	38800115 	stw	r2,4(r7)
    4288:	28c00217 	ldw	r3,8(r5)
    428c:	38c00215 	stw	r3,8(r7)
    4290:	28800317 	ldw	r2,12(r5)
    4294:	29400404 	addi	r5,r5,16
    4298:	38800315 	stw	r2,12(r7)
    429c:	39c00404 	addi	r7,r7,16
    42a0:	41bff436 	bltu	r8,r6,4274 <memcpy+0x44>
    42a4:	008000c4 	movi	r2,3
    42a8:	1180072e 	bgeu	r2,r6,42c8 <memcpy+0x98>
    42ac:	1007883a 	mov	r3,r2
    42b0:	28800017 	ldw	r2,0(r5)
    42b4:	31bfff04 	addi	r6,r6,-4
    42b8:	29400104 	addi	r5,r5,4
    42bc:	38800015 	stw	r2,0(r7)
    42c0:	39c00104 	addi	r7,r7,4
    42c4:	19bffa36 	bltu	r3,r6,42b0 <memcpy+0x80>
    42c8:	3807883a 	mov	r3,r7
    42cc:	003fde06 	br	4248 <memcpy+0x18>

000042d0 <strcmp>:
    42d0:	2144b03a 	or	r2,r4,r5
    42d4:	108000cc 	andi	r2,r2,3
    42d8:	10001d1e 	bne	r2,zero,4350 <strcmp+0x80>
    42dc:	200f883a 	mov	r7,r4
    42e0:	28800017 	ldw	r2,0(r5)
    42e4:	21000017 	ldw	r4,0(r4)
    42e8:	280d883a 	mov	r6,r5
    42ec:	2080161e 	bne	r4,r2,4348 <strcmp+0x78>
    42f0:	023fbff4 	movhi	r8,65279
    42f4:	423fbfc4 	addi	r8,r8,-257
    42f8:	2207883a 	add	r3,r4,r8
    42fc:	01602074 	movhi	r5,32897
    4300:	29602004 	addi	r5,r5,-32640
    4304:	1946703a 	and	r3,r3,r5
    4308:	0104303a 	nor	r2,zero,r4
    430c:	10c4703a 	and	r2,r2,r3
    4310:	10001c1e 	bne	r2,zero,4384 <strcmp+0xb4>
    4314:	4013883a 	mov	r9,r8
    4318:	2811883a 	mov	r8,r5
    431c:	00000106 	br	4324 <strcmp+0x54>
    4320:	1800181e 	bne	r3,zero,4384 <strcmp+0xb4>
    4324:	39c00104 	addi	r7,r7,4
    4328:	39000017 	ldw	r4,0(r7)
    432c:	31800104 	addi	r6,r6,4
    4330:	31400017 	ldw	r5,0(r6)
    4334:	2245883a 	add	r2,r4,r9
    4338:	1204703a 	and	r2,r2,r8
    433c:	0106303a 	nor	r3,zero,r4
    4340:	1886703a 	and	r3,r3,r2
    4344:	217ff626 	beq	r4,r5,4320 <strcmp+0x50>
    4348:	3809883a 	mov	r4,r7
    434c:	300b883a 	mov	r5,r6
    4350:	20c00007 	ldb	r3,0(r4)
    4354:	1800051e 	bne	r3,zero,436c <strcmp+0x9c>
    4358:	00000606 	br	4374 <strcmp+0xa4>
    435c:	21000044 	addi	r4,r4,1
    4360:	20c00007 	ldb	r3,0(r4)
    4364:	29400044 	addi	r5,r5,1
    4368:	18000226 	beq	r3,zero,4374 <strcmp+0xa4>
    436c:	28800007 	ldb	r2,0(r5)
    4370:	18bffa26 	beq	r3,r2,435c <strcmp+0x8c>
    4374:	20c00003 	ldbu	r3,0(r4)
    4378:	28800003 	ldbu	r2,0(r5)
    437c:	1885c83a 	sub	r2,r3,r2
    4380:	f800283a 	ret
    4384:	0005883a 	mov	r2,zero
    4388:	f800283a 	ret

0000438c <strlen>:
    438c:	208000cc 	andi	r2,r4,3
    4390:	2011883a 	mov	r8,r4
    4394:	1000161e 	bne	r2,zero,43f0 <strlen+0x64>
    4398:	20c00017 	ldw	r3,0(r4)
    439c:	017fbff4 	movhi	r5,65279
    43a0:	297fbfc4 	addi	r5,r5,-257
    43a4:	01e02074 	movhi	r7,32897
    43a8:	39e02004 	addi	r7,r7,-32640
    43ac:	1945883a 	add	r2,r3,r5
    43b0:	11c4703a 	and	r2,r2,r7
    43b4:	00c6303a 	nor	r3,zero,r3
    43b8:	1886703a 	and	r3,r3,r2
    43bc:	18000c1e 	bne	r3,zero,43f0 <strlen+0x64>
    43c0:	280d883a 	mov	r6,r5
    43c4:	380b883a 	mov	r5,r7
    43c8:	21000104 	addi	r4,r4,4
    43cc:	20800017 	ldw	r2,0(r4)
    43d0:	1187883a 	add	r3,r2,r6
    43d4:	1946703a 	and	r3,r3,r5
    43d8:	0084303a 	nor	r2,zero,r2
    43dc:	10c4703a 	and	r2,r2,r3
    43e0:	103ff926 	beq	r2,zero,43c8 <strlen+0x3c>
    43e4:	20800007 	ldb	r2,0(r4)
    43e8:	10000326 	beq	r2,zero,43f8 <strlen+0x6c>
    43ec:	21000044 	addi	r4,r4,1
    43f0:	20800007 	ldb	r2,0(r4)
    43f4:	103ffd1e 	bne	r2,zero,43ec <strlen+0x60>
    43f8:	2205c83a 	sub	r2,r4,r8
    43fc:	f800283a 	ret

00004400 <__register_exitproc>:
    4400:	defffa04 	addi	sp,sp,-24
    4404:	00800034 	movhi	r2,0
    4408:	1098bb04 	addi	r2,r2,25324
    440c:	dc000015 	stw	r16,0(sp)
    4410:	14000017 	ldw	r16,0(r2)
    4414:	dd000415 	stw	r20,16(sp)
    4418:	2829883a 	mov	r20,r5
    441c:	81405217 	ldw	r5,328(r16)
    4420:	dcc00315 	stw	r19,12(sp)
    4424:	dc800215 	stw	r18,8(sp)
    4428:	dc400115 	stw	r17,4(sp)
    442c:	dfc00515 	stw	ra,20(sp)
    4430:	2023883a 	mov	r17,r4
    4434:	3027883a 	mov	r19,r6
    4438:	3825883a 	mov	r18,r7
    443c:	28002526 	beq	r5,zero,44d4 <__register_exitproc+0xd4>
    4440:	29000117 	ldw	r4,4(r5)
    4444:	008007c4 	movi	r2,31
    4448:	11002716 	blt	r2,r4,44e8 <__register_exitproc+0xe8>
    444c:	8800101e 	bne	r17,zero,4490 <__register_exitproc+0x90>
    4450:	2105883a 	add	r2,r4,r4
    4454:	1085883a 	add	r2,r2,r2
    4458:	20c00044 	addi	r3,r4,1
    445c:	1145883a 	add	r2,r2,r5
    4460:	0009883a 	mov	r4,zero
    4464:	15000215 	stw	r20,8(r2)
    4468:	28c00115 	stw	r3,4(r5)
    446c:	2005883a 	mov	r2,r4
    4470:	dfc00517 	ldw	ra,20(sp)
    4474:	dd000417 	ldw	r20,16(sp)
    4478:	dcc00317 	ldw	r19,12(sp)
    447c:	dc800217 	ldw	r18,8(sp)
    4480:	dc400117 	ldw	r17,4(sp)
    4484:	dc000017 	ldw	r16,0(sp)
    4488:	dec00604 	addi	sp,sp,24
    448c:	f800283a 	ret
    4490:	29802204 	addi	r6,r5,136
    4494:	00800044 	movi	r2,1
    4498:	110e983a 	sll	r7,r2,r4
    449c:	30c04017 	ldw	r3,256(r6)
    44a0:	2105883a 	add	r2,r4,r4
    44a4:	1085883a 	add	r2,r2,r2
    44a8:	1185883a 	add	r2,r2,r6
    44ac:	19c6b03a 	or	r3,r3,r7
    44b0:	14802015 	stw	r18,128(r2)
    44b4:	14c00015 	stw	r19,0(r2)
    44b8:	00800084 	movi	r2,2
    44bc:	30c04015 	stw	r3,256(r6)
    44c0:	88bfe31e 	bne	r17,r2,4450 <__register_exitproc+0x50>
    44c4:	30804117 	ldw	r2,260(r6)
    44c8:	11c4b03a 	or	r2,r2,r7
    44cc:	30804115 	stw	r2,260(r6)
    44d0:	003fdf06 	br	4450 <__register_exitproc+0x50>
    44d4:	00800034 	movhi	r2,0
    44d8:	109f7e04 	addi	r2,r2,32248
    44dc:	100b883a 	mov	r5,r2
    44e0:	80805215 	stw	r2,328(r16)
    44e4:	003fd606 	br	4440 <__register_exitproc+0x40>
    44e8:	00800034 	movhi	r2,0
    44ec:	10800004 	addi	r2,r2,0
    44f0:	1000021e 	bne	r2,zero,44fc <__register_exitproc+0xfc>
    44f4:	013fffc4 	movi	r4,-1
    44f8:	003fdc06 	br	446c <__register_exitproc+0x6c>
    44fc:	01006404 	movi	r4,400
    4500:	103ee83a 	callr	r2
    4504:	1007883a 	mov	r3,r2
    4508:	103ffa26 	beq	r2,zero,44f4 <__register_exitproc+0xf4>
    450c:	80805217 	ldw	r2,328(r16)
    4510:	180b883a 	mov	r5,r3
    4514:	18000115 	stw	zero,4(r3)
    4518:	18800015 	stw	r2,0(r3)
    451c:	80c05215 	stw	r3,328(r16)
    4520:	18006215 	stw	zero,392(r3)
    4524:	18006315 	stw	zero,396(r3)
    4528:	0009883a 	mov	r4,zero
    452c:	883fc826 	beq	r17,zero,4450 <__register_exitproc+0x50>
    4530:	003fd706 	br	4490 <__register_exitproc+0x90>

00004534 <register_fini>:
    4534:	f800283a 	ret

00004538 <__call_exitprocs>:
    4538:	00800034 	movhi	r2,0
    453c:	1098bb04 	addi	r2,r2,25324
    4540:	10800017 	ldw	r2,0(r2)
    4544:	defff304 	addi	sp,sp,-52
    4548:	df000b15 	stw	fp,44(sp)
    454c:	d8800115 	stw	r2,4(sp)
    4550:	00800034 	movhi	r2,0
    4554:	10800004 	addi	r2,r2,0
    4558:	1005003a 	cmpeq	r2,r2,zero
    455c:	d8800215 	stw	r2,8(sp)
    4560:	d8800117 	ldw	r2,4(sp)
    4564:	dd400815 	stw	r21,32(sp)
    4568:	dd000715 	stw	r20,28(sp)
    456c:	10805204 	addi	r2,r2,328
    4570:	dfc00c15 	stw	ra,48(sp)
    4574:	ddc00a15 	stw	r23,40(sp)
    4578:	dd800915 	stw	r22,36(sp)
    457c:	dcc00615 	stw	r19,24(sp)
    4580:	dc800515 	stw	r18,20(sp)
    4584:	dc400415 	stw	r17,16(sp)
    4588:	dc000315 	stw	r16,12(sp)
    458c:	282b883a 	mov	r21,r5
    4590:	2039883a 	mov	fp,r4
    4594:	d8800015 	stw	r2,0(sp)
    4598:	2829003a 	cmpeq	r20,r5,zero
    459c:	d8800117 	ldw	r2,4(sp)
    45a0:	14405217 	ldw	r17,328(r2)
    45a4:	88001026 	beq	r17,zero,45e8 <__call_exitprocs+0xb0>
    45a8:	ddc00017 	ldw	r23,0(sp)
    45ac:	88800117 	ldw	r2,4(r17)
    45b0:	8c802204 	addi	r18,r17,136
    45b4:	143fffc4 	addi	r16,r2,-1
    45b8:	80000916 	blt	r16,zero,45e0 <__call_exitprocs+0xa8>
    45bc:	05bfffc4 	movi	r22,-1
    45c0:	a000151e 	bne	r20,zero,4618 <__call_exitprocs+0xe0>
    45c4:	8409883a 	add	r4,r16,r16
    45c8:	2105883a 	add	r2,r4,r4
    45cc:	1485883a 	add	r2,r2,r18
    45d0:	10c02017 	ldw	r3,128(r2)
    45d4:	a8c01126 	beq	r21,r3,461c <__call_exitprocs+0xe4>
    45d8:	843fffc4 	addi	r16,r16,-1
    45dc:	85bff81e 	bne	r16,r22,45c0 <__call_exitprocs+0x88>
    45e0:	d8800217 	ldw	r2,8(sp)
    45e4:	10003126 	beq	r2,zero,46ac <__call_exitprocs+0x174>
    45e8:	dfc00c17 	ldw	ra,48(sp)
    45ec:	df000b17 	ldw	fp,44(sp)
    45f0:	ddc00a17 	ldw	r23,40(sp)
    45f4:	dd800917 	ldw	r22,36(sp)
    45f8:	dd400817 	ldw	r21,32(sp)
    45fc:	dd000717 	ldw	r20,28(sp)
    4600:	dcc00617 	ldw	r19,24(sp)
    4604:	dc800517 	ldw	r18,20(sp)
    4608:	dc400417 	ldw	r17,16(sp)
    460c:	dc000317 	ldw	r16,12(sp)
    4610:	dec00d04 	addi	sp,sp,52
    4614:	f800283a 	ret
    4618:	8409883a 	add	r4,r16,r16
    461c:	88c00117 	ldw	r3,4(r17)
    4620:	2105883a 	add	r2,r4,r4
    4624:	1445883a 	add	r2,r2,r17
    4628:	18ffffc4 	addi	r3,r3,-1
    462c:	11800217 	ldw	r6,8(r2)
    4630:	1c001526 	beq	r3,r16,4688 <__call_exitprocs+0x150>
    4634:	10000215 	stw	zero,8(r2)
    4638:	303fe726 	beq	r6,zero,45d8 <__call_exitprocs+0xa0>
    463c:	00c00044 	movi	r3,1
    4640:	1c06983a 	sll	r3,r3,r16
    4644:	90804017 	ldw	r2,256(r18)
    4648:	8cc00117 	ldw	r19,4(r17)
    464c:	1884703a 	and	r2,r3,r2
    4650:	10001426 	beq	r2,zero,46a4 <__call_exitprocs+0x16c>
    4654:	90804117 	ldw	r2,260(r18)
    4658:	1884703a 	and	r2,r3,r2
    465c:	10000c1e 	bne	r2,zero,4690 <__call_exitprocs+0x158>
    4660:	2105883a 	add	r2,r4,r4
    4664:	1485883a 	add	r2,r2,r18
    4668:	11400017 	ldw	r5,0(r2)
    466c:	e009883a 	mov	r4,fp
    4670:	303ee83a 	callr	r6
    4674:	88800117 	ldw	r2,4(r17)
    4678:	98bfc81e 	bne	r19,r2,459c <__call_exitprocs+0x64>
    467c:	b8800017 	ldw	r2,0(r23)
    4680:	147fd526 	beq	r2,r17,45d8 <__call_exitprocs+0xa0>
    4684:	003fc506 	br	459c <__call_exitprocs+0x64>
    4688:	8c000115 	stw	r16,4(r17)
    468c:	003fea06 	br	4638 <__call_exitprocs+0x100>
    4690:	2105883a 	add	r2,r4,r4
    4694:	1485883a 	add	r2,r2,r18
    4698:	11000017 	ldw	r4,0(r2)
    469c:	303ee83a 	callr	r6
    46a0:	003ff406 	br	4674 <__call_exitprocs+0x13c>
    46a4:	303ee83a 	callr	r6
    46a8:	003ff206 	br	4674 <__call_exitprocs+0x13c>
    46ac:	88800117 	ldw	r2,4(r17)
    46b0:	1000081e 	bne	r2,zero,46d4 <__call_exitprocs+0x19c>
    46b4:	89000017 	ldw	r4,0(r17)
    46b8:	20000726 	beq	r4,zero,46d8 <__call_exitprocs+0x1a0>
    46bc:	b9000015 	stw	r4,0(r23)
    46c0:	8809883a 	mov	r4,r17
    46c4:	00000000 	call	0 <__reset>
    46c8:	bc400017 	ldw	r17,0(r23)
    46cc:	883fb71e 	bne	r17,zero,45ac <__call_exitprocs+0x74>
    46d0:	003fc506 	br	45e8 <__call_exitprocs+0xb0>
    46d4:	89000017 	ldw	r4,0(r17)
    46d8:	882f883a 	mov	r23,r17
    46dc:	2023883a 	mov	r17,r4
    46e0:	883fb21e 	bne	r17,zero,45ac <__call_exitprocs+0x74>
    46e4:	003fc006 	br	45e8 <__call_exitprocs+0xb0>

000046e8 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    46e8:	defffd04 	addi	sp,sp,-12
    46ec:	df000215 	stw	fp,8(sp)
    46f0:	df000204 	addi	fp,sp,8
    46f4:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    46f8:	e0bfff17 	ldw	r2,-4(fp)
    46fc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    4700:	e0bffe17 	ldw	r2,-8(fp)
    4704:	1005003a 	cmpeq	r2,r2,zero
    4708:	1000021e 	bne	r2,zero,4714 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    470c:	002af070 	cmpltui	zero,zero,43969
    4710:	00000106 	br	4718 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    4714:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    4718:	e037883a 	mov	sp,fp
    471c:	df000017 	ldw	fp,0(sp)
    4720:	dec00104 	addi	sp,sp,4
    4724:	f800283a 	ret

00004728 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    4728:	defffd04 	addi	sp,sp,-12
    472c:	dfc00215 	stw	ra,8(sp)
    4730:	df000115 	stw	fp,4(sp)
    4734:	df000104 	addi	fp,sp,4
    4738:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    473c:	e13fff17 	ldw	r4,-4(fp)
    4740:	00046e80 	call	46e8 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    4744:	003fff06 	br	4744 <_exit+0x1c>
    4748:	00004534 	movhi	zero,276
